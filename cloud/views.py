import os,sys
import timeago

from builtins import int
from itertools import count

from django.core.wsgi import get_wsgi_application
from numpy.lib.function_base import vectorize
from reportlab.platypus.para import paragraphEngine
from scipy.io.arff.arffread import r_wcomattrval
from sympy.functions.elementary.complexes import im
# from sympy.physics.units.definitions.dimension_definitions import temperature
from cloud.process.WebUI.date2Str import date2str

os.environ['DJANGO_SETTINGS_MODULE'] = 'RbiCloud.settings'
application = get_wsgi_application()

from PIL.PngImagePlugin import _idat
from django.core.paginator import Paginator, EmptyPage, PageNotAnInteger
from django.shortcuts import render, redirect, render_to_response
from django.http import Http404, HttpResponse
from cloud import models
from dateutil.relativedelta import relativedelta
from cloud.process.RBI import DM_CAL, CA_CAL, pofConvert, CA_CAL_LV2
from cloud.process.RBI.Perfomance import Recalculate as perfomance
from datetime import datetime
from cloud.process.WebUI import location
from cloud.process.WebUI import roundData
from cloud.process.File import export_data
from cloud.process.WebUI import date2Str
from django.core.files.storage import FileSystemStorage
from django.conf import settings
from cloud.process.File import import_data as ExcelImport
from cloud.process.RBI import fastCalulate as ReCalculate
from django.db.models import Q
from cloud.regularverification.regular import REGULAR
from cloud.regularverification.SendEmail import SendEmail
import threading
from cloud.regularverification import subscribe
# import paho.mqtt.client as mqtt
from cloud.regularverification import subscribe_thingsboard

from django.views.decorators.csrf import csrf_protect
from django.contrib.sites.shortcuts import get_current_site
from django.utils.encoding import force_bytes, force_text
from cloud.tokens import gen_token
from django.utils.http import urlsafe_base64_decode, urlsafe_base64_encode
from django.core.mail import EmailMessage
from django.template.loader import render_to_string
from cloud.process.RBI import Postgresql as DAL_CAL
from cloud.process.RBI import CA_Flammable
from cloud.process.RBI import ToxicConsequenceArea
from cloud.process.RBI import FinancialCOF,Detail_DM_CAL,mitigation,corrosion_rate
from django.contrib.auth import login
import time
from django.http import JsonResponse
from cloud.process.ExportPDF import PdfFileReader

from cloud.process.RBI.view_util import base as base_util
from cloud.process.RBI.view_util import chartv3 as chart_util
from cloud.MLModelBackend.cof import load_model as cof_predict_util

from cloud.regularverification.autoverification import Verification
from cloud.regularverification import Logging

import requests
import json
from django.http import JsonResponse
import math
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
# from sendsms.message import SmsMessage
# from google_drive_downloader import GoogleDriveDownloader as gdd
# Create your views here.
from cloud.encryption_util import *
################ Base ####################
def Base_citizen(request):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    if request.session['kind'] == 'citizen':
        return render(request, 'BaseUI/BaseCitizen/baseCitizen.html', {'info': request.session, 'count': count})


def base_manager(request):
    if not request.session.session_key:
        return redirect('home')
    try:
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
    except:
        Http404
    return render(request, 'BaseUI/BaseManager/baseManager.html', {'count': count})


def base_business(request):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    infox = models.Zbusiness.objects.get(userID=request.session['id'])
    if request.session['kind'] == 'factory':
        return render(request, 'BaseUI/BaseFacility/baseBusiness.html', {'info': request.session, 'count': count, 'infox' : infox})


def business_home(request):
    return render(request, 'BaseUI/BaseFacility/baseFacility.html')


def base_equipment(request):
    return render(request, 'BaseUI/BaseFacility/baseEquipment.html')


def base_component(request):
    return render(request, 'BaseUI/BaseFacility/baseComponent.html')


def base_proposal(request):
    return render(request, 'BaseUI/BaseFacility/baseProposal.html')


def base_risksummary(request):
    return render(request, 'BaseUI/BaseFacility/baseRiskSummary.html')


def base_designcode(request):
    return render(request, 'BaseUI/BaseFacility/baseDesigncode.html')


def base_manufacture(request):
    return render(request, 'FacilityUI/manufacture/manufactureListDisplay.html')


################## 404 Error ###########################
def handler404(request):
    return render(request, '404/404.html', locals())


################ Inspection Plan #######################
def ListInpsectionPlan(siteID):
    try:
        inspection = models.InspecPlan.objects.filter(siteid_id=siteID)
    except Exception as e:
        print(e)
        inspection = models.InspecPlan.objects.all()
    try:
        data = []
        for a in inspection:
            obj = {}
            obj["ID"] = a.id
            obj["InspecPlanName"] = a.inspectionplanname
            obj["InspecPlanDate"] = a.inspectionplandate
            data.append(obj)
    except Exception as e:
        print(e)
    return data

def ListInspectionName(siteID):
    try:
        inspection = models.InspecPlan.objects.filter(siteid_id=siteID)
    except Exception as e:
        print(e)
        inspection = models.InspecPlan.objects.all()
    try:
        data = []
        data1 = []
        for a in inspection:
            coverage = models.InspectionCoverage.objects.filter(planid_id=a.id)
            if coverage.count():
                a.inspectionplanname
                data.append(a.inspectionplanname)
            else:
                data1.append(a.inspectionplanname)
    except Exception as e:
        print(e)
    return data, data1
def ListInspectionCoverage(planID):
    inspection = models.InspecPlan.objects.get(id=planID)
    inspecCover = models.InspectionCoverage.objects.filter(planid_id=planID)
    data = []
    for a in inspecCover:
        obj = {}
        obj["ID"] = planID
        obj["InpsecName"] = inspection.inspectionplanname
        obj["InspecDate"] = inspection.inspectionplandate
        obj["NameEquipment"] = models.EquipmentMaster.objects.get(equipmentid=a.equipmentid_id).equipmentnumber
        obj["NameComponent"] = models.ComponentMaster.objects.get(componentid=a.componentid_id).componentnumber
        data.append(obj)
    return data


def InspectionPlanDetail(request, planID):  # hàm chính
    return 0


def ListNormalProposalFofInpsection(siteID, facilityID, equimentID):
    # site = models.Sites.objects.get(siteID=3)
    data = []
    # tank = [8, 9, 12, 13, 14, 15]
    tank = [12,13,14,15]
    datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
    datapof = []  # kiem tra id  proposal co ton tai trong bang RwFullPof
    componenttypeID = 0
    rwdamAll = models.RwDamageMechanism.objects.all()
    rwfullpofAll = models.RwFullPof.objects.all()
    for a in rwdamAll:
        array = a.id_dm_id
        datarw.append(array)
    for b in rwfullpofAll:
        brray = b.id_id
        datapof.append(brray)
    try:
        if facilityID:
            faci = models.Facility.objects.filter(facilityid=facilityID)
            for f in faci:
                if equimentID:
                    equip = models.EquipmentMaster.objects.filter(equipmentid=equimentID)
                else:
                    equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                for e in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=e.equipmentid)
                    equiptype = models.EquipmentType.objects.get(equipmenttypeid=e.equipmenttypeid_id)
                    desi = models.DesignCode.objects.get(designcodeid=e.designcodeid_id)
                    for c in comp:
                        pros = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        comptype = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id)
                        for p in pros:
                            componenttypeID = comptype.componenttypeid
                            obj = {}
                            rwequip = models.RwEquipment.objects.get(id_id=p.id)
                            rwcomponent = models.RwComponent.objects.get(id_id=p.id)
                            rwstream = models.RwStream.objects.get(id_id=p.id)
                            rwmaterial = models.RwMaterial.objects.get(id_id=p.id)
                            rwcoat = models.RwCoating.objects.get(id_id=p.id)
                            df = models.RwFullPof.objects.filter(id=p.id)
                            ca = models.RwFullFcof.objects.filter(id=p.id)
                            obj['ID'] = p.id
                            obj['ConponentName'] = c.componentname
                            obj['ConponentNumber'] = c.componentnumber
                            obj['EquipmentNumber'] = e.equipmentnumber
                            obj['CommissionDate'] = e.commissiondate
                            obj['Site'] = "SITE"
                            obj['Facility'] = f.facilityname
                            if df.count() > 0 and ca.count() > 0:
                                df = models.RwFullPof.objects.get(id=p.id)
                                ca = models.RwFullFcof.objects.get(id=p.id)
                                obj['API1'] = df.pofap1category + ca.fcofcategory
                                obj['API2'] = df.pofap2category + ca.fcofcategory
                                obj['API3'] = df.pofap3category + ca.fcofcategory
                                obj['RLI'] = df.rli
                            else:
                                obj['API1'] = "None"
                                obj['API2'] = "None"
                                obj['API3'] = "None"
                                obj['RLI'] = "None"
                            obj['AssessmentName'] = p.proposalname
                            obj['AssessmentDate'] = p.assessmentdate
                            obj['RiskAnalysisPeriod'] = p.riskanalysisperiod
                            obj['EquipmentType'] = equiptype.equipmenttypename
                            obj['ComponentType'] = comptype.componenttypename
                            if (p.id in datarw):
                                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=p.id)[0]
                                obj['InspectionDueDate'] = rwdam.inspduedate
                            else:
                                obj['InspectionDueDate'] = "None"
                            obj['DesignCode'] = desi.designcode
                            # Equipment Properties
                            obj['adminControlUpset'] = rwequip.adminupsetmanagement
                            obj['ContainsDeadlegs'] = rwequip.containsdeadlegs
                            obj['PresenceofSulphides'] = rwequip.presencesulphideso2
                            obj['SteamedOut'] = rwequip.steamoutwaterflush
                            obj['ThermalHistory'] = rwequip.thermalhistory
                            obj['SystemManagementFactor'] = rwequip.managementfactor
                            obj['PWHT'] = rwequip.pwht
                            obj['PressurisationControlled'] = rwequip.pressurisationcontrolled
                            obj['PresenceofSulphidesShutdow'] = rwequip.presencesulphideso2shutdown
                            obj['OnlineMonitoring'] = rwequip.onlinemonitoring
                            obj['minreqtemperaturepressurisation'] = rwequip.minreqtemperaturepressurisation
                            obj['MFTF'] = rwequip.materialexposedtoclext
                            obj['CylicOper'] = rwequip.cyclicoperation
                            obj['LOM'] = rwequip.lineronlinemonitoring
                            obj['Downtime'] = rwequip.downtimeprotectionused
                            obj['EquOper'] = rwequip.yearlowestexptemp
                            obj['EquipmentVolume'] = rwequip.volume
                            obj['ExternalEnvironment'] = rwequip.interfacesoilwater
                            obj['InterfaceSoilWater'] = rwequip.externalenvironment
                            obj['HeatTraced'] = rwequip.heattraced
                            obj['Highly'] = rwequip.highlydeadleginsp
                            # Component
                            obj['MinimumMeasuredThickness'] = rwcomponent.currentthickness
                            obj['NominalThickness'] = rwcomponent.nominalthickness
                            obj['NominalDiameter'] = rwcomponent.nominaldiameter
                            obj['MinRequiredThickness'] = rwcomponent.minreqthickness
                            obj['CurrentCorrosionRate'] = rwcomponent.currentcorrosionrate
                            obj['PresenceCracks'] = rwcomponent.crackspresent
                            obj['PreviousFailure'] = rwcomponent.previousfailures
                            obj['DFDI'] = rwcomponent.damagefoundinspection
                            obj['HFICI'] = rwcomponent.highlyinjectioninsp
                            obj['PIMP'] = 0
                            # obj['TrampElements'] = rwcomponent.trampelements
                            obj['TrampElements'] = 0
                            obj['DeltaFATT'] = rwcomponent.deltafatt
                            obj['CylicLoadingConnectedwithin1525m'] = rwcomponent.cyclicloadingwitin15_25m
                            obj['MaximumBrinnellHardnessofWeld'] = rwcomponent.brinnelhardness
                            obj['NumberofFittingsonPipe'] = rwcomponent.numberpipefittings
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['PipeCondition'] = rwcomponent.pipecondition
                            obj['VASD'] = rwcomponent.shakingdetected
                            obj['shakingamount'] = rwcomponent.shakingamount
                            obj['correctiveaction'] = rwcomponent.correctiveaction
                            obj['branchdiameter'] = rwcomponent.branchdiameter
                            obj['complexityprotrusion'] = rwcomponent.complexityprotrusion
                            # Stream
                            obj['maxoperatingtemperature'] = rwstream.maxoperatingtemperature
                            obj['minoperatingtemperature'] = rwstream.minoperatingtemperature
                            obj['minoperatingpressure'] = rwstream.minoperatingpressure
                            obj['criticalexposuretemperature'] = rwstream.criticalexposuretemperature
                            obj['aminesolution'] = rwstream.aminesolution
                            obj['naohconcentration'] = rwstream.naohconcentration
                            obj['h2sinwater'] = rwstream.h2sinwater
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['flowrate'] = rwstream.flowrate
                            obj['waterph'] = rwstream.waterph
                            obj['ToxicConstituents'] = rwstream.toxicconstituent
                            obj['releasefluidpercenttoxic'] = rwstream.releasefluidpercenttoxic
                            obj['PCH'] = rwstream.hydrogen
                            obj['PHA'] = rwstream.hydrofluoric
                            obj['exposuretoamine'] = rwstream.exposuretoamine
                            obj['PresenceCyanides'] = rwstream.cyanide
                            obj['h2spartialpressure'] = rwstream.h2spartialpressure
                            obj['ESBC'] = rwstream.exposedtosulphur
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EnvironmentCH2S'] = rwstream.h2s
                            obj['ECCAC'] = rwstream.caustic
                            obj['co3concentration'] = rwstream.co3concentration
                            obj['chloride'] = rwstream.chloride
                            obj['APDO'] = rwstream.aqueousoperation
                            obj['APDSD'] = rwstream.aqueousshutdown
                            # Material
                            obj['designtemperature'] = rwmaterial.designtemperature
                            obj['allowablestress'] = rwcomponent.allowablestress  # Component
                            obj['designpressure'] = rwmaterial.designpressure
                            obj['temper'] = rwmaterial.temper
                            obj['sulfurcontent'] = rwmaterial.sulfurcontent
                            obj['sigmaphase'] = rwmaterial.sigmaphase
                            obj['referencetemperature'] = rwmaterial.referencetemperature
                            obj['NickelAlloy'] = rwmaterial.nickelbased
                            obj['costfactor'] = rwmaterial.costfactor
                            obj['heattreatment'] = rwmaterial.heattreatment
                            obj['corrosionallowance'] = rwmaterial.corrosionallowance
                            obj['Chromium'] = rwmaterial.chromemoreequal12
                            obj['CoLAS'] = rwmaterial.carbonlowalloy
                            obj['AusteniticSteel'] = rwmaterial.austenitic
                            # Coating
                            obj['InternalCoating'] = rwcoat.internalcoating
                            obj['ExternalCoating'] = rwcoat.externalcoating
                            obj['externalcoatingdate'] = rwcoat.externalcoatingdate
                            obj['externalcoatingquality'] = rwcoat.externalcoatingquality
                            obj['supportMaterial'] = rwcoat.supportconfignotallowcoatingmaint
                            obj['InternalLining'] = rwcoat.internallining
                            obj['internallinertype'] = rwcoat.internallinertype
                            obj['internallinercondition'] = rwcoat.internallinercondition
                            obj['internalcladding'] = rwcoat.internalcladding
                            obj['claddingcorrosionrate'] = rwcoat.claddingcorrosionrate
                            obj['externalinsulation'] = rwcoat.externalinsulation
                            obj['externalinsulationtype'] = rwcoat.externalinsulationtype
                            obj['insulationcondition'] = rwcoat.insulationcondition
                            obj['insulationcontainschloride'] = rwcoat.insulationcontainschloride
                            if not componenttypeID in tank:
                                data.append(obj)
        else:
            faci = models.Facility.objects.filter(siteid_id=siteID)
            for f in faci:
                equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                for e in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=e.equipmentid)
                    equiptype = models.EquipmentType.objects.get(equipmenttypeid=e.equipmenttypeid_id)
                    desi = models.DesignCode.objects.get(designcodeid=e.designcodeid_id)
                    for c in comp:
                        pros = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        comptype = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id)
                        componenttypeID = comptype.componenttypeid
                        for p in pros:
                            obj = {}
                            rwequip = models.RwEquipment.objects.get(id_id=p.id)
                            rwcomponent = models.RwComponent.objects.get(id_id=p.id)
                            rwstream = models.RwStream.objects.get(id_id=p.id)
                            rwmaterial = models.RwMaterial.objects.get(id_id=p.id)
                            rwcoat = models.RwCoating.objects.get(id_id=p.id)
                            df = models.RwFullPof.objects.filter(id=p.id)
                            ca = models.RwFullFcof.objects.filter(id=p.id)
                            obj['ID'] = p.id
                            obj['ConponentName'] = c.componentname
                            obj['ConponentNumber'] = c.componentnumber
                            obj['EquipmentNumber'] = e.equipmentnumber
                            obj['CommissionDate'] = e.commissiondate
                            obj['Site'] = "SITE"
                            obj['Facility'] = f.facilityname
                            if df.count() > 0 and ca.count() > 0:
                                df = models.RwFullPof.objects.get(id=p.id)
                                ca = models.RwFullFcof.objects.get(id=p.id)
                                obj['API1'] = df.pofap1category + ca.fcofcategory
                                obj['API2'] = df.pofap2category + ca.fcofcategory
                                obj['API3'] = df.pofap3category + ca.fcofcategory
                                obj['RLI'] = df.rli
                            else:
                                obj['API1'] = "None"
                                obj['API2'] = "None"
                                obj['API3'] = "None"
                                obj['RLI'] = "None"
                            obj['AssessmentName'] = p.proposalname
                            obj['AssessmentDate'] = p.assessmentdate
                            obj['RiskAnalysisPeriod'] = p.riskanalysisperiod
                            obj['EquipmentType'] = equiptype.equipmenttypename
                            obj['ComponentType'] = comptype.componenttypename
                            if (p.id in datarw):
                                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=p.id)[0]
                                obj['InspectionDueDate'] = rwdam.inspduedate
                            else:
                                obj['InspectionDueDate'] = "None"
                            obj['DesignCode'] = desi.designcode
                            # Equipment Properties
                            obj['adminControlUpset'] = rwequip.adminupsetmanagement
                            obj['ContainsDeadlegs'] = rwequip.containsdeadlegs
                            obj['PresenceofSulphides'] = rwequip.presencesulphideso2
                            obj['SteamedOut'] = rwequip.steamoutwaterflush
                            obj['ThermalHistory'] = rwequip.thermalhistory
                            obj['SystemManagementFactor'] = rwequip.managementfactor
                            obj['PWHT'] = rwequip.pwht
                            obj['PressurisationControlled'] = rwequip.pressurisationcontrolled
                            obj['PresenceofSulphidesShutdow'] = rwequip.presencesulphideso2shutdown
                            obj['OnlineMonitoring'] = rwequip.onlinemonitoring
                            obj['minreqtemperaturepressurisation'] = rwequip.minreqtemperaturepressurisation
                            obj['MFTF'] = rwequip.materialexposedtoclext
                            obj['CylicOper'] = rwequip.cyclicoperation
                            obj['LOM'] = rwequip.lineronlinemonitoring
                            obj['Downtime'] = rwequip.downtimeprotectionused
                            obj['EquOper'] = rwequip.yearlowestexptemp
                            obj['EquipmentVolume'] = rwequip.volume
                            obj['ExternalEnvironment'] = rwequip.interfacesoilwater
                            obj['InterfaceSoilWater'] = rwequip.externalenvironment
                            obj['HeatTraced'] = rwequip.heattraced
                            obj['Highly'] = rwequip.highlydeadleginsp
                            # Component
                            obj['MinimumMeasuredThickness'] = rwcomponent.currentthickness
                            obj['NominalThickness'] = rwcomponent.nominalthickness
                            obj['NominalDiameter'] = rwcomponent.nominaldiameter
                            obj['MinRequiredThickness'] = rwcomponent.minreqthickness
                            obj['CurrentCorrosionRate'] = rwcomponent.currentcorrosionrate
                            obj['PresenceCracks'] = rwcomponent.crackspresent
                            obj['PreviousFailure'] = rwcomponent.previousfailures
                            obj['DFDI'] = rwcomponent.damagefoundinspection
                            obj['HFICI'] = rwcomponent.highlyinjectioninsp
                            obj['PIMP'] = 0
                            # obj['TrampElements'] = rwcomponent.trampelements
                            obj['TrampElements'] = 0
                            obj['DeltaFATT'] = rwcomponent.deltafatt
                            obj['CylicLoadingConnectedwithin1525m'] = rwcomponent.cyclicloadingwitin15_25m
                            obj['MaximumBrinnellHardnessofWeld'] = rwcomponent.brinnelhardness
                            obj['NumberofFittingsonPipe'] = rwcomponent.numberpipefittings
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['PipeCondition'] = rwcomponent.pipecondition
                            obj['VASD'] = rwcomponent.shakingdetected
                            obj['shakingamount'] = rwcomponent.shakingamount
                            obj['correctiveaction'] = rwcomponent.correctiveaction
                            obj['branchdiameter'] = rwcomponent.branchdiameter
                            obj['complexityprotrusion'] = rwcomponent.complexityprotrusion
                            # Stream
                            obj['maxoperatingtemperature'] = rwstream.maxoperatingtemperature
                            obj['minoperatingtemperature'] = rwstream.minoperatingtemperature
                            obj['minoperatingpressure'] = rwstream.minoperatingpressure
                            obj['criticalexposuretemperature'] = rwstream.criticalexposuretemperature
                            obj['aminesolution'] = rwstream.aminesolution
                            obj['naohconcentration'] = rwstream.naohconcentration
                            obj['h2sinwater'] = rwstream.h2sinwater
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['flowrate'] = rwstream.flowrate
                            obj['waterph'] = rwstream.waterph
                            obj['ToxicConstituents'] = rwstream.toxicconstituent
                            obj['releasefluidpercenttoxic'] = rwstream.releasefluidpercenttoxic
                            obj['PCH'] = rwstream.hydrogen
                            obj['PHA'] = rwstream.hydrofluoric
                            obj['exposuretoamine'] = rwstream.exposuretoamine
                            obj['PresenceCyanides'] = rwstream.cyanide
                            obj['h2spartialpressure'] = rwstream.h2spartialpressure
                            obj['ESBC'] = rwstream.exposedtosulphur
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EnvironmentCH2S'] = rwstream.h2s
                            obj['ECCAC'] = rwstream.caustic
                            obj['co3concentration'] = rwstream.co3concentration
                            obj['chloride'] = rwstream.chloride
                            obj['APDO'] = rwstream.aqueousoperation
                            obj['APDSD'] = rwstream.aqueousshutdown
                            # Material
                            obj['designtemperature'] = rwmaterial.designtemperature
                            obj['allowablestress'] = rwcomponent.allowablestress  # Component
                            obj['designpressure'] = rwmaterial.designpressure
                            obj['temper'] = rwmaterial.temper
                            obj['sulfurcontent'] = rwmaterial.sulfurcontent
                            obj['sigmaphase'] = rwmaterial.sigmaphase
                            obj['referencetemperature'] = rwmaterial.referencetemperature
                            obj['NickelAlloy'] = rwmaterial.nickelbased
                            obj['costfactor'] = rwmaterial.costfactor
                            obj['heattreatment'] = rwmaterial.heattreatment
                            obj['corrosionallowance'] = rwmaterial.corrosionallowance
                            obj['Chromium'] = rwmaterial.chromemoreequal12
                            obj['CoLAS'] = rwmaterial.carbonlowalloy
                            obj['AusteniticSteel'] = rwmaterial.austenitic
                            # Coating
                            obj['InternalCoating'] = rwcoat.internalcoating
                            obj['ExternalCoating'] = rwcoat.externalcoating
                            obj['externalcoatingdate'] = rwcoat.externalcoatingdate
                            obj['externalcoatingquality'] = rwcoat.externalcoatingquality
                            obj['supportMaterial'] = rwcoat.supportconfignotallowcoatingmaint
                            obj['InternalLining'] = rwcoat.internallining
                            obj['internallinertype'] = rwcoat.internallinertype
                            obj['internallinercondition'] = rwcoat.internallinercondition
                            obj['internalcladding'] = rwcoat.internalcladding
                            obj['claddingcorrosionrate'] = rwcoat.claddingcorrosionrate
                            obj['externalinsulation'] = rwcoat.externalinsulation
                            obj['externalinsulationtype'] = rwcoat.externalinsulationtype
                            obj['insulationcondition'] = rwcoat.insulationcondition
                            obj['insulationcontainschloride'] = rwcoat.insulationcontainschloride
                            if not componenttypeID in tank:
                                data.append(obj)
    except Exception as e:
        print(e)
    return data


def ListTankProposalForInpsection(siteID, facilityID, equimentID):
    dataTank = []
    tank = [12,13,14,15]
    # tank = [8, 9, 12, 13, 14, 15]
    datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
    datapof = []  # kiem tra id  proposal co ton tai trong bang RwFullPof
    componenttypeID = 0
    try:
        if facilityID:
            faci = models.Facility.objects.filter(facilityid=facilityID)
            for f in faci:
                if equimentID:
                    equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                else:
                    equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                for e in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=e.equipmentid)
                    equiptype = models.EquipmentType.objects.get(equipmenttypeid=e.equipmenttypeid_id)
                    desi = models.DesignCode.objects.get(designcodeid=e.designcodeid_id)
                    for c in comp:
                        pros = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        comptype = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id)
                        componenttypeID = comptype.componenttypeid
                        for p in pros:
                            obj = {}
                            rwequip = models.RwEquipment.objects.get(id_id=p.id)
                            rwcomponent = models.RwComponent.objects.get(id_id=p.id)
                            rwstream = models.RwStream.objects.get(id_id=p.id)
                            rwmaterial = models.RwMaterial.objects.get(id_id=p.id)
                            rwcoat = models.RwCoating.objects.get(id_id=p.id)
                            df = models.RwFullPof.objects.filter(id=p.id)
                            ca = models.RwFullFcof.objects.filter(id=p.id)
                            obj['ID'] = p.id
                            obj['ConponentName'] = c.componentname
                            obj['ConponentNumber'] = c.componentnumber
                            obj['EquipmentNumber'] = e.equipmentnumber
                            obj['CommissionDate'] = e.commissiondate
                            obj['Site'] = "SITE"
                            obj['Facility'] = f.facilityname
                            if df.count() > 0 and ca.count() > 0:
                                df = models.RwFullPof.objects.get(id=p.id)
                                ca = models.RwFullFcof.objects.get(id=p.id)
                                obj['API1'] = df.pofap1category + ca.fcofcategory
                                obj['API2'] = df.pofap2category + ca.fcofcategory
                                obj['API3'] = df.pofap3category + ca.fcofcategory
                                obj['RLI'] = df.rli
                            else:
                                obj['API1'] = "None"
                                obj['API2'] = "None"
                                obj['API3'] = "None"
                                obj['RLI'] = "None"
                            obj['AssessmentName'] = p.proposalname
                            obj['AssessmentDate'] = p.assessmentdate
                            obj['RiskAnalysisPeriod'] = p.riskanalysisperiod
                            obj['EquipmentType'] = equiptype.equipmenttypename
                            obj['ComponentType'] = comptype.componenttypename
                            if (p.id in datarw):
                                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=p.id)[0]
                                obj['InspectionDueDate'] = rwdam.inspduedate
                            else:
                                obj['InspectionDueDate'] = "None"
                            obj['DesignCode'] = desi.designcode
                            # Equipment Properties
                            obj['adminControlUpset'] = rwequip.adminupsetmanagement
                            obj['ContainsDeadlegs'] = rwequip.containsdeadlegs
                            obj['PresenceofSulphides'] = rwequip.presencesulphideso2
                            obj['SteamedOut'] = rwequip.steamoutwaterflush
                            obj['ThermalHistory'] = rwequip.thermalhistory
                            obj['SystemManagementFactor'] = rwequip.managementfactor
                            obj['PWHT'] = rwequip.pwht
                            obj['PressurisationControlled'] = rwequip.pressurisationcontrolled
                            obj['PresenceofSulphidesShutdow'] = rwequip.presencesulphideso2shutdown
                            obj['OnlineMonitoring'] = rwequip.onlinemonitoring
                            obj['minreqtemperaturepressurisation'] = rwequip.minreqtemperaturepressurisation
                            obj['MFTF'] = rwequip.materialexposedtoclext
                            obj['CylicOper'] = rwequip.cyclicoperation
                            obj['LOM'] = rwequip.lineronlinemonitoring
                            obj['Downtime'] = rwequip.downtimeprotectionused
                            obj['EquOper'] = rwequip.yearlowestexptemp
                            obj['EquipmentVolume'] = rwequip.volume
                            obj['ExternalEnvironment'] = rwequip.interfacesoilwater
                            obj['InterfaceSoilWater'] = rwequip.externalenvironment
                            obj['HeatTraced'] = rwequip.heattraced
                            obj['Highly'] = rwequip.highlydeadleginsp
                            # Component
                            obj['MinimumMeasuredThickness'] = rwcomponent.currentthickness
                            obj['NominalThickness'] = rwcomponent.nominalthickness
                            obj['NominalDiameter'] = rwcomponent.nominaldiameter
                            obj['MinRequiredThickness'] = rwcomponent.minreqthickness
                            obj['CurrentCorrosionRate'] = rwcomponent.currentcorrosionrate
                            obj['PresenceCracks'] = rwcomponent.crackspresent
                            obj['PreviousFailure'] = rwcomponent.previousfailures
                            obj['DFDI'] = rwcomponent.damagefoundinspection
                            obj['HFICI'] = rwcomponent.highlyinjectioninsp
                            obj['PIMP'] = 0
                            # obj['TrampElements'] = rwcomponent.trampelements
                            obj['TrampElements'] = 0
                            obj['DeltaFATT'] = rwcomponent.deltafatt
                            obj['CylicLoadingConnectedwithin1525m'] = rwcomponent.cyclicloadingwitin15_25m
                            obj['MaximumBrinnellHardnessofWeld'] = rwcomponent.brinnelhardness
                            obj['NumberofFittingsonPipe'] = rwcomponent.numberpipefittings
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['PipeCondition'] = rwcomponent.pipecondition
                            obj['VASD'] = rwcomponent.shakingdetected
                            obj['shakingamount'] = rwcomponent.shakingamount
                            obj['correctiveaction'] = rwcomponent.correctiveaction
                            obj['branchdiameter'] = rwcomponent.branchdiameter
                            obj['complexityprotrusion'] = rwcomponent.complexityprotrusion
                            # Stream
                            obj['maxoperatingtemperature'] = rwstream.maxoperatingtemperature
                            obj['minoperatingtemperature'] = rwstream.minoperatingtemperature
                            obj['minoperatingpressure'] = rwstream.minoperatingpressure
                            obj['criticalexposuretemperature'] = rwstream.criticalexposuretemperature
                            obj['aminesolution'] = rwstream.aminesolution
                            obj['naohconcentration'] = rwstream.naohconcentration
                            obj['h2sinwater'] = rwstream.h2sinwater
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['flowrate'] = rwstream.flowrate
                            obj['waterph'] = rwstream.waterph
                            obj['ToxicConstituents'] = rwstream.toxicconstituent
                            obj['releasefluidpercenttoxic'] = rwstream.releasefluidpercenttoxic
                            obj['PCH'] = rwstream.hydrogen
                            obj['PHA'] = rwstream.hydrofluoric
                            obj['exposuretoamine'] = rwstream.exposuretoamine
                            obj['PresenceCyanides'] = rwstream.cyanide
                            obj['h2spartialpressure'] = rwstream.h2spartialpressure
                            obj['ESBC'] = rwstream.exposedtosulphur
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EnvironmentCH2S'] = rwstream.h2s
                            obj['ECCAC'] = rwstream.caustic
                            obj['co3concentration'] = rwstream.co3concentration
                            obj['chloride'] = rwstream.chloride
                            obj['APDO'] = rwstream.aqueousoperation
                            obj['APDSD'] = rwstream.aqueousshutdown
                            # Material
                            obj['designtemperature'] = rwmaterial.designtemperature
                            obj['allowablestress'] = rwcomponent.allowablestress  # Component
                            obj['designpressure'] = rwmaterial.designpressure
                            obj['temper'] = rwmaterial.temper
                            obj['sulfurcontent'] = rwmaterial.sulfurcontent
                            obj['sigmaphase'] = rwmaterial.sigmaphase
                            obj['referencetemperature'] = rwmaterial.referencetemperature
                            obj['NickelAlloy'] = rwmaterial.nickelbased
                            obj['costfactor'] = rwmaterial.costfactor
                            obj['heattreatment'] = rwmaterial.heattreatment
                            obj['corrosionallowance'] = rwmaterial.corrosionallowance
                            obj['Chromium'] = rwmaterial.chromemoreequal12
                            obj['CoLAS'] = rwmaterial.carbonlowalloy
                            obj['AusteniticSteel'] = rwmaterial.austenitic
                            # Coating
                            obj['InternalCoating'] = rwcoat.internalcoating
                            obj['ExternalCoating'] = rwcoat.externalcoating
                            obj['externalcoatingdate'] = rwcoat.externalcoatingdate
                            obj['externalcoatingquality'] = rwcoat.externalcoatingquality
                            obj['supportMaterial'] = rwcoat.supportconfignotallowcoatingmaint
                            obj['InternalLining'] = rwcoat.internallining
                            obj['internallinertype'] = rwcoat.internallinertype
                            obj['internallinercondition'] = rwcoat.internallinercondition
                            obj['internalcladding'] = rwcoat.internalcladding
                            obj['claddingcorrosionrate'] = rwcoat.claddingcorrosionrate
                            obj['externalinsulation'] = rwcoat.externalinsulation
                            obj['externalinsulationtype'] = rwcoat.externalinsulationtype
                            obj['insulationcondition'] = rwcoat.insulationcondition
                            obj['insulationcontainschloride'] = rwcoat.insulationcontainschloride
                            if componenttypeID in tank:
                                dataTank.append(obj)
        else:
            faci = models.Facility.objects.filter(siteid_id=siteID)
            for f in faci:
                equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                for e in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=e.equipmentid)
                    equiptype = models.EquipmentType.objects.get(equipmenttypeid=e.equipmenttypeid_id)
                    desi = models.DesignCode.objects.get(designcodeid=e.designcodeid_id)
                    for c in comp:
                        pros = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        comptype = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id)
                        componenttypeID = comptype.componenttypeid
                        for p in pros:
                            obj = {}
                            rwequip = models.RwEquipment.objects.get(id_id=p.id)
                            rwcomponent = models.RwComponent.objects.get(id_id=p.id)
                            rwstream = models.RwStream.objects.get(id_id=p.id)
                            rwmaterial = models.RwMaterial.objects.get(id_id=p.id)
                            rwcoat = models.RwCoating.objects.get(id_id=p.id)
                            df = models.RwFullPof.objects.filter(id=p.id)
                            ca = models.RwFullFcof.objects.filter(id=p.id)
                            obj['ID'] = p.id
                            obj['ConponentName'] = c.componentname
                            obj['ConponentNumber'] = c.componentnumber
                            obj['EquipmentNumber'] = e.equipmentnumber
                            obj['CommissionDate'] = e.commissiondate
                            obj['Site'] = "SITE"
                            obj['Facility'] = f.facilityname
                            if df.count() > 0 and ca.count() > 0:
                                df = models.RwFullPof.objects.get(id=p.id)
                                ca = models.RwFullFcof.objects.get(id=p.id)
                                obj['API1'] = df.pofap1category + ca.fcofcategory
                                obj['API2'] = df.pofap2category + ca.fcofcategory
                                obj['API3'] = df.pofap3category + ca.fcofcategory
                                obj['RLI'] = df.rli
                            else:
                                obj['API1'] = "None"
                                obj['API2'] = "None"
                                obj['API3'] = "None"
                                obj['RLI'] = "None"
                            obj['AssessmentName'] = p.proposalname
                            obj['AssessmentDate'] = p.assessmentdate
                            obj['RiskAnalysisPeriod'] = p.riskanalysisperiod
                            obj['EquipmentType'] = equiptype.equipmenttypename
                            obj['ComponentType'] = comptype.componenttypename
                            if (p.id in datarw):
                                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=p.id)[0]
                                obj['InspectionDueDate'] = rwdam.inspduedate
                            else:
                                obj['InspectionDueDate'] = "None"
                            obj['DesignCode'] = desi.designcode
                            # Equipment Properties
                            obj['adminControlUpset'] = rwequip.adminupsetmanagement
                            obj['ContainsDeadlegs'] = rwequip.containsdeadlegs
                            obj['PresenceofSulphides'] = rwequip.presencesulphideso2
                            obj['SteamedOut'] = rwequip.steamoutwaterflush
                            obj['ThermalHistory'] = rwequip.thermalhistory
                            obj['SystemManagementFactor'] = rwequip.managementfactor
                            obj['PWHT'] = rwequip.pwht
                            obj['PressurisationControlled'] = rwequip.pressurisationcontrolled
                            obj['PresenceofSulphidesShutdow'] = rwequip.presencesulphideso2shutdown
                            obj['OnlineMonitoring'] = rwequip.onlinemonitoring
                            obj['minreqtemperaturepressurisation'] = rwequip.minreqtemperaturepressurisation
                            obj['MFTF'] = rwequip.materialexposedtoclext
                            obj['CylicOper'] = rwequip.cyclicoperation
                            obj['LOM'] = rwequip.lineronlinemonitoring
                            obj['Downtime'] = rwequip.downtimeprotectionused
                            obj['EquOper'] = rwequip.yearlowestexptemp
                            obj['EquipmentVolume'] = rwequip.volume
                            obj['ExternalEnvironment'] = rwequip.interfacesoilwater
                            obj['InterfaceSoilWater'] = rwequip.externalenvironment
                            obj['HeatTraced'] = rwequip.heattraced
                            obj['Highly'] = rwequip.highlydeadleginsp
                            # Component
                            obj['MinimumMeasuredThickness'] = rwcomponent.currentthickness
                            obj['NominalThickness'] = rwcomponent.nominalthickness
                            obj['NominalDiameter'] = rwcomponent.nominaldiameter
                            obj['MinRequiredThickness'] = rwcomponent.minreqthickness
                            obj['CurrentCorrosionRate'] = rwcomponent.currentcorrosionrate
                            obj['PresenceCracks'] = rwcomponent.crackspresent
                            obj['PreviousFailure'] = rwcomponent.previousfailures
                            obj['DFDI'] = rwcomponent.damagefoundinspection
                            obj['HFICI'] = rwcomponent.highlyinjectioninsp
                            obj['PIMP'] = 0
                            # obj['TrampElements'] = rwcomponent.trampelements
                            obj['TrampElements'] = 0
                            obj['DeltaFATT'] = rwcomponent.deltafatt
                            obj['CylicLoadingConnectedwithin1525m'] = rwcomponent.cyclicloadingwitin15_25m
                            obj['MaximumBrinnellHardnessofWeld'] = rwcomponent.brinnelhardness
                            obj['NumberofFittingsonPipe'] = rwcomponent.numberpipefittings
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['PipeCondition'] = rwcomponent.pipecondition
                            obj['VASD'] = rwcomponent.shakingdetected
                            obj['shakingamount'] = rwcomponent.shakingamount
                            obj['correctiveaction'] = rwcomponent.correctiveaction
                            obj['branchdiameter'] = rwcomponent.branchdiameter
                            obj['complexityprotrusion'] = rwcomponent.complexityprotrusion
                            # Stream
                            obj['maxoperatingtemperature'] = rwstream.maxoperatingtemperature
                            obj['minoperatingtemperature'] = rwstream.minoperatingtemperature
                            obj['minoperatingpressure'] = rwstream.minoperatingpressure
                            obj['criticalexposuretemperature'] = rwstream.criticalexposuretemperature
                            obj['aminesolution'] = rwstream.aminesolution
                            obj['naohconcentration'] = rwstream.naohconcentration
                            obj['h2sinwater'] = rwstream.h2sinwater
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['flowrate'] = rwstream.flowrate
                            obj['waterph'] = rwstream.waterph
                            obj['ToxicConstituents'] = rwstream.toxicconstituent
                            obj['releasefluidpercenttoxic'] = rwstream.releasefluidpercenttoxic
                            obj['PCH'] = rwstream.hydrogen
                            obj['PHA'] = rwstream.hydrofluoric
                            obj['exposuretoamine'] = rwstream.exposuretoamine
                            obj['PresenceCyanides'] = rwstream.cyanide
                            obj['h2spartialpressure'] = rwstream.h2spartialpressure
                            obj['ESBC'] = rwstream.exposedtosulphur
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EnvironmentCH2S'] = rwstream.h2s
                            obj['ECCAC'] = rwstream.caustic
                            obj['co3concentration'] = rwstream.co3concentration
                            obj['chloride'] = rwstream.chloride
                            obj['APDO'] = rwstream.aqueousoperation
                            obj['APDSD'] = rwstream.aqueousshutdown
                            # Material
                            obj['designtemperature'] = rwmaterial.designtemperature
                            obj['allowablestress'] = rwcomponent.allowablestress  # Component
                            obj['designpressure'] = rwmaterial.designpressure
                            obj['temper'] = rwmaterial.temper
                            obj['sulfurcontent'] = rwmaterial.sulfurcontent
                            obj['sigmaphase'] = rwmaterial.sigmaphase
                            obj['referencetemperature'] = rwmaterial.referencetemperature
                            obj['NickelAlloy'] = rwmaterial.nickelbased
                            obj['costfactor'] = rwmaterial.costfactor
                            obj['heattreatment'] = rwmaterial.heattreatment
                            obj['corrosionallowance'] = rwmaterial.corrosionallowance
                            obj['Chromium'] = rwmaterial.chromemoreequal12
                            obj['CoLAS'] = rwmaterial.carbonlowalloy
                            obj['AusteniticSteel'] = rwmaterial.austenitic
                            # Coating
                            obj['InternalCoating'] = rwcoat.internalcoating
                            obj['ExternalCoating'] = rwcoat.externalcoating
                            obj['externalcoatingdate'] = rwcoat.externalcoatingdate
                            obj['externalcoatingquality'] = rwcoat.externalcoatingquality
                            obj['supportMaterial'] = rwcoat.supportconfignotallowcoatingmaint
                            obj['InternalLining'] = rwcoat.internallining
                            obj['internallinertype'] = rwcoat.internallinertype
                            obj['internallinercondition'] = rwcoat.internallinercondition
                            obj['internalcladding'] = rwcoat.internalcladding
                            obj['claddingcorrosionrate'] = rwcoat.claddingcorrosionrate
                            obj['externalinsulation'] = rwcoat.externalinsulation
                            obj['externalinsulationtype'] = rwcoat.externalinsulationtype
                            obj['insulationcondition'] = rwcoat.insulationcondition
                            obj['insulationcontainschloride'] = rwcoat.insulationcontainschloride
                            if componenttypeID in tank:
                                dataTank.append(obj)
    except Exception as e:
        print(e)
    return dataTank
    dataTank = []
    tank = [12,13,14,15]
    # tank = [8, 9, 12, 13, 14, 15]
    datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
    datapof = []  # kiem tra id  proposal co ton tai trong bang RwFullPof
    componenttypeID = 0
    try:
        if facilityID:
            faci = models.Facility.objects.filter(facilityid=facilityID)
            for f in faci:
                if equimentID:
                    equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                else:
                    equip = models.EquipmentMaster.objects.filter(equipmentid=equimentID)
                for e in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=e.equipmentid)
                    equiptype = models.EquipmentType.objects.get(equipmenttypeid=e.equipmenttypeid_id)
                    desi = models.DesignCode.objects.get(designcodeid=e.designcodeid_id)
                    for c in comp:
                        pros = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        comptype = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id)
                        componenttypeID = comptype.componenttypeid
                        for p in pros:
                            obj = {}
                            rwequip = models.RwEquipment.objects.get(id_id=p.id)
                            rwcomponent = models.RwComponent.objects.get(id_id=p.id)
                            rwstream = models.RwStream.objects.get(id_id=p.id)
                            rwmaterial = models.RwMaterial.objects.get(id_id=p.id)
                            rwcoat = models.RwCoating.objects.get(id_id=p.id)
                            df = models.RwFullPof.objects.filter(id=p.id)
                            ca = models.RwFullFcof.objects.filter(id=p.id)
                            obj['ID'] = p.id
                            obj['ConponentName'] = c.componentname
                            obj['ConponentNumber'] = c.componentnumber
                            obj['EquipmentNumber'] = e.equipmentnumber
                            obj['CommissionDate'] = e.commissiondate
                            obj['Site'] = "SITE"
                            obj['Facility'] = f.facilityname
                            if df.count() > 0 and ca.count() > 0:
                                df = models.RwFullPof.objects.get(id=p.id)
                                ca = models.RwFullFcof.objects.get(id=p.id)
                                obj['API1'] = df.pofap1category + ca.fcofcategory
                                obj['API2'] = df.pofap2category + ca.fcofcategory
                                obj['API3'] = df.pofap3category + ca.fcofcategory
                                obj['RLI'] = df.rli
                            else:
                                obj['API1'] = "None"
                                obj['API2'] = "None"
                                obj['API3'] = "None"
                                obj['RLI'] = "None"
                            obj['AssessmentName'] = p.proposalname
                            obj['AssessmentDate'] = p.assessmentdate
                            obj['RiskAnalysisPeriod'] = p.riskanalysisperiod
                            obj['EquipmentType'] = equiptype.equipmenttypename
                            obj['ComponentType'] = comptype.componenttypename
                            if (p.id in datarw):
                                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=p.id)[0]
                                obj['InspectionDueDate'] = rwdam.inspduedate
                            else:
                                obj['InspectionDueDate'] = "None"
                            obj['DesignCode'] = desi.designcode
                            # Equipment Properties
                            obj['adminControlUpset'] = rwequip.adminupsetmanagement
                            obj['ContainsDeadlegs'] = rwequip.containsdeadlegs
                            obj['PresenceofSulphides'] = rwequip.presencesulphideso2
                            obj['SteamedOut'] = rwequip.steamoutwaterflush
                            obj['ThermalHistory'] = rwequip.thermalhistory
                            obj['SystemManagementFactor'] = rwequip.managementfactor
                            obj['PWHT'] = rwequip.pwht
                            obj['PressurisationControlled'] = rwequip.pressurisationcontrolled
                            obj['PresenceofSulphidesShutdow'] = rwequip.presencesulphideso2shutdown
                            obj['OnlineMonitoring'] = rwequip.onlinemonitoring
                            obj['minreqtemperaturepressurisation'] = rwequip.minreqtemperaturepressurisation
                            obj['MFTF'] = rwequip.materialexposedtoclext
                            obj['CylicOper'] = rwequip.cyclicoperation
                            obj['LOM'] = rwequip.lineronlinemonitoring
                            obj['Downtime'] = rwequip.downtimeprotectionused
                            obj['EquOper'] = rwequip.yearlowestexptemp
                            obj['EquipmentVolume'] = rwequip.volume
                            obj['ExternalEnvironment'] = rwequip.interfacesoilwater
                            obj['InterfaceSoilWater'] = rwequip.externalenvironment
                            obj['HeatTraced'] = rwequip.heattraced
                            obj['Highly'] = rwequip.highlydeadleginsp
                            # Component
                            obj['MinimumMeasuredThickness'] = rwcomponent.currentthickness
                            obj['NominalThickness'] = rwcomponent.nominalthickness
                            obj['NominalDiameter'] = rwcomponent.nominaldiameter
                            obj['MinRequiredThickness'] = rwcomponent.minreqthickness
                            obj['CurrentCorrosionRate'] = rwcomponent.currentcorrosionrate
                            obj['PresenceCracks'] = rwcomponent.crackspresent
                            obj['PreviousFailure'] = rwcomponent.previousfailures
                            obj['DFDI'] = rwcomponent.damagefoundinspection
                            obj['HFICI'] = rwcomponent.highlyinjectioninsp
                            obj['PIMP'] = 0
                            # obj['TrampElements'] = rwcomponent.trampelements
                            obj['TrampElements'] = 0
                            obj['DeltaFATT'] = rwcomponent.deltafatt
                            obj['CylicLoadingConnectedwithin1525m'] = rwcomponent.cyclicloadingwitin15_25m
                            obj['MaximumBrinnellHardnessofWeld'] = rwcomponent.brinnelhardness
                            obj['NumberofFittingsonPipe'] = rwcomponent.numberpipefittings
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['PipeCondition'] = rwcomponent.pipecondition
                            obj['VASD'] = rwcomponent.shakingdetected
                            obj['shakingamount'] = rwcomponent.shakingamount
                            obj['correctiveaction'] = rwcomponent.correctiveaction
                            obj['branchdiameter'] = rwcomponent.branchdiameter
                            obj['complexityprotrusion'] = rwcomponent.complexityprotrusion
                            # Stream
                            obj['maxoperatingtemperature'] = rwstream.maxoperatingtemperature
                            obj['minoperatingtemperature'] = rwstream.minoperatingtemperature
                            obj['minoperatingpressure'] = rwstream.minoperatingpressure
                            obj['criticalexposuretemperature'] = rwstream.criticalexposuretemperature
                            obj['aminesolution'] = rwstream.aminesolution
                            obj['naohconcentration'] = rwstream.naohconcentration
                            obj['h2sinwater'] = rwstream.h2sinwater
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['flowrate'] = rwstream.flowrate
                            obj['waterph'] = rwstream.waterph
                            obj['ToxicConstituents'] = rwstream.toxicconstituent
                            obj['releasefluidpercenttoxic'] = rwstream.releasefluidpercenttoxic
                            obj['PCH'] = rwstream.hydrogen
                            obj['PHA'] = rwstream.hydrofluoric
                            obj['exposuretoamine'] = rwstream.exposuretoamine
                            obj['PresenceCyanides'] = rwstream.cyanide
                            obj['h2spartialpressure'] = rwstream.h2spartialpressure
                            obj['ESBC'] = rwstream.exposedtosulphur
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EnvironmentCH2S'] = rwstream.h2s
                            obj['ECCAC'] = rwstream.caustic
                            obj['co3concentration'] = rwstream.co3concentration
                            obj['chloride'] = rwstream.chloride
                            obj['APDO'] = rwstream.aqueousoperation
                            obj['APDSD'] = rwstream.aqueousshutdown
                            # Material
                            obj['designtemperature'] = rwmaterial.designtemperature
                            obj['allowablestress'] = rwcomponent.allowablestress  # Component
                            obj['designpressure'] = rwmaterial.designpressure
                            obj['temper'] = rwmaterial.temper
                            obj['sulfurcontent'] = rwmaterial.sulfurcontent
                            obj['sigmaphase'] = rwmaterial.sigmaphase
                            obj['referencetemperature'] = rwmaterial.referencetemperature
                            obj['NickelAlloy'] = rwmaterial.nickelbased
                            obj['costfactor'] = rwmaterial.costfactor
                            obj['heattreatment'] = rwmaterial.heattreatment
                            obj['corrosionallowance'] = rwmaterial.corrosionallowance
                            obj['Chromium'] = rwmaterial.chromemoreequal12
                            obj['CoLAS'] = rwmaterial.carbonlowalloy
                            obj['AusteniticSteel'] = rwmaterial.austenitic
                            # Coating
                            obj['InternalCoating'] = rwcoat.internalcoating
                            obj['ExternalCoating'] = rwcoat.externalcoating
                            obj['externalcoatingdate'] = rwcoat.externalcoatingdate
                            obj['externalcoatingquality'] = rwcoat.externalcoatingquality
                            obj['supportMaterial'] = rwcoat.supportconfignotallowcoatingmaint
                            obj['InternalLining'] = rwcoat.internallining
                            obj['internallinertype'] = rwcoat.internallinertype
                            obj['internallinercondition'] = rwcoat.internallinercondition
                            obj['internalcladding'] = rwcoat.internalcladding
                            obj['claddingcorrosionrate'] = rwcoat.claddingcorrosionrate
                            obj['externalinsulation'] = rwcoat.externalinsulation
                            obj['externalinsulationtype'] = rwcoat.externalinsulationtype
                            obj['insulationcondition'] = rwcoat.insulationcondition
                            obj['insulationcontainschloride'] = rwcoat.insulationcontainschloride
                            if componenttypeID in tank:
                                dataTank.append(obj)
        else:
            faci = models.Facility.objects.filter(siteid_id=siteID)
            for f in faci:
                equip = models.EquipmentMaster.objects.filter(facilityid_id=f.facilityid)
                for e in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=e.equipmentid)
                    equiptype = models.EquipmentType.objects.get(equipmenttypeid=e.equipmenttypeid_id)
                    desi = models.DesignCode.objects.get(designcodeid=e.designcodeid_id)
                    for c in comp:
                        pros = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        comptype = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id)
                        componenttypeID = comptype.componenttypeid
                        for p in pros:
                            obj = {}
                            rwequip = models.RwEquipment.objects.get(id_id=p.id)
                            rwcomponent = models.RwComponent.objects.get(id_id=p.id)
                            rwstream = models.RwStream.objects.get(id_id=p.id)
                            rwmaterial = models.RwMaterial.objects.get(id_id=p.id)
                            rwcoat = models.RwCoating.objects.get(id_id=p.id)
                            df = models.RwFullPof.objects.filter(id=p.id)
                            ca = models.RwFullFcof.objects.filter(id=p.id)
                            obj['ID'] = p.id
                            obj['ConponentName'] = c.componentname
                            obj['ConponentNumber'] = c.componentnumber
                            obj['EquipmentNumber'] = e.equipmentnumber
                            obj['CommissionDate'] = e.commissiondate
                            obj['Site'] = "SITE"
                            obj['Facility'] = f.facilityname
                            if df.count() > 0 and ca.count() > 0:
                                df = models.RwFullPof.objects.get(id=p.id)
                                ca = models.RwFullFcof.objects.get(id=p.id)
                                obj['API1'] = df.pofap1category + ca.fcofcategory
                                obj['API2'] = df.pofap2category + ca.fcofcategory
                                obj['API3'] = df.pofap3category + ca.fcofcategory
                                obj['RLI'] = df.rli
                            else:
                                obj['API1'] = "None"
                                obj['API2'] = "None"
                                obj['API3'] = "None"
                                obj['RLI'] = "None"
                            obj['AssessmentName'] = p.proposalname
                            obj['AssessmentDate'] = p.assessmentdate
                            obj['RiskAnalysisPeriod'] = p.riskanalysisperiod
                            obj['EquipmentType'] = equiptype.equipmenttypename
                            obj['ComponentType'] = comptype.componenttypename
                            if (p.id in datarw):
                                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=p.id)[0]
                                obj['InspectionDueDate'] = rwdam.inspduedate
                            else:
                                obj['InspectionDueDate'] = "None"
                            obj['DesignCode'] = desi.designcode
                            # Equipment Properties
                            obj['adminControlUpset'] = rwequip.adminupsetmanagement
                            obj['ContainsDeadlegs'] = rwequip.containsdeadlegs
                            obj['PresenceofSulphides'] = rwequip.presencesulphideso2
                            obj['SteamedOut'] = rwequip.steamoutwaterflush
                            obj['ThermalHistory'] = rwequip.thermalhistory
                            obj['SystemManagementFactor'] = rwequip.managementfactor
                            obj['PWHT'] = rwequip.pwht
                            obj['PressurisationControlled'] = rwequip.pressurisationcontrolled
                            obj['PresenceofSulphidesShutdow'] = rwequip.presencesulphideso2shutdown
                            obj['OnlineMonitoring'] = rwequip.onlinemonitoring
                            obj['minreqtemperaturepressurisation'] = rwequip.minreqtemperaturepressurisation
                            obj['MFTF'] = rwequip.materialexposedtoclext
                            obj['CylicOper'] = rwequip.cyclicoperation
                            obj['LOM'] = rwequip.lineronlinemonitoring
                            obj['Downtime'] = rwequip.downtimeprotectionused
                            obj['EquOper'] = rwequip.yearlowestexptemp
                            obj['EquipmentVolume'] = rwequip.volume
                            obj['ExternalEnvironment'] = rwequip.interfacesoilwater
                            obj['InterfaceSoilWater'] = rwequip.externalenvironment
                            obj['HeatTraced'] = rwequip.heattraced
                            obj['Highly'] = rwequip.highlydeadleginsp
                            # Component
                            obj['MinimumMeasuredThickness'] = rwcomponent.currentthickness
                            obj['NominalThickness'] = rwcomponent.nominalthickness
                            obj['NominalDiameter'] = rwcomponent.nominaldiameter
                            obj['MinRequiredThickness'] = rwcomponent.minreqthickness
                            obj['CurrentCorrosionRate'] = rwcomponent.currentcorrosionrate
                            obj['PresenceCracks'] = rwcomponent.crackspresent
                            obj['PreviousFailure'] = rwcomponent.previousfailures
                            obj['DFDI'] = rwcomponent.damagefoundinspection
                            obj['HFICI'] = rwcomponent.highlyinjectioninsp
                            obj['PIMP'] = 0
                            # obj['TrampElements'] = rwcomponent.trampelements
                            obj['TrampElements'] = 0
                            obj['DeltaFATT'] = rwcomponent.deltafatt
                            obj['CylicLoadingConnectedwithin1525m'] = rwcomponent.cyclicloadingwitin15_25m
                            obj['MaximumBrinnellHardnessofWeld'] = rwcomponent.brinnelhardness
                            obj['NumberofFittingsonPipe'] = rwcomponent.numberpipefittings
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['JointTypeofBranch'] = rwcomponent.branchjointtype
                            obj['PipeCondition'] = rwcomponent.pipecondition
                            obj['VASD'] = rwcomponent.shakingdetected
                            obj['shakingamount'] = rwcomponent.shakingamount
                            obj['correctiveaction'] = rwcomponent.correctiveaction
                            obj['branchdiameter'] = rwcomponent.branchdiameter
                            obj['complexityprotrusion'] = rwcomponent.complexityprotrusion
                            # Stream
                            obj['maxoperatingtemperature'] = rwstream.maxoperatingtemperature
                            obj['minoperatingtemperature'] = rwstream.minoperatingtemperature
                            obj['minoperatingpressure'] = rwstream.minoperatingpressure
                            obj['criticalexposuretemperature'] = rwstream.criticalexposuretemperature
                            obj['aminesolution'] = rwstream.aminesolution
                            obj['naohconcentration'] = rwstream.naohconcentration
                            obj['h2sinwater'] = rwstream.h2sinwater
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['MEFMSCC'] = rwstream.materialexposedtoclint
                            obj['flowrate'] = rwstream.flowrate
                            obj['waterph'] = rwstream.waterph
                            obj['ToxicConstituents'] = rwstream.toxicconstituent
                            obj['releasefluidpercenttoxic'] = rwstream.releasefluidpercenttoxic
                            obj['PCH'] = rwstream.hydrogen
                            obj['PHA'] = rwstream.hydrofluoric
                            obj['exposuretoamine'] = rwstream.exposuretoamine
                            obj['PresenceCyanides'] = rwstream.cyanide
                            obj['h2spartialpressure'] = rwstream.h2spartialpressure
                            obj['ESBC'] = rwstream.exposedtosulphur
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EAGTA'] = rwstream.exposedtogasamine
                            obj['EnvironmentCH2S'] = rwstream.h2s
                            obj['ECCAC'] = rwstream.caustic
                            obj['co3concentration'] = rwstream.co3concentration
                            obj['chloride'] = rwstream.chloride
                            obj['APDO'] = rwstream.aqueousoperation
                            obj['APDSD'] = rwstream.aqueousshutdown
                            # Material
                            obj['designtemperature'] = rwmaterial.designtemperature
                            obj['allowablestress'] = rwcomponent.allowablestress  # Component
                            obj['designpressure'] = rwmaterial.designpressure
                            obj['temper'] = rwmaterial.temper
                            obj['sulfurcontent'] = rwmaterial.sulfurcontent
                            obj['sigmaphase'] = rwmaterial.sigmaphase
                            obj['referencetemperature'] = rwmaterial.referencetemperature
                            obj['NickelAlloy'] = rwmaterial.nickelbased
                            obj['costfactor'] = rwmaterial.costfactor
                            obj['heattreatment'] = rwmaterial.heattreatment
                            obj['corrosionallowance'] = rwmaterial.corrosionallowance
                            obj['Chromium'] = rwmaterial.chromemoreequal12
                            obj['CoLAS'] = rwmaterial.carbonlowalloy
                            obj['AusteniticSteel'] = rwmaterial.austenitic
                            # Coating
                            obj['InternalCoating'] = rwcoat.internalcoating
                            obj['ExternalCoating'] = rwcoat.externalcoating
                            obj['externalcoatingdate'] = rwcoat.externalcoatingdate
                            obj['externalcoatingquality'] = rwcoat.externalcoatingquality
                            obj['supportMaterial'] = rwcoat.supportconfignotallowcoatingmaint
                            obj['InternalLining'] = rwcoat.internallining
                            obj['internallinertype'] = rwcoat.internallinertype
                            obj['internallinercondition'] = rwcoat.internallinercondition
                            obj['internalcladding'] = rwcoat.internalcladding
                            obj['claddingcorrosionrate'] = rwcoat.claddingcorrosionrate
                            obj['externalinsulation'] = rwcoat.externalinsulation
                            obj['externalinsulationtype'] = rwcoat.externalinsulationtype
                            obj['insulationcondition'] = rwcoat.insulationcondition
                            obj['insulationcontainschloride'] = rwcoat.insulationcontainschloride
                            if componenttypeID in tank:
                                dataTank.append(obj)
    except Exception as e:
        print(e)
    return dataTank


def MainInpsectionPlan(request, siteID, name="", date=""):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    inspection = models.InspecPlan.objects.all()
    inspecCover = models.InspectionCoverage.objects.all()

    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()
    RecommendProposalTank = []
    # RecommendProposalNormal = []
    # APINormal = []
    APITank = []
    a =  date.split(" ")
    date = a[0]
    rwComponent = models.ComponentMaster.objects.all()
    rwdamAll = models.RwDamageMechanism.objects.all()
    rwassessment = models.RwAssessment.objects.all()
    datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
    for a in rwdamAll:
        array = a.id_dm_id
        datarw.append(array)
    for a in rwComponent:
        # print("let go")
        data = []
        datamax = []

        rwAsessmentT = models.RwAssessment.objects.filter(componentid_id=a.componentid)
        if rwAsessmentT.count() == 1:
            R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
            RecommendProposalTank.append(R1.id)
        elif rwAsessmentT.count() > 1:
            for b in rwAsessmentT:
                if b.assessmentdate:
                    obj = {}
                    obj['assessmentdate'] = b.assessmentdate.timestamp()
                    obj['IDProposal'] = b.id
                    data.append(obj)
                    datamax.append(b.assessmentdate.timestamp())
            M = max(datamax)
            i = datamax.index(M)
            RecommendProposalTank.append(data[i]['IDProposal'])
    for nor in RecommendProposalTank:
        rwasessmentN = models.RwAssessment.objects.get(id=nor)
        equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
        component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
        equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
        comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
        faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
        site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
        dm = models.RwDamageMechanism.objects.filter(id_dm=nor)
        df = models.RwFullPof.objects.filter(id=nor)
        ca = models.RwFullFcof.objects.filter(id=nor)
        if df.count() > 0 and ca.count() > 0:
            if site.siteid == siteID:
                df = models.RwFullPof.objects.get(id=nor)
                ca = models.RwFullFcof.objects.get(id=nor)
                obj = {}
                obj['ID'] = nor
                obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                obj['ComponentNumber'] = component.componentnumber
                obj['EquipmentNumber'] = equipmaster.equipmentnumber
                obj['Facility'] = faci.facilityname
                obj['Site'] = site.sitename
                obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                obj['RLI'] = df.rli
                obj['AssessmentName'] = rwasessmentN.proposalname
                obj['AssessmentDate'] = rwasessmentN.assessmentdate.date().strftime('%Y-%m-%d')
                obj['CommissionDate'] = equipmaster.commissiondate
                obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                obj['EquipmentType'] = equiptype.equipmenttypename
                obj['ComponentType'] = comptype.componenttypename
                if (nor in datarw):
                    rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                    obj['InspectionDueDate'] = rwdam.inspduedate
                else:
                    obj['InspectionDueDate'] = "None"

                if dm.count() != 0:
                    obj['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
                APITank.append(obj)
    try:
        listInpsec = ListInpsectionPlan(siteID)
        t_have_Cover = ListInspectionName(siteID)[0]
        t_not_Cover = ListInspectionName(siteID)[1]
        print(t_have_Cover,t_not_Cover)
        listInpsecCoverage = []
        error = {}

        # inspectionOld = models.InspecPlan.objects.filter(inspectionplanname=name)
        # if inspectionOld:
        #     inspectionCoverOld = models.InspectionCoverage.objects.filter(planid_id=inspectionOld[0].id)
        #     InspectionType = models.InspectionTechnique.objects.filter(coverageid_id=inspectionCoverOld[0].id)
        #     if not InspectionType:
        #         error['warning'] = "Proposal haven't been selected!"

        if '_select' in request.POST:
            for a in inspection:
                if (request.POST.get('%d' % a.id)):
                    return redirect('inspectionPlan', siteID=siteID, name=a.inspectionplanname,
                                    date=a.inspectionplandate)
        if '_delete' in request.POST:
            for a in inspection:
                if (request.POST.get('%d' % a.id)):
                    a.delete()
            return redirect('inspectionPlan', siteID=siteID)
        for a in inspection:
            if (a.inspectionplanname == name):
                listInpsecCoverage = ListInspectionCoverage(a.id)
        if '_creat' in request.POST:
            return redirect('createInspectionPlan', siteID=siteID)
        if '_add' in request.POST:
            if name == '':
                error['exist'] = "Please create/select an inspection plan before adding inspection coverage!"
            else:
                return redirect('addInspectionPlan', siteID=siteID, name=name, date=date, facilityID=0, equipID=0)
        if '_edit' in request.POST:
            if name == '':
                error['exist'] = "Please create/select an inspection plan before adding inspection coverage!"
            else:
                print("edit")
                return redirect('editInspectionPlan',siteID=siteID,name=name, date=date, facilityID=0, equipID=0)
        if '_scheduled'in request.POST:
            print("go go")
            if name == '':
                error['exist'] = "Please create/select an inspection plan before adding inspection coverage!"
            else:
                print("gogo")
                return redirect('scheduled',siteID = siteID , name = name, date = date)
    except Exception as e:
        print(e)
        raise Http404
    siteID = encrypt(str(siteID))
    return render(request, 'FacilityUI/inspection_plan/inspectionPlanNew.html',
                  {'page': 'inspectionPlan', 'siteID': siteID,'count': count, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'APITank': APITank,'t1':t_have_Cover,'t2':t_not_Cover,
                   'listInpsec': listInpsec, 'listInpsecCoverage': listInpsecCoverage, 'name': name, 'date': date,
                   'error': error, 'countnoti': countnoti, 'notiVerification': notiVerification})

def Scheduled(request, siteID, name="", date=""):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    data = []
    try:
        print("cuong")
    except Exception as e:
        print(e)
    return render(request,'FacilityUI/inspection_plan/scheduled.html',
                  {'page': 'scheduled', 'siteID': siteID, 'count': count, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti,  'name': name, 'date': date, 'notiVerification': notiVerification})

def CreateInspectionPlan(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        noti = {}
        data = {}
        site = models.Sites.objects.filter(siteid=siteID)
        inspection = models.InspecPlan.objects.filter(siteid_id = siteID)
        if '_creat' in request.POST:
            print("go creat")
            data['inspectionplanname'] = request.POST.get('InspectionPlan')
            data['inspectiondate'] = request.POST.get('InspectionDate')
            countIns = models.InspecPlan.objects.filter(inspectionplanname=data['inspectionplanname']).count()
            if countIns > 0:
                noti['exist'] = "This Inspection Plan Name already exists!"
            elif not data['inspectionplanname']:
                noti['warning'] = "Please enter the Plan Name"
            else:
                ins = models.InspecPlan(inspectionplanname=data['inspectionplanname'],
                                        inspectionplandate=data['inspectiondate'],siteid_id=siteID)
                ins.save()
                noti['sucess'] = "Create a new plan successfully !"
        if '_delete' in request.POST:
            for a in inspection:
                if (request.POST.get('%d' % a.id)):
                    insecptionCover = models.InspectionCoverage.objects.filter(planid_id = a.id)
                    for b in insecptionCover:
                        inspecCoverDetail = models.InspectionCoverageDetail.objects.filter(coverageid_id = b.id)
                        Technique = models.InspectionTechnique.objects.filter(coverageid_id = b.id)
                        for c in inspecCoverDetail:
                            c.delete()
                        for d in Technique:
                            d.delete()
                        b.delete()
                    a.delete()
                noti['sucess'] = "Delete inspection plan successfully !"
        inspectionplan = models.InspecPlan.objects.filter(siteid_id=siteID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/inspection_plan/createInspectionPlan.html',
                  {'page': 'createInspectionPlan', 'site': site, 'error': noti, 'data': data, 'siteID': siteID,
                   'count': count, 'info': request.session,'inspectionplan':inspectionplan,
                   'noti': noti, 'countnoti': countnoti,'notiVerification':notiVerification,'siteid':siteid})

def EditInspectionPlan(request, siteID, facilityID, equipID, name, date):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
    countnoti = noti.filter(state=0).count()
    Listimtype= []
    Listimtype_1 = []
    ListCover = []
    Listtechnique = []
    Listtechnique_1 = []
    Listpoposal = []
    check = []
    listDisplay = []
    type = ""
    error = {}
    #-------------data Inspection
    data = []
    dataTank = []
    dataF = []
    listdata = {}
    dataobjCopy = []
    #-----------query Faci and Equipment
    inspecplan = models.InspecPlan.objects.filter(siteid_id=siteID)
    nameFaci = ""
    nameEquip = ""

    q = 'SELECT FacilityID,FacilityName FROM facility where SiteID= %s'
    q1 = 'SELECT FacilityID,FacilityName FROM facility where SiteID= %s and FacilityID=%s'
    QueryFaci = models.Facility.objects.raw(q, [siteID])

    if facilityID:
        q2 = 'SELECT EquipmentID,EquipmentName,EquipmentNumber FROM equipment_master where SiteID=%s and FacilityID = %s'
        nameFaci = models.Facility.objects.get(facilityid=facilityID).facilityname
        QueryEquip = models.EquipmentMaster.objects.raw(q2, [siteID, facilityID])
    else:
        QueryEquip = models.EquipmentMaster.objects.filter(siteid_id=siteID)
    if equipID:
        equip = models.EquipmentMaster.objects.get(equipmentid=equipID)
        nameFaci = models.Facility.objects.get(facilityid=equip.facilityid_id).facilityname
        nameEquip = equip.equipmentname
    try:
        inspectionOld = models.InspecPlan.objects.filter(inspectionplanname = name)[0]
        inspectionCoverOld = models.InspectionCoverage.objects.filter(planid_id=inspectionOld.id)
        InspectionType = models.InspectionTechnique.objects.filter(coverageid_id = inspectionCoverOld[0].id)

        if InspectionType:
            if InspectionType[0].inspectiontype == 1:
                type = "Intrusive"
            else:
                type = "Non-Intrusive"
        else:
            error['warning'] = "Proposal haven't been selected!"
        print("go line 1")
        for a in inspectionCoverOld:
            Listpoposal.append(a.proposalid_id)
            technique_detail = models.InspectionTechnique.objects.filter(coverageid_id = a.id)
            for b in technique_detail:
                Listtechnique.append(b.imitemid_id)
                Listimtype.append(b.imtypeid_id)
                ListCover.append(b.coverage)
        print("ListproposlID",Listpoposal)
        print(Listtechnique)
        print(Listimtype)
        print(ListCover)
        for a in Listtechnique:
            if a in Listtechnique_1:
                check.append(0)
                continue
            else:
                Listtechnique_1.append(a)
                check.append(1)
        print(Listtechnique_1)
        i = 0
        for a in Listimtype:
            if check[i]:
                Listimtype_1.append(a)
                i = i + 1
        print(Listimtype_1)
        for a in range(1,11):
            if a in Listtechnique_1:
                index = Listtechnique_1.index(a)
                obj = {}
                obj['IMtypeName'] = models.IMType.objects.get(imtypeid = Listimtype_1[index]).imtypename
                obj['Cover'] = ListCover[index]
                listDisplay.append(obj)
            else:
                obj = {}
                obj['IMtypeName'] = ''
                obj['Cover'] = 0
                listDisplay.append(obj)
        print(listDisplay)
                #-----------------------------
        for a in inspecplan:
            if (a.inspectionplanname == name):
                inspecCover = models.InspectionCoverage.objects.filter(planid_id=a.id)
                for b in inspecCover:
                    obj = {}
                    array = b.componentid_id
                    dataF.append(array)
        if facilityID and equipID:
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=facilityID, equimentID=equipID)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=facilityID, equimentID=equipID)
            pros = models.RwAssessment.objects.filter(equipmentid_id=equipID)
        elif equipID:
            equipCheck = models.EquipmentMaster.objects.get(equipmentid=equipID)
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=equipCheck.facilityid_id,
                                                   equimentID=equipID)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=equipCheck.facilityid_id,
                                                     equimentID=equipID)
            pros = models.RwAssessment.objects.filter(equipmentid_id=equipID)
        elif facilityID:
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=facilityID, equimentID=0)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=facilityID, equimentID=0)
            pros = models.RwAssessment.objects.all()
        else:
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=0, equimentID=0)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=0, equimentID=0)
            pros = models.RwAssessment.objects.all()
        # ------------------- get data -----------------------
        if request.method == 'POST':
            listdata['inspectiontype'] = request.POST.get('InspectionType')
            listdata['visual'] = request.POST.get('Visual')
            listdata['nagnetic'] = request.POST.get('Magnetic')
            listdata['penetrant'] = request.POST.get('Penetrant')
            listdata['radiography'] = request.POST.get('Radiography')
            listdata['ultrasonic'] = request.POST.get('Ultrasonic')
            listdata['eddycurrent'] = request.POST.get('EddyCurrent')
            listdata['thermography'] = request.POST.get('Thermography')
            listdata['acousticemission'] = request.POST.get('AcousticEmission')
            listdata['metallurgical'] = request.POST.get('Metallurgical')
            listdata['monitoring'] = request.POST.get('Monitoring')
            if (listdata['inspectiontype'] == 'Intrusive'):
                inspectiontype = 1
            else:
                inspectiontype = 2
            listdata['cover1'] = request.POST.get('Cover1')
            listdata['cover2'] = request.POST.get('Cover2')
            listdata['cover3'] = request.POST.get('Cover3')
            listdata['cover4'] = request.POST.get('Cover4')
            listdata['cover5'] = request.POST.get('Cover5')
            listdata['cover6'] = request.POST.get('Cover6')
            listdata['cover7'] = request.POST.get('Cover7')
            listdata['cover8'] = request.POST.get('Cover8')
            listdata['cover9'] = request.POST.get('Cover9')
            listdata['cover10'] = request.POST.get('Cover10')
            obj1 = {}
            obj2 = {}
            obj3 = {}
            obj4 = {}
            obj5 = {}
            obj6 = {}
            obj7 = {}
            obj8 = {}
            obj9 = {}
            obj10 = {}
            listCover = [listdata['cover1'], listdata['cover2'], listdata['cover3'], listdata['cover4'],
                         listdata['cover5'], listdata['cover6'], listdata['cover7'], listdata['cover8'],
                         listdata['cover9'], listdata['cover10']]
            if (listdata['visual'] == 'Endoscopy'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 1
            elif (listdata['visual'] == 'Hydrotesting'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 2
            elif (listdata['visual'] == 'Naked Eye'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 3
            elif (listdata['visual'] == 'Video'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 4
            elif (listdata['visual'] == 'Holiday'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 37
            if (listdata['nagnetic'] == 'Magnetic Fluorescent Inspection'):
                obj2['IMItemID'] = 2
                obj2['IMTypeID'] = 5
            elif (listdata['nagnetic'] == 'Magnetic Flux Leakage'):
                obj2['IMItemID'] = 2
                obj2['IMTypeID'] = 6
            elif (listdata['nagnetic'] == 'Magnetic Particle Inspection'):
                obj2['IMItemID'] = 2
                obj2['IMTypeID'] = 7
            if (listdata['penetrant'] == 'Liquid Penetrant Inspection'):
                obj3['IMItemID'] = 3
                obj3['IMTypeID'] = 8
            elif (listdata['penetrant'] == 'Liquid Penetrant Inspection'):
                obj3['IMItemID'] = 3
                obj3['IMTypeID'] = 9
            if (listdata['radiography'] == 'Compton Scatter'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 10
            elif (listdata['radiography'] == 'Gamma Radiography'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 11
            elif (listdata['radiography'] == 'Real-time Radiography'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 12
            elif (listdata['radiography'] == 'X-Radiography'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 13
            if (listdata['ultrasonic'] == 'Angled Compression Wave'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 14
            elif (listdata['ultrasonic'] == 'Angled Shear Wave'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 15
            elif (listdata['ultrasonic'] == 'A-scan Thickness Survey'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 16
            elif (listdata['ultrasonic'] == 'B-scan'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 17
            elif (listdata['ultrasonic'] == 'Chime'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 18
            elif (listdata['ultrasonic'] == 'C-scan'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 19
            elif (listdata['ultrasonic'] == 'Digital Ultrasonic Thickness Gauge'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 20
            elif (listdata['ultrasonic'] == 'Lorus'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 21
            elif (listdata['ultrasonic'] == 'Surface Waves'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 22
            elif (listdata['ultrasonic'] == 'Teletest'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 23
            elif (listdata['ultrasonic'] == 'TOFD'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 24
            elif (listdata['ultrasonic'] == 'Advanced Ultrasonic Backscatter Technique'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 38
            elif (listdata['ultrasonic'] == 'Internal Rotational Inspection System'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 39
            if (listdata['eddycurrent'] == 'ACFM'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 25
            elif (listdata['eddycurrent'] == 'Low frequency'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 26
            elif (listdata['eddycurrent'] == 'Pulsed'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 27
            elif (listdata['eddycurrent'] == 'Remote field'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 28
            elif (listdata['eddycurrent'] == 'Standard (flat coil)'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 29
            if (listdata['thermography'] == 'Passive Thermography'):
                obj7['IMItemID'] = 7
                obj7['IMTypeID'] = 30
            elif (listdata['thermography'] == 'Transient Thermography'):
                obj7['IMItemID'] = 7
                obj7['IMTypeID'] = 31

            if (listdata['acousticemission'] == 'Crack Detection'):
                obj8['IMItemID'] = 8
                obj8['IMTypeID'] = 32
            elif (listdata['acousticemission'] == 'Leak Detection'):
                obj8['IMItemID'] = 8
                obj8['IMTypeID'] = 33
            if (listdata['metallurgical'] == 'Hardness Surveys'):
                obj9['IMItemID'] = 9
                obj9['IMTypeID'] = 34
            elif (listdata['metallurgical'] == 'Microstructure Replication'):
                obj9['IMItemID'] = 9
                obj9['IMTypeID'] = 35
            if (listdata['monitoring'] == 'On-line Monitoring'):
                obj10['IMItemID'] = 10
                obj10['IMTypeID'] = 36
            dataobj = [obj1, obj2, obj3, obj4, obj5, obj6, obj7, obj8, obj9, obj10]

            i = 0
            for a in dataobj:
                if a:
                    a['Cover'] = listCover[i]
                    dataobjCopy.append(a)
                i = i + 1
        print(dataobjCopy)
        # ----------------------------------------------------
        if '_cancel' in request.POST:
            return redirect('inspectionPlan', siteID=siteID, name=name, date=date)
        if '_selectFac' in request.POST:
            if request.POST.get('AllFaci'):
                return redirect('editInspectionPlan', siteID=siteID, name=name, date=date, facilityID=0,equipID=0)
            else:
                for a in QueryFaci:
                    if (request.POST.get('%d' % a.facilityid)):
                        return redirect('editInspectionPlan', siteID=siteID, name=name, date=date, facilityID=a.facilityid,equipID=0)
        if '_selectEquip' in request.POST:
            for a in QueryEquip:
                if (request.POST.get('%d' % a.equipmentid)):
                    return redirect('editInspectionPlan', siteID=siteID, name=name, date=date, facilityID=facilityID,
                                    equipID=a.equipmentid)
        if '_ok' in request.POST:
            for b in inspecplan:
                inspectionCover = models.InspectionCoverage.objects.filter(planid_id=b.id)
                if (b.inspectionplanname == name):
                    if (inspectionCover.count() > 0):
                        for c in inspectionCover:
                            c.delete()
                            inspectionCoverDT = models.InspectionCoverageDetail.objects.filter(coverageid_id=c.id)
                            inspectDeTech = models.InspectionTechnique.objects.filter(coverageid_id=c.id)
                            for f in inspectDeTech:
                                f.delete()
                            for d in inspectionCoverDT:
                                d.delete()
            dataprosal = []
            for a in pros:
                if (request.POST.get('%d' % a.id)):
                    for b in inspecplan:
                        if (b.inspectionplanname == name):
                            inspecCover = models.InspectionCoverage(planid_id=b.id, equipmentid_id=a.equipmentid_id,
                                                                    componentid_id=a.componentid_id,proposalid_id=a.id)
                            inspecCover.save()
                    dataprosal.append(a)
            print(dataprosal)
            inspectionCover = models.InspectionCoverage.objects.filter(planid_id=GetIdInpsecPlan(name))
            for d in inspectionCover:
                for f in dataobjCopy:
                    inspDetailTech = models.InspectionTechnique(coverageid_id=d.id, imitemid_id=f['IMItemID'],
                                                                imtypeid_id=f['IMTypeID'],
                                                                inspectiontype=inspectiontype, coverage=f['Cover'])
                    inspDetailTech.save()
                for u in dataprosal:
                    rwdama = models.RwDamageMechanism.objects.filter(id_dm_id=u.id)
                    print(rwdama.count())
                    for c in rwdama:
                        equip = models.RwAssessment.objects.get(id=u.id).equipmentid_id
                        comp = models.RwAssessment.objects.get(id=u.id).componentid_id
                        if ((d.equipmentid_id == equip) and (d.componentid_id == comp)):
                            dmitem = models.DMItems.objects.get(dmitemid=c.dmitemid_id)
                            inSpecCoverDT = models.InspectionCoverageDetail(coverageid_id=d.id,
                                                                            dmitemid_id=dmitem.dmitemid,
                                                                            inspectiondate=date)
                            inSpecCoverDT.save()
            return redirect('damageMechanism', planID=GetIdInpsecPlan(name), siteID=siteID)
    except Exception as e:
        print(e)
    return render(request, 'FacilityUI/inspection_plan/editInspectionPlan.html',
                  {'page': 'editInspectionPlan', 'siteID': siteID, 'count': count, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti,'name': name, 'date': date,'data': data, 'dataTank': dataTank, 'dataF': dataF,
                   'Listpoposal':Listpoposal,'nameFaci':nameFaci,'nameEquip':nameEquip,'QueryFaci':QueryFaci,'QueryEquip':QueryEquip,
                   'listDisplay':listDisplay,'type':type})
def AdddInssepctionPlan(request, siteID, facilityID, equipID, name, date):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()

    inspecplan = models.InspecPlan.objects.filter(siteid_id = siteID )
    imtype = models.IMType.objects.all()
    imitem = models.IMItem.objects.all()
    nameFaci = ""
    nameEquip = ""

    q = 'SELECT FacilityID,FacilityName FROM facility where SiteID= %s'
    q1 = 'SELECT FacilityID,FacilityName FROM facility where SiteID= %s and FacilityID=%s'
    QueryFaci = models.Facility.objects.raw(q, [siteID])

    if facilityID:
        q2 = 'SELECT EquipmentID,EquipmentName,EquipmentNumber FROM equipment_master where SiteID=%s and FacilityID = %s'
        nameFaci = models.Facility.objects.get(facilityid=facilityID).facilityname
        QueryEquip = models.EquipmentMaster.objects.raw(q2, [siteID, facilityID])
    else:
        QueryEquip = models.EquipmentMaster.objects.filter(siteid_id=siteID)
    if equipID:
        equip =  models.EquipmentMaster.objects.get(equipmentid=equipID)
        nameFaci = models.Facility.objects.get(facilityid=equip.facilityid_id).facilityname
        nameEquip = equip.equipmentname
    try:
        data=[]
        dataTank=[]
        dataF = []
        listdata = {}
        dataobjCopy = []
        for a in inspecplan:
            if (a.inspectionplanname == name):
                inspecCover = models.InspectionCoverage.objects.filter(planid_id=a.id)
                for b in inspecCover:
                    obj = {}
                    array = b.componentid_id
                    dataF.append(array)
        if facilityID and equipID:
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=facilityID, equimentID=equipID)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=facilityID, equimentID=equipID)
            pros = models.RwAssessment.objects.filter(equipmentid_id = equipID)
        elif equipID:
            equipCheck = models.EquipmentMaster.objects.get(equipmentid=equipID)
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=equipCheck.facilityid_id, equimentID=equipID)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=equipCheck.facilityid_id, equimentID=equipID)
            pros = models.RwAssessment.objects.filter(equipmentid_id=equipID)
        elif facilityID:
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=facilityID,equimentID=0)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=facilityID,equimentID=0)
            pros = models.RwAssessment.objects.all()
        else:
            data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=0, equimentID=0)
            dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=0, equimentID=0)
            pros = models.RwAssessment.objects.all()
        #
        if request.method == 'POST':
            listdata['inspectiontype'] = request.POST.get('InspectionType')
            listdata['visual'] = request.POST.get('Visual')
            listdata['nagnetic'] = request.POST.get('Magnetic')
            listdata['penetrant'] = request.POST.get('Penetrant')
            listdata['radiography'] = request.POST.get('Radiography')
            listdata['ultrasonic'] = request.POST.get('Ultrasonic')
            listdata['eddycurrent'] = request.POST.get('EddyCurrent')
            listdata['thermography'] = request.POST.get('Thermography')
            listdata['acousticemission'] = request.POST.get('AcousticEmission')
            listdata['metallurgical'] = request.POST.get('Metallurgical')
            listdata['monitoring'] = request.POST.get('Monitoring')
            if (listdata['inspectiontype'] == 'Intrusive'):
                inspectiontype = 1
            else:
                inspectiontype = 2
            listdata['cover1'] = request.POST.get('Cover1')
            listdata['cover2'] = request.POST.get('Cover2')
            listdata['cover3'] = request.POST.get('Cover3')
            listdata['cover4'] = request.POST.get('Cover4')
            listdata['cover5'] = request.POST.get('Cover5')
            listdata['cover6'] = request.POST.get('Cover6')
            listdata['cover7'] = request.POST.get('Cover7')
            listdata['cover8'] = request.POST.get('Cover8')
            listdata['cover9'] = request.POST.get('Cover9')
            listdata['cover10'] = request.POST.get('Cover10')
            obj1 = {}
            obj2 = {}
            obj3 = {}
            obj4 = {}
            obj5 = {}
            obj6 = {}
            obj7 = {}
            obj8 = {}
            obj9 = {}
            obj10 = {}
            listCover = [listdata['cover1'], listdata['cover2'], listdata['cover3'], listdata['cover4'],
                         listdata['cover5'], listdata['cover6'], listdata['cover7'], listdata['cover8'],
                         listdata['cover9'], listdata['cover10']]
            if (listdata['visual'] == 'Endoscopy'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 1
            elif (listdata['visual'] == 'Hydrotesting'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 2
            elif (listdata['visual'] == 'Naked Eye'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 3
            elif (listdata['visual'] == 'Video'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 4
            elif (listdata['visual'] == 'Holiday'):
                obj1['IMItemID'] = 1
                obj1['IMTypeID'] = 37
            if (listdata['nagnetic'] == 'Magnetic Fluorescent Inspection'):
                obj2['IMItemID'] = 2
                obj2['IMTypeID'] = 5
            elif (listdata['nagnetic'] == 'Magnetic Flux Leakage'):
                obj2['IMItemID'] = 2
                obj2['IMTypeID'] = 6
            elif (listdata['nagnetic'] == 'Magnetic Particle Inspection'):
                obj2['IMItemID'] = 2
                obj2['IMTypeID'] = 7
            if (listdata['penetrant'] == 'Liquid Penetrant Inspection'):
                obj3['IMItemID'] = 3
                obj3['IMTypeID'] = 8
            elif (listdata['penetrant'] == 'Liquid Penetrant Inspection'):
                obj3['IMItemID'] = 3
                obj3['IMTypeID'] = 9
            if (listdata['radiography'] == 'Compton Scatter'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 10
            elif (listdata['radiography'] == 'Gamma Radiography'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 11
            elif (listdata['radiography'] == 'Real-time Radiography'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 12
            elif (listdata['radiography'] == 'X-Radiography'):
                obj4['IMItemID'] = 4
                obj4['IMTypeID'] = 13
            if (listdata['ultrasonic'] == 'Angled Compression Wave'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 14
            elif (listdata['ultrasonic'] == 'Angled Shear Wave'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 15
            elif (listdata['ultrasonic'] == 'A-scan Thickness Survey'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 16
            elif (listdata['ultrasonic'] == 'B-scan'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 17
            elif (listdata['ultrasonic'] == 'Chime'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 18
            elif (listdata['ultrasonic'] == 'C-scan'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 19
            elif (listdata['ultrasonic'] == 'Digital Ultrasonic Thickness Gauge'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 20
            elif (listdata['ultrasonic'] == 'Lorus'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 21
            elif (listdata['ultrasonic'] == 'Surface Waves'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 22
            elif (listdata['ultrasonic'] == 'Teletest'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 23
            elif (listdata['ultrasonic'] == 'TOFD'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 24
            elif (listdata['ultrasonic'] == 'Advanced Ultrasonic Backscatter Technique'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 38
            elif (listdata['ultrasonic'] == 'Internal Rotational Inspection System'):
                obj5['IMItemID'] = 5
                obj5['IMTypeID'] = 39
            if (listdata['eddycurrent'] == 'ACFM'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 25
            elif (listdata['eddycurrent'] == 'Low frequency'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 26
            elif (listdata['eddycurrent'] == 'Pulsed'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 27
            elif (listdata['eddycurrent'] == 'Remote field'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 28
            elif (listdata['eddycurrent'] == 'Standard (flat coil)'):
                obj6['IMItemID'] = 6
                obj6['IMTypeID'] = 29
            if (listdata['thermography'] == 'Passive Thermography'):
                obj7['IMItemID'] = 7
                obj7['IMTypeID'] = 30
            elif (listdata['thermography'] == 'Transient Thermography'):
                obj7['IMItemID'] = 7
                obj7['IMTypeID'] = 31

            if (listdata['acousticemission'] == 'Crack Detection'):
                obj8['IMItemID'] = 8
                obj8['IMTypeID'] = 32
            elif (listdata['acousticemission'] == 'Leak Detection'):
                obj8['IMItemID'] = 8
                obj8['IMTypeID'] = 33
            if (listdata['metallurgical'] == 'Hardness Surveys'):
                obj9['IMItemID'] = 9
                obj9['IMTypeID'] = 34
            elif (listdata['metallurgical'] == 'Microstructure Replication'):
                obj9['IMItemID'] = 9
                obj9['IMTypeID'] = 35
            if (listdata['monitoring'] == 'On-line Monitoring'):
                obj10['IMItemID'] = 10
                obj10['IMTypeID'] = 36
            dataobj = [obj1, obj2, obj3, obj4, obj5, obj6, obj7, obj8, obj9, obj10]

            i = 0
            for a in dataobj:
                if a:
                    a['Cover'] = listCover[i]
                    dataobjCopy.append(a)
                i = i + 1
        print(dataobjCopy)
        if '_select' in request.POST:
            for a in site:
                if (request.POST.get('%d' % a.siteid)):
                    return redirect('addInspectionPlan', siteID=a.siteid, name=name, date=date, facilityID=0, equipID=0)
        if '_selectFac' in request.POST:
            if request.POST.get('AllFaci'):
                return redirect('addInspectionPlan', siteID=siteID, name=name, date=date, facilityID=0,equipID=0)
            else:
                for a in QueryFaci:
                    if (request.POST.get('%d' % a.facilityid)):
                        return redirect('addInspectionPlan', siteID=siteID, name=name, date=date, facilityID=a.facilityid,equipID=0)
        if '_selectEquip' in request.POST:
            for a in QueryEquip:
                if (request.POST.get('%d' % a.equipmentid)):
                    return redirect('addInspectionPlan', siteID=siteID, name=name, date=date, facilityID=facilityID,
                                    equipID=a.equipmentid)
        if '_cancel' in request.POST:
            return redirect('inspectionPlan', siteID=siteID, name=name, date=date)
        if '_ok' in request.POST:
            for b in inspecplan:
                inspectionCover = models.InspectionCoverage.objects.filter(planid_id=b.id)
                if (b.inspectionplanname == name):
                    if (inspectionCover.count() > 0):
                        for c in inspectionCover:
                            c.delete()
                            inspectionCoverDT = models.InspectionCoverageDetail.objects.filter(coverageid_id=c.id)
                            inspectDeTech = models.InspectionTechnique.objects.filter(coverageid_id=c.id)
                            for f in inspectDeTech:
                                f.delete()
                            for d in inspectionCoverDT:
                                d.delete()
            dataprosal = []
            for a in pros:
                if (request.POST.get('%d' % a.id)):
                    for b in inspecplan:
                        if (b.inspectionplanname == name):
                            inspecCover = models.InspectionCoverage(planid_id=b.id, equipmentid_id=a.equipmentid_id,
                                                                    componentid_id=a.componentid_id,proposalid_id=a.id)
                            inspecCover.save()
                    dataprosal.append(a)
            inspectionCover = models.InspectionCoverage.objects.filter(planid_id=GetIdInpsecPlan(name))
            for d in inspectionCover:
                for f in dataobjCopy:
                    inspDetailTech = models.InspectionTechnique(coverageid_id=d.id, imitemid_id=f['IMItemID'],
                                                                imtypeid_id=f['IMTypeID'],
                                                                inspectiontype=inspectiontype, coverage=f['Cover'])
                    inspDetailTech.save()
                for u in dataprosal:
                    rwdama = models.RwDamageMechanism.objects.filter(id_dm_id=u.id)
                    print(rwdama.count())
                    for c in rwdama:
                        equip = models.RwAssessment.objects.get(id=u.id).equipmentid_id
                        comp = models.RwAssessment.objects.get(id=u.id).componentid_id
                        if ((d.equipmentid_id == equip) and (d.componentid_id == comp)):
                            dmitem = models.DMItems.objects.get(dmitemid=c.dmitemid_id)
                            inSpecCoverDT = models.InspectionCoverageDetail(coverageid_id=d.id,
                                                                            dmitemid_id=dmitem.dmitemid,
                                                                            inspectiondate=date)
                            inSpecCoverDT.save()
            return redirect('damageMechanism', planID=GetIdInpsecPlan(name), siteID=siteID)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
    return render(request, 'FacilityUI/inspection_plan/addInspectionPlan.html',
                  {'page': 'addInspectionPlan', 'siteID': siteID, 'count': count, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'data': data, 'dataTank': dataTank, 'dataF': dataF,'QueryFaci':QueryFaci,
                   'nameFaci':nameFaci,'nameEquip':nameEquip,'QueryEquip':QueryEquip,
                   'imtype': imtype, 'imitem': imitem, 'name': name, 'date': date})


def DamamgeMechanism(request, planID, siteID):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    inspecCover = models.InspectionCoverage.objects.filter(planid_id=planID)
    inspecPlan = models.InspecPlan.objects.get(id=planID)
    listDMItem = [8, 9, 61, 57, 67, 34, 32, 66, 69, 60, 72, 62, 70, 73]
    dataSumary = []
    info={}
    try:
        if (inspecCover.count() == 1):
            inspecCover1 = models.InspectionCoverage.objects.get(planid_id=planID)
            inspecCoverDetail = models.InspectionCoverageDetail.objects.filter(coverageid_id=inspecCover1.id)
            inspecTech = models.InspectionTechnique.objects.filter(coverageid_id=inspecCover1.id)
            for b in inspecCoverDetail:
                listSub = ""
                obj = {}
                obj['InspectionDate'] = models.InspecPlan.objects.get(id=planID).inspectionplandate
                obj['CoverageID'] = inspecCover1.id
                obj['CoverageDetailID'] = b.id
                obj['DMITemID'] = b.dmitemid_id
                obj['ID'] = b.id
                obj['DMITemName'] = models.DMItems.objects.get(dmitemid=b.dmitemid_id).dmdescription
                obj['EquipmentName'] = models.EquipmentMaster.objects.get(
                    equipmentid=inspecCover1.equipmentid_id).equipmentnumber
                obj['ComponenttName'] = models.ComponentMaster.objects.get(
                    componentid=inspecCover1.componentid_id).componentnumber
                # print(b.dmitemid_id)
                if b.dmitemid_id in listDMItem:
                    inspecDmRule = models.InspectionDMRule.objects.filter(dmitemid_id=b.dmitemid_id)
                    for f in inspecDmRule:
                        for c in inspecTech:
                            if ((f.imitemid_id == c.imitemid_id) and (f.imtypeid_id == c.imtypeid_id)):
                                obj1 = {}
                                if c.inspectiontype == 1:
                                    obj1['Type'] = "Intrusive"
                                else:
                                    obj1['Type'] = "Non-Intrusive"
                                obj1['Coverage'] = c.coverage
                                obj1['IMITemID'] = models.IMItem.objects.get(imitemid=c.imitemid_id).imdescription
                                obj1['IMTypeID'] = models.IMType.objects.get(imtypeid=c.imtypeid_id).imtypename
                                listSub = listSub + obj1['Type'] + "-" + obj1['IMITemID'] + "-" + obj1[
                                    'IMTypeID'] + "-" + str(obj1['Coverage']) + "%" + ";"
                else:
                    dmitem = models.DMItems.objects.get(dmitemid = b.dmitemid_id)
                    for c in inspecTech:
                        obj1 = {}
                        if c.inspectiontype == 1:
                            obj1['Type'] = "Intrusive"
                        else:
                            obj1['Type'] = "Non-Intrusive"
                        obj1['Coverage'] = c.coverage
                        obj1['IMITemID'] = models.IMItem.objects.get(imitemid=c.imitemid_id).imdescription
                        obj1['IMTypeID'] = models.IMType.objects.get(imtypeid=c.imtypeid_id).imtypename
                        listSub = listSub + obj1['Type'] + "-" + obj1['IMITemID'] + "-" + obj1[
                            'IMTypeID'] + "-" + str(obj1['Coverage']) + "%" + ";"
                obj['Summary'] = listSub
                dataSumary.append(obj)
        else:
            print("fofo")
            for a in inspecCover:
                inspecCoverDetail2 = models.InspectionCoverageDetail.objects.filter(coverageid_id=a.id)
                inspecTech = models.InspectionTechnique.objects.filter(coverageid_id=a.id)
                for b in inspecCoverDetail2:
                    listSub = ""
                    obj = {}
                    obj['InspectionDate'] = models.InspecPlan.objects.get(id=planID).inspectionplandate
                    obj['CoverageID'] = a.id
                    obj['CoverageDetailID'] = b.id
                    obj['DMITemID'] = b.dmitemid_id
                    obj['ID'] = b.id
                    obj['DMITemName'] = models.DMItems.objects.get(dmitemid=b.dmitemid_id).dmdescription
                    obj['EquipmentName'] = models.EquipmentMaster.objects.get(
                        equipmentid=a.equipmentid_id).equipmentnumber
                    obj['ComponenttName'] = models.ComponentMaster.objects.get(
                        componentid=a.componentid_id).componentnumber
                    print(b.dmitemid_id)
                    if b.dmitemid_id in listDMItem:
                        inspecDmRule = models.InspectionDMRule.objects.filter(dmitemid_id=b.dmitemid_id)
                        for f in inspecDmRule:
                            for c in inspecTech:
                                if ((f.imitemid_id == c.imitemid_id) and (f.imtypeid_id == c.imtypeid_id)):
                                    obj1 = {}
                                    if c.inspectiontype == 1:
                                        obj1['Type'] = "Intrusive"
                                    else:
                                        obj1['Type'] = "Non-Intrusive"
                                    obj1['Coverage'] = c.coverage
                                    obj1['IMITemID'] = models.IMItem.objects.get(imitemid=c.imitemid_id).imdescription
                                    obj1['IMTypeID'] = models.IMType.objects.get(imtypeid=c.imtypeid_id).imtypename
                                    listSub = listSub + obj1['Type'] + "-" + obj1['IMITemID'] + "-" + obj1[
                                        'IMTypeID'] + "-" + str(obj1['Coverage']) + "%" + ";"
                    else:
                        print("lll",b.dmitemid_id)
                        for c in inspecTech:
                            obj1 = {}
                            if c.inspectiontype == 1:
                                obj1['Type'] = "Intrusive"
                            else:
                                obj1['Type'] = "Non-Intrusive"
                            obj1['Coverage'] = c.coverage
                            obj1['IMITemID'] = models.IMItem.objects.get(imitemid=c.imitemid_id).imdescription
                            obj1['IMTypeID'] = models.IMType.objects.get(imtypeid=c.imtypeid_id).imtypename
                            listSub = listSub + obj1['Type'] + "-" + obj1['IMITemID'] + "-" + obj1[
                                'IMTypeID'] + "-" + str(obj1['Coverage']) + "%" + ";"
                    obj['Summary'] = listSub
                    dataSumary.append(obj)
        if '_ok' in request.POST:
            print("pp")
            for a in dataSumary:
                if (request.POST.get('%d' % a['CoverageDetailID'])):
                    print(request.POST.get('EEF' + str(a['CoverageDetailID'])))
                    inspectionCoverDetail = models.InspectionCoverageDetail(id=a['ID'], coverageid_id=a['CoverageID'],
                                                                            dmitemid_id=a['DMITemID'],
                                                                            inspsummary=a['Summary'],
                                                                            effcode=request.POST.get(
                                                                                'EEF' + str(a['CoverageDetailID'])),
                                                                            inspectiondate=a['InspectionDate'],
                                                                            carriedoutdate=a['InspectionDate'],
                                                                            iscarriedout=0)
                    inspectionCoverDetail.save()
                    info['notify'] = " Data save successfully!"
            # return redirect('inspectionPlan', siteID=siteID, name=inspecPlan.inspectionplanname,
            #                 date=inspecPlan.inspectionplandate)
        if '_cancel' in request.POST:
            print("cuong")
            return redirect('inspectionPlan', siteID=siteID, name=inspecPlan.inspectionplanname,
                            date=inspecPlan.inspectionplandate)
        if '_mitigation' in request.POST:
            print('luongcuong')
        return render(request, 'FacilityUI/inspection_plan/damageMechanism.html',
                      {'page': 'DamageMechanism', 'siteID': siteID, 'count': count, 'noti': noti,
                       'countnoti': countnoti,
                       'dataSumary': dataSumary, 'info': info, 'proposalID': inspecCover[0].proposalid_id})
    except Exception as e:
        print(e)
        print("error in DamamgeMechanism")


def GetIdInpsecPlan(name):
    inspecplan = models.InspecPlan.objects.all()
    for b in inspecplan:
        if (b.inspectionplanname == name):
            return b.id


################ Business UI Control ###################
# from google.colab import auth
import gspread as gsp
from oauth2client.client import GoogleCredentials
import pandas as pd
import random
def ListFacilities(request, siteID):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        print('chamhoi')
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    # countnoti = noti.filter(state=0).count()
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()

    try:
        risk = []
        error={}
        result = {}
        data = models.Facility.objects.filter(siteid=siteID)
        if '_search' in request.POST and request.POST.get('searchFacility')!="":
            search = request.POST.get('searchFacility')
            for a in data:
                # print(a.facilityname)
                # print(search)
                cof = 0
                pof = 1
                risTarget = models.FacilityRiskTarget.objects.get(facilityid=a.facilityid)
                if( a.facilityname.split() == search.split() or str(a.managementfactor) == search.strip() or str(risTarget.risktarget_fc) == search.strip() ):
                    dataF = {}
                    dataF['ID'] = a.facilityid
                    dataF['FacilitiName'] = a.facilityname
                    dataF['CreatedTime'] = a.time
                    dataF['ManagementFactor'] = a.managementfactor
                    dataF['RiskTarget'] = risTarget.risktarget_fc
                    dataF['TotalPoF'] = 0
                    dataF['TotalCoF'] = 0
                    dataF['reliability'] = 1
                    try:
                        idequipment = models.EquipmentMaster.objects.filter(facilityid=a.facilityid)
                        # print('idequipment ', idequipment)
                        for b in idequipment:
                            idcomponent = models.ComponentMaster.objects.filter(equipmentid=b.equipmentid)
                            # print('idcomponent ', idcomponent)
                            for c in idcomponent:
                                lastproposal = models.RwAssessment.objects.filter(componentid=c.componentid).latest(
                                    'id').id
                                df = models.RwFullPof.objects.get(id=lastproposal)
                                fc = models.RwFullFcof.objects.get(id=lastproposal)
                                pof = pof * df.pofap1
                                dataF['TotalPoF'] = pof
                                cof += fc.fcofvalue
                                dataF['TotalCoF'] = cof
                                dataF['reliability'] = 1 - pof
                                # print("chao em ", pof)
                                # print("anh dung day tu chieu ", cof)
                    except Exception as e:
                        print(e)
                        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                    risk.append(dataF)
            i=0
            for b in risk:
                i=i+1
            if i:
                result['data'] = str(i) + " search results for " + search
            else:
                # print("go error")
                error['exist'] = "Can not find " + "'" + search + "'" + " in any document"
        else:
            for a in data:
                cof = 0
                pof = 1
                dataF = {}
                risTarget = models.FacilityRiskTarget.objects.get(facilityid=a.facilityid)
                dataF['ID'] = a.facilityid
                dataF['FacilitiName'] = a.facilityname
                dataF['CreatedTime'] = a.time
                dataF['ManagementFactor'] = a.managementfactor
                dataF['RiskTarget'] = risTarget.risktarget_fc
                dataF['TotalPoF'] = 0
                dataF['TotalCoF'] = 0
                dataF['reliability'] = 1
                try:
                    idequipment = models.EquipmentMaster.objects.filter(facilityid=a.facilityid)
                    # print('idequipment ', idequipment)
                    for b in idequipment:
                        idcomponent = models.ComponentMaster.objects.filter(equipmentid=b.equipmentid)
                        print('idcomponent ', idcomponent)
                        for c in idcomponent:
                            lastproposal = models.RwAssessment.objects.filter(componentid=c.componentid).latest('id').id
                            df = models.RwFullPof.objects.get(id=lastproposal)
                            fc = models.RwFullFcof.objects.get(id=lastproposal)
                            pof = pof * df.pofap1
                            dataF['TotalPoF'] = pof
                            cof += fc.fcofvalue
                            dataF['TotalCoF'] = cof
                            dataF['reliability'] = 1 - pof
                            print("chao em ", pof)
                            print("anh dung day tu chieu ", cof)
                except Exception as e:
                    print(e)
                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                risk.append(dataF)
        pagiFaci = Paginator(risk, 25)
        pageFaci = request.GET.get('page', 1)
        try:
            users = pagiFaci.page(pageFaci)
        except PageNotAnInteger:
            users = pagiFaci.page(1)
        except EmptyPage:
            users = pageFaci.page(pagiFaci.num_pages)
        if '_edit' in request.POST:
            for a in data:
                if (request.POST.get('%d' % a.facilityid)):
                    return redirect('facilitiesEdit', a.facilityid)
        try:
            if '_delete' in request.POST:
                for a in data:
                    if (request.POST.get('%d' % a.facilityid)):
                        facilityname = models.Facility.objects.get(facilityid=a.facilityid).facilityname
                        user = models.ZUser.objects.filter(kind='manager')
                        for b in user:
                            noti = models.ZNotification(id_user=b.id, subject=request.session['name'],
                                                    content=' deleted facility ', object=facilityname,
                                                    link=siteID,
                                                    time=datetime.now(), state=0, active_eng =1, active_vie =0)
                        noti.save()
                        a.delete()
                return redirect('facilitiesDisplay', siteID)
        except Exception as e:
            print(e)
            raise Http404
        if '_new' in request.POST:
            return redirect('facilitiesNew', siteID=siteID)
        siteID = encrypt(str(siteID))

        # if '_testdat' in request.POST:
        #     message = SmsMessage(body='lolcats make me hungry', from_phone='+41791111111', to=['+84335025559'])
        #     message.send()
        #     print('send ok nhe')
        #     return redirect('facilitiesDisplay', siteID)

    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/facility/facilityListDisplay.html',
                  {'page': 'listFacility', 'obj': users,'siteID': siteID,'error': error,'result': result ,'count': count, 'info': request.session,
                   'noti': noti, 'countnoti': countnoti,'notiVerification': notiVerification})

def settingAccount(request, siteID):
    siteID = int(decrypt(siteID))
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    # countnoti = noti.filter(state=0).count()
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()
    notisuc = ''
    try:
        site = models.Sites.objects.get(siteid=siteID)
        dataOld = models.ZUser.objects.get(id=site.userID_id)
        dataNew = {}
        dataNew['Name'] = dataOld.name
        dataNew['Email'] = dataOld.email
        dataNew['Phone'] = dataOld.phone
        dataNew['Address'] = dataOld.adress
        dataNew['Kind'] = dataOld.kind
        print(dataOld.phone)

        if request.method == 'POST':
            dataNew['Name'] = request.POST.get('NameOfUser')
            dataNew['Email'] = request.POST.get('EmailOfUser')
            dataNew['Phone'] = request.POST.get('PhoneOfUser')
            dataNew['Address'] = request.POST.get('AddressOfUser')
            # dataNew['Kind'] = request.POST.get('KindOfUser')

            dataOld.name = dataNew['Name']
            dataOld.email = dataNew['Email']
            dataOld.phone = dataNew['Phone']
            dataOld.address = dataNew['Address']
            # dataOld.kind = dataNew['Kind']
            dataOld.save()
            notisuc = "Edit Success"
            print('okela', notisuc)
            # return redirect('', siteID=dataOld.siteid_id)
        print('@@',notisuc)
    except Exception as e:
        print(e)
        raise Http404
    siteID = encrypt(str(siteID))
    return render(request, 'FacilityUI/facility/settingAccount.html',
                  {'siteID': siteID,'info': request.session, 'dataNew': dataNew, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'notisuc':notisuc, 'notiVerification':notiVerification})
def ProcessStringProvince(string):
    s1 = string.replace("Thành Phố ", "")
    s2 = s1.replace("Quận ", "")
    s3 = s2.replace("Huyện ", "")
    s4 = s3.replace("Bắc ", "")
    return s4
def NewFacilities(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    # print(siteID)
    # if len(siteID) > 10:
    #     siteID = int(decrypt(siteID))
    # else:
    #     siteID = int(siteID)
    # print(siteID)
    try:
        error = {}
        data = {}
        site = models.Sites.objects.get(siteid=siteID)
        if '_helpfms' in request.POST:
            data['facilityname'] = request.POST.get('FacilityName')
            data['manageFactor'] = request.POST.get('ManagementSystemFactor')
            data['targetFC'] = request.POST.get('Financial')
            data['targetAC'] = request.POST.get('Area')
            fa = models.Facility(facilityname=data['facilityname'], managementfactor=data['manageFactor'],
                                 siteid_id=siteID, time=datetime.now())
            fa.save()
            faTarget = models.FacilityRiskTarget(facilityid_id=fa.facilityid, risktarget_ac=data['targetAC'],
                                                 risktarget_fc=data['targetFC'])
            faTarget.save()
            faci=models.Facility.objects.filter(siteid_id=siteID)
            faciid=0
            for i in faci:
                if i.facilityname==data['facilityname']:
                    faciid=i.facilityid
            return redirect('managmentsystems', facilityID=faciid)
        if request.method == 'POST':
            data['facilityname'] = request.POST.get('FacilityName')
            data['manageFactor'] = request.POST.get('ManagementSystemFactor')
            data['targetFC'] = request.POST.get('Financial')
            data['targetAC'] = request.POST.get('Area')
            data['province'] = request.POST.get('ls_province')
            data['district'] = request.POST.get('ls_district')
            data['ward'] = request.POST.get('ls_ward')
            countFaci = models.Facility.objects.filter(facilityname=data['facilityname']).count()
            try:
                print(ProcessStringProvince(data['district']))
                with open('static/json/vietnamprovince/vn.json') as json_file:
                    load = json.load(json_file)
                    for a in load:
                        print(data['province'])
                        print(a['admin_name'])
                        if a['admin_name'] == data['province']:
                            data['lat'] = a['lat']
                            data['lng'] = a['lng']
                            print(ProcessStringProvince(a['city']))
                            if ProcessStringProvince(a['city']) == ProcessStringProvince(data['district']):
                                data['lat'] = a['lat']
                                data['lng'] = a['lng']
                                print("go go")
                                break
                            elif a['capital'] =="admin":
                                data['lat'] = a['lat']
                                data['lng'] = a['lng']
                print(data['lat'],data['lng'])
            except Exception as e:
                print(e)
            if countFaci > 0:
                error['exist'] = "This facility already exists!"
            else:
                fa = models.Facility(facilityname=data['facilityname'], managementfactor=data['manageFactor'],
                                     siteid_id=siteID,province=data['province'],district=data['district'],ward=data['ward'],
                                     lat = data['lat'], lng = data['lng'])
                fa.save()
                faTarget = models.FacilityRiskTarget(facilityid_id=fa.facilityid, risktarget_ac=data['targetAC'],
                                                     risktarget_fc=data['targetFC'])
                faTarget.save()
                user = models.ZUser.objects.filter(kind='manager')
                for b in user:
                    noti = models.ZNotification(id_user=b.id, subject=request.session['name'],
                                            content=' added facility ', object=data['facilityname'],
                                            link=siteID,
                                            time=datetime.now(), state=0, active_eng =1, active_vie=0)
                noti.save()
                return redirect('facilitiesDisplay', siteID=siteID)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/facility/facilityNew.html',
                  {'page': 'newFacility', 'site': site, 'error': error, 'data': data, 'siteID': siteID,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count})


def EditFacilities(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        error = {}
        dataNew = {}
        dataOld = models.Facility.objects.get(facilityid=facilityID)
        dataRisk = models.FacilityRiskTarget.objects.get(facilityid=facilityID)
        site = models.Sites.objects.get(siteid=dataOld.siteid_id)
        dataNew['facilityname'] = dataOld.facilityname
        dataNew['manageFactor'] = dataOld.managementfactor
        dataNew['targetFC'] = dataRisk.risktarget_fc
        dataNew['targetAC'] = dataRisk.risktarget_ac
        dataNew['sitename'] = site.sitename
        if '_helpfms' in request.POST:
            return redirect('managmentsystems', facilityID=facilityID)
        if request.method == 'POST':
            dataNew['facilityname'] = request.POST.get('FacilityName')
            dataNew['manageFactor'] = request.POST.get('ManagementSystemFactor')
            dataNew['targetFC'] = request.POST.get('Financial')
            dataNew['targetAC'] = request.POST.get('Area')
            countFaci = models.Facility.objects.filter(facilityname=dataNew['facilityname']).count()
            if dataNew['facilityname'] != dataOld.facilityname and countFaci > 0:
                error['exist'] = "This facility already exists!"
            else:
                dataOld.facilityname = dataNew['facilityname']
                dataOld.managementfactor = dataNew['manageFactor']
                dataOld.save()

                dataRisk.risktarget_fc = dataNew['targetFC']
                dataRisk.risktarget_ac = dataNew['targetAC']
                dataRisk.save()

                return redirect('facilitiesDisplay', siteID=dataOld.siteid_id)

    except:
        raise Http404
    return render(request, 'FacilityUI/facility/facilityEdit.html',
                  {'page': 'editFacility', 'dataNew': dataNew, 'error': error, 'siteID': dataOld.siteid_id,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count})


def ListDesignCode(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        faci = models.Facility.objects.get(facilityid=facilityID)
        data = models.DesignCode.objects.filter(siteid=faci.siteid_id)
        pagiDes = Paginator(data, 25)
        pageDes = request.GET.get('page', 1)
        try:
            obj = pagiDes.page(pageDes)
        except PageNotAnInteger:
            obj = pagiDes.page(1)
        except EmptyPage:
            obj = pageDes.page(pagiDes.num_pages)
        if '_edit' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.designcodeid):
                    return redirect('designcodeEdit', designcodeID=a.designcodeid,facilityID =facilityID)
        if '_delete' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.designcodeid):
                    a.delete()
            return redirect('designcodeDisplay', facilityID=facilityID)
        if '_new' in request.POST:
            return redirect('designcodeNew', facilityID=facilityID)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    # facilityID = encrypt(str(facilityID))
    return render(request, 'FacilityUI/design_code/designcodeListDisplay.html',
                  {'page': 'listDesign', 'obj': obj, 'siteID': faci.siteid_id,'facilityID':facilityID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})


def CorrisionRate(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()

    try:
        list = []
        dataF = {}
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        print("check component type id",component.componenttypeid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        componentID = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        dataF = models.CorrosionRateTank.objects.filter(id_id=proposalID)
        for a in dataF:
            list.append(a)
        error = {}
        data = {}
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        if request.method == 'POST':
            data['corrision'] = request.POST.get('CorrisionID')
            data['soilsidecorrosionrate'] = request.POST.get('SoilSideCorrosionRate')
            data['productsidecorrosionrate'] = request.POST.get('ProductSideCorrosionRate')
            data['potentialporrosion'] = request.POST.get('PotentialCorrosion')
            data['tankpadmaterial'] = request.POST.get('TankPadMaterial')
            data['tankdrainagetype'] = request.POST.get('TankDrainageType')
            data['cathodicprotectiontype'] = request.POST.get('CathodicProtectionType')
            data['tankbottomtype'] = request.POST.get('TankBottomType')
            data['soilsidetemperature'] = request.POST.get('SoilSideTemperature')
            data['productcondition'] = request.POST.get('ProductCondition')
            data['productsidetemp'] = request.POST.get('ProductSideTemp')
            data['steamcoil'] = request.POST.get('SteamCoil')
            data['waterdrawoff'] = request.POST.get('WaterDrawOff')
            data['productsidebottom'] = request.POST.get('ProductSideBottom')
            data['modifiedsoilsidecorrosionrate'] = request.POST.get('ModifiedSoilSideCorrosionRate')
            data['modifiedproductsidecorrosionrate'] = request.POST.get('ModifiedProductSideCorrosionRate')
            data['finalestimatedcorrosionrate'] = request.POST.get('FinalEstimatedCorrosionRate')
            countCorri = models.CorrosionRateTank.objects.filter(corrosionid=data['corrision']).count()
            if countCorri > 0:
                error['exist'] = "This corrision already exists!"

            else:
                cor = models.CorrosionRateTank(id_id=rwAss.id,
                                               soilsidecorrosionrate=data['soilsidecorrosionrate'],
                                               productsidecorrosionrate=data['productsidecorrosionrate'],
                                               potentialcorrosion=data['potentialporrosion'],
                                               tankpadmaterial=data['tankpadmaterial'],
                                               tankdrainagetype=data['tankdrainagetype'],
                                               cathodicprotectiontype=data['cathodicprotectiontype'],
                                               tankbottomtype=data['tankbottomtype'],
                                               soilsidetemperature=data['soilsidetemperature'],
                                               productcondition=data['productcondition'],
                                               productsidetemp=data['productsidetemp'],
                                               steamcoil=data['steamcoil'], waterdrawoff=data['waterdrawoff'],
                                               productsidebottom=data['productsidebottom'])
                cor.save()
                try:
                    ReCalculate.caculateCorrisionRate(proposalID)
                except Exception as e:
                    print(e)
                    raise Http404
                return redirect('corrision', proposalID=proposalID)
        if '_delete' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.corrosionid):
                    a.delete()
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/proposalCorrisionRate.html',
                  {'page': 'corrsionRate', 'proposalID': proposalID, 'componentID': rwAss.componentid_id,
                   'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'list': list, 'dataF': dataF, 'isTank': isBottom,
                   'isShell': isShell})


def CaculateCorrision(request, proposalID):
    return render(request, 'FacilityUI/risk_summary/CaculateCorrision.html',
                  {'page': 'caculateCorri', 'proposalID': proposalID})


def NewDesignCode(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        error = {}
        data = {}
        siteID = models.Facility.objects.get(facilityid = facilityID).siteid_id
        if request.method == 'POST':
            data['designcode'] = request.POST.get('design_code_name')
            data['designcodeapp'] = request.POST.get('design_code_app')
            count = models.DesignCode.objects.filter(designcode=data['designcode']).count()
            if count > 0:
                error['exist'] = "This design code already exist!"
            else:
                ds = models.DesignCode(designcode=data['designcode'], designcodeapp=data['designcodeapp'],
                                       siteid_id=siteID)
                ds.save()
                return redirect('designcodeDisplay', facilityID=facilityID)
    except:
        raise Http404
    return render(request, 'FacilityUI/design_code/designcodeNew.html',
                  {'page': 'newDesign', 'data': data, 'error': error, 'siteID': siteID, 'noti': noti,
                   'countnoti': countnoti, 'count': count})


def EditDesignCode(request, designcodeID,facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        error = {}
        dataNew = {}
        dataOld = models.DesignCode.objects.get(designcodeid=designcodeID)
        dataNew['designcode'] = dataOld.designcode
        dataNew['designcodeapp'] = dataOld.designcodeapp
        if request.method == 'POST':
            dataNew['designcode'] = request.POST.get('design_code_name')
            dataNew['designcodeapp'] = request.POST.get('design_code_app')
            count = models.DesignCode.objects.filter(designcode=dataNew['designcodeapp']).count()
            if dataNew['designcode'] != dataOld.designcode and count > 0:
                error['exist'] = "This design code already exist!"
            else:
                dataOld.designcode = dataNew['designcode']
                dataOld.designcodeapp = dataNew['designcodeapp']
                dataOld.save()
                return redirect('designcodeDisplay', facilityID=facilityID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/design_code/designcodeEdit.html',
                  {'page': 'editDesign', 'data': dataNew, 'error': error, 'siteID': dataOld.siteid_id, 'noti': noti,
                   'countnoti': countnoti, 'count': count})


def ListManufacture(request, facilityID):
    # if len(siteID) > 10:
    #     siteID = int(decrypt(siteID))
    # else:
    #     siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        faci = models.Facility.objects.get(facilityid=facilityID)
        data = models.Manufacturer.objects.filter(siteid=faci.siteid_id)
        pagiManu = Paginator(data, 25)
        pageManu = request.GET.get('page', 1)
        try:
            obj = pagiManu.page(pageManu)
        except PageNotAnInteger:
            obj = pagiManu.page(1)
        except EmptyPage:
            obj = pageManu.page(pagiManu.num_pages)
        if '_edit' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.manufacturerid):
                    return redirect('manufactureEdit', manufactureID=a.manufacturerid,facilityID=facilityID)
        if '_delete' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.manufacturerid):
                    b = models.Manufacturer.objects.get(manufacturerid = a.manufacturerid)
                    b.delete()
                    print('1')
            return redirect('manufactureDisplay', facilityID=facilityID)
        if '_new' in request.POST:
            return redirect('manufactureNew', facilityID=facilityID)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    # facilityID = encrypt(str(facilityID))
    return render(request, 'FacilityUI/manufacture/manufactureListDisplay.html',
                  {'page': 'listManu', 'obj': obj, 'siteID': faci.siteid_id,'facilityID':facilityID, 'noti': noti, 'countnoti': countnoti,
                   'count': count,'notiVerification':notiVerification,'siteid':siteid})


def NewManufacture(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    siteID = models.Facility.objects.get(facilityid = facilityID).siteid_id
    try:
        error = {}
        data = {}
        if request.method == 'POST':
            data['manufacture'] = request.POST.get('manufacture')
            count = models.Manufacturer.objects.filter(manufacturername=data['manufacture']).count()
            if count > 0:
                error['exist'] = 'This manufacture already exist!'
            else:
                manu = models.Manufacturer(siteid_id=siteID, manufacturername=data['manufacture'])
                manu.save()
                return redirect('manufactureDisplay', facilityID=facilityID)
    except:
        raise Http404
    return render(request, 'FacilityUI/manufacture/manufactureNew.html',
                  {'page': 'newManu', 'data': data, 'error': error, 'siteID': siteID, 'noti': noti,
                   'countnoti': countnoti, 'count': count})


def EditManufacture(request, manufactureID,facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        error = {}
        dataNew = {}
        dataOld = models.Manufacturer.objects.get(manufacturerid=manufactureID)
        dataNew['manufacture'] = dataOld.manufacturername
        if request.method == 'POST':
            dataNew['manufacture'] = request.POST.get('manufacture')
            count = models.Manufacturer.objects.filter(manufacturername=dataNew['manufacture']).count()
            if dataNew['manufacture'] != dataOld.manufacturername and count > 0:
                error['exist'] = 'This manufacturer already exist!'
            else:
                dataOld.manufacturername = dataNew['manufacture']
                dataOld.save()
                return redirect('manufactureDisplay', facilityID=facilityID)
    except:
        raise Http404
    return render(request, 'FacilityUI/manufacture/manufactureEdit.html',
                  {'page': 'editManu', 'data': dataNew, 'error': error, 'siteID': dataOld.siteid_id, 'noti': noti,
                   'countnoti': countnoti, 'count': count})


def ListEquipment(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        faci = models.Facility.objects.get(facilityid=facilityID)
        data = models.EquipmentMaster.objects.filter(facilityid=facilityID)
        risk = []
        error = {}
        result = {}
        if '_search' in request.POST and request.POST.get('searchEquipment') != "":
            search = request.POST.get('searchEquipment')
            for a in data:
                pof = 1
                cof = 0
                equiptype = models.EquipmentType.objects.get(equipmenttypeid=a.equipmenttypeid_id)
                if (a.equipmentname == search or a.equipmentnumber==search or equiptype.equipmenttypename==search):
                    dataF = {}
                    dataF['ID'] = a.equipmentid
                    dataF['EquipmentName'] = a.equipmentname
                    dataF['Created'] = a.time
                    dataF['EquipmentType'] = equiptype.equipmenttypename
                    dataF['EquipmentNumber'] = a.equipmentnumber
                    dataF['TotalPoF'] = 0
                    dataF['TotalCoF'] = 0
                    dataF['reliability'] = 1
                    try:
                        idcomponent = models.ComponentMaster.objects.filter(equipmentid=a.equipmentid)
                        for b in idcomponent:
                            lastproposal = models.RwAssessment.objects.filter(componentid=b).latest('id').id
                            df = models.RwFullPof.objects.get(id=lastproposal)
                            fc = models.RwFullFcof.objects.get(id=lastproposal)
                            pof = pof * df.pofap1
                            dataF['TotalPoF'] = roundData.roundFC(pof)
                            cof += fc.fcofvalue
                            dataF['TotalCoF'] = roundData.roundFC(cof)
                            dataF['reliability'] = roundData.roundFC(1 - pof)
                    except Exception as e:
                        print(e)
                    risk.append(dataF)
            i = 0
            for b in risk:
                i = i + 1
            # print(i)
            if i:
                result['data'] = str(i) + " search results for " + search
            else:
                # print("go error")
                error['exist'] = "Can not find " + "'" + search + "'" + " in any document"
        else:
            for a in data:
                pof = 1
                cof = 0
                equiptype = models.EquipmentType.objects.get(equipmenttypeid=a.equipmenttypeid_id)
                dataF = {}
                dataF['ID'] = a.equipmentid
                dataF['EquipmentName'] = a.equipmentname
                dataF['Created'] = a.time
                dataF['EquipmentType'] = equiptype.equipmenttypename
                dataF['EquipmentNumber'] = a.equipmentnumber
                dataF['TotalPoF'] = 0
                dataF['TotalCoF'] = 0
                dataF['reliability'] = 1
                try:
                    idcomponent = models.ComponentMaster.objects.filter(equipmentid=a.equipmentid)
                    for b in idcomponent:
                        lastproposal = models.RwAssessment.objects.filter(componentid=b).latest('id').id
                        df = models.RwFullPof.objects.get(id=lastproposal)
                        fc = models.RwFullFcof.objects.get(id=lastproposal)
                        pof = pof * df.pofap1
                        dataF['TotalPoF'] = roundData.roundFC(pof)
                        cof += fc.fcofvalue
                        dataF['TotalCoF'] = roundData.roundFC(cof)
                        dataF['reliability'] = roundData.roundFC(1 - pof)
                except Exception as e:
                    print(e)
                risk.append(dataF)
        pagiEquip = Paginator(risk, 25)
        pageEquip = request.GET.get('page', 1)
        try:
            obj = pagiEquip.page(pageEquip)
        except PageNotAnInteger:
            obj = pagiEquip.page(1)
        except EmptyPage:
            obj = pageEquip.page(pagiEquip.num_pages)
        if '_edit' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.equipmentid):
                    return redirect('equipmentEdit', equipmentID=a.equipmentid)
        if '_delete' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.equipmentid):
                    user = models.ZUser.objects.filter(kind='manager')
                    equipmentname = models.EquipmentMaster.objects.get(equipmentid=a.equipmentid).equipmentname
                    for b in user:
                        noti = models.ZNotification(id_user=b.id, subject=request.session['name'],
                                                content=' deleted equipment ', object=equipmentname,
                                                link=facilityID,
                                                time=datetime.now(), state=0, active_eng =1, active_vie=0)
                    noti.save()
                    a.delete()
            return redirect('equipmentDisplay', facilityID=facilityID)
        if '_new' in request.POST:
            return redirect('equipmentNew', facilityID=facilityID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/equipment/equipmentListDisplay.html',
                  {'page': 'listEquip', 'obj': obj, 'facilityID': facilityID, 'siteID': faci.siteid_id, 'faci': faci,
                   'info': request.session,'error':error,'result':result ,'noti': noti, 'countnoti': countnoti, 'count': count,
                   'notiVerification':notiVerification, 'siteid':siteid})


def NewEquipment(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        data = {}
        error = {}
        faci = models.Facility.objects.get(facilityid=facilityID)
        manufacture = models.Manufacturer.objects.filter(siteid=faci.siteid_id)
        designcode = models.DesignCode.objects.filter(siteid=faci.siteid_id)
        equipmenttype = models.EquipmentType.objects.all()
        if request.method == 'POST':
            data['equipmentnumber'] = request.POST.get('equipmentNumber')
            data['equipmentname'] = request.POST.get('equipmentName')
            data['equipmenttype'] = request.POST.get('equipmentType')
            data['designcode'] = request.POST.get('designCode')
            data['manufacture'] = request.POST.get('manufacture')
            data['commissiondate'] = request.POST.get('CommissionDate')
            data['pdf'] = request.POST.get('PDFNo')
            data['processdescrip'] = request.POST.get('processDescription')
            data['description'] = request.POST.get('decription')
            count = models.EquipmentMaster.objects.filter(equipmentnumber=data['equipmentnumber']).count()
            if count > 0:
                error['existNumber'] = 'This equipment number already exist!'

            else:
                if models.EquipmentMaster.objects.filter(equipmentnumber=data['equipmentname']).count()>0:
                    error['existName'] = 'This equipment name already exist!'
                else:
                    eq = models.EquipmentMaster(equipmentnumber=data['equipmentnumber'],
                                                equipmentname=data['equipmentname'],
                                                equipmenttypeid_id=models.EquipmentType.objects.get(
                                                    equipmenttypename=data['equipmenttype']).equipmenttypeid,
                                                designcodeid_id=models.DesignCode.objects.get(
                                                    designcode=data['designcode']).designcodeid, siteid_id=faci.siteid_id,
                                                facilityid_id=facilityID,
                                                manufacturerid_id=models.Manufacturer.objects.get(
                                                    manufacturername=data['manufacture']).manufacturerid,
                                                commissiondate=data['commissiondate'], pfdno=data['pdf'],
                                                processdescription=data['processdescrip'],
                                                equipmentdesc=data['description'], time = datetime.now())
                    eq.save()
                    user = models.ZUser.objects.filter(kind='manager')
                    for b in user:
                        noti = models.ZNotification(id_user=b.id, subject=request.session['name'],
                                                content=' added equipment ', object=data['equipmentname'],
                                                link=facilityID,
                                                time=datetime.now(), state=0, active_eng=1, active_vie=0)
                    noti.save()
                    return redirect('equipmentDisplay', facilityID=facilityID)
    except:
        raise Http404
    return render(request, 'FacilityUI/equipment/equipmentNew.html',
                  {'page': 'newEquip', 'data': data, 'equipmenttype': equipmenttype, 'designcode': designcode,
                   'manufacture': manufacture, 'facilityID': facilityID, 'siteID': faci.siteid_id,'error': error,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count, 'notiVerification':notiVerification, 'siteid':siteid})


def EditEquipment(request, equipmentID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        error = {}
        dataNew = {}
        dataOld = models.EquipmentMaster.objects.get(equipmentid=equipmentID)
        manufacture = models.Manufacturer.objects.filter(siteid=dataOld.siteid_id)
        designcode = models.DesignCode.objects.filter(siteid=dataOld.siteid_id)
        dataNew['equipmentnumber'] = dataOld.equipmentnumber
        dataNew['equipmentname'] = dataOld.equipmentname
        dataNew['equipmenttype'] = models.EquipmentType.objects.get(
            equipmenttypeid=dataOld.equipmenttypeid_id).equipmenttypename
        dataNew['designcode'] = models.DesignCode.objects.get(designcodeid=dataOld.designcodeid_id).designcode
        dataNew['manufacture'] = models.Manufacturer.objects.get(
            manufacturerid=dataOld.manufacturerid_id).manufacturername
        dataNew['commissiondate'] = dataOld.commissiondate.date().strftime('%Y-%m-%d')
        dataNew['pdf'] = dataOld.pfdno
        dataNew['processdescrip'] = dataOld.processdescription
        dataNew['description'] = dataOld.equipmentdesc
        if request.method == 'POST':
            dataNew['equipmentnumber'] = request.POST.get('equipmentNumber')
            dataNew['equipmentname'] = request.POST.get('equipmentName')
            dataNew['designcode'] = request.POST.get('designCode')
            dataNew['manufacture'] = request.POST.get('manufacture')
            dataNew['commissiondate'] = request.POST.get('CommissionDate')
            dataNew['pdf'] = request.POST.get('PDFNo')
            dataNew['processdescrip'] = request.POST.get('processDescription')
            dataNew['description'] = request.POST.get('decription')
            count = models.EquipmentMaster.objects.filter(equipmentnumber=dataNew['equipmentnumber']).count()
            if dataNew['equipmentnumber'] != dataOld.equipmentnumber and count > 0:
                error['exist'] = 'This equipment already exist!'
            else:
                dataOld.equipmentnumber = dataNew['equipmentnumber']
                dataOld.equipmentname = dataNew['equipmentname']
                dataOld.designcodeid_id = models.DesignCode.objects.get(designcode=dataNew['designcode']).designcodeid
                dataOld.manufacturerid_id = models.Manufacturer.objects.get(
                    manufacturername=dataNew['manufacture']).manufacturerid
                dataOld.commissiondate = dataNew['commissiondate']
                dataOld.pfdno = dataNew['pdf']
                dataOld.processdescription = dataNew['processdescrip']
                dataOld.equipmentdesc = dataNew['description']
                dataOld.save()
                return redirect('equipmentDisplay', facilityID=dataOld.facilityid_id)
    except:
        raise Http404
    return render(request, 'FacilityUI/equipment/equipmentEdit.html',
                  {'page': 'editEquip', 'data': dataNew, 'error': error, 'designcode': designcode,
                   'manufacture': manufacture, 'facilityID': dataOld.facilityid_id, 'siteID': dataOld.siteid_id,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})


def ListComponent(request, equipmentID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        eq = models.EquipmentMaster.objects.get(equipmentid=equipmentID)
        faci = models.Facility.objects.get(facilityid=eq.facilityid_id)
        data = models.ComponentMaster.objects.filter(equipmentid=equipmentID)
        risk = []
        error = {}
        result = {}
        if '_search' in request.POST and request.POST.get('searchComponent') != "":
            search = request.POST.get('searchComponent')
            for a in data:
                componentType = models.ComponentType.objects.get(componenttypeid=a.componenttypeid_id)
                if (a.componentnumber == search or a.componentname==search or componentType.componenttypename==search):
                    dataF = {}
                    dataF['ID'] = a.componentid
                    dataF['ComponentNumber'] = a.componentnumber
                    dataF['ComponentName'] = a.componentname
                    dataF['ComponentType'] = componentType.componenttypename
                    dataF['Created'] = a.time
                    dataF['TotalPoF'] = 0
                    dataF['TotalCoF'] = 0
                    dataF['reliability'] = 1
                    try:
                        lastproposal = models.RwAssessment.objects.filter(componentid=a.componentid).latest('id').id
                        # q1 = 'SELECT ID FROM rw_assessment inner join equipment_master on equipment_master.EquipmentID = rw_assessment.EquipmentID and SiteID = 4'
                        # Query1 = models.RwAssessment.objects.raw(q1)
                        # lastproposal=models.RwAssessment.objects.latest('id').id
                        print('id= ', lastproposal)
                        # for a in lastporposal:
                        #     df = models.RwFullPof.objects.latest('id')
                        #     fc = models.RwFullFcof.objects.filter(id=a.id)
                        #     dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
                        df = models.RwFullPof.objects.get(id=lastproposal)
                        fc = models.RwFullFcof.objects.get(id=lastproposal)
                        dataF['TotalPoF'] = roundData.roundFC(df.pofap1)
                        dataF['TotalCoF'] = roundData.roundFC(fc.fcofvalue)
                        dataF['reliability'] = roundData.roundFC(1 - df.pofap1)
                    except Exception as e:
                        print(e)
                    risk.append(dataF)
            i = 0
            for b in risk:
                i = i + 1
            # print(i)
            if i:
                result['data'] = str(i) + " search results for " + search
            else:
                # print("go error")
                error['exist'] = "Can not find " + "'" + search + "'" + " in any document"
        else:
            for a in data:
                dataF = {}
                componentType = models.ComponentType.objects.get(componenttypeid=a.componenttypeid_id)
                dataF['ID'] = a.componentid
                dataF['ComponentNumber'] = a.componentnumber
                dataF['ComponentName'] = a.componentname
                dataF['ComponentType'] = componentType.componenttypename
                dataF['TotalPoF'] = 0
                dataF['TotalCoF'] = 0
                dataF['reliability'] = 1
                try:
                    lastproposal = models.RwAssessment.objects.filter(componentid=a.componentid).latest('id').id
                    # q1 = 'SELECT ID FROM rw_assessment inner join equipment_master on equipment_master.EquipmentID = rw_assessment.EquipmentID and SiteID = 4'
                    # Query1 = models.RwAssessment.objects.raw(q1)
                    # lastproposal=models.RwAssessment.objects.latest('id').id
                    print('id= ', lastproposal)
                    # for a in lastporposal:
                    #     df = models.RwFullPof.objects.latest('id')
                    #     fc = models.RwFullFcof.objects.filter(id=a.id)
                    #     dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
                    df = models.RwFullPof.objects.get(id=lastproposal)
                    fc = models.RwFullFcof.objects.get(id=lastproposal)
                    dataF['TotalPoF'] = roundData.roundFC(df.pofap1)
                    dataF['TotalCoF'] = roundData.roundFC(fc.fcofvalue)
                    dataF['reliability'] = roundData.roundFC(1 - df.pofap1)
                except Exception as e:
                    print(e)
                dataF['Created'] = a.time
                risk.append(dataF)
        pagiComp = Paginator(risk, 25)
        pageComp = request.GET.get('page', 1)
        try:
            obj = pagiComp.page(pageComp)
        except PageNotAnInteger:
            obj = pagiComp.page(1)
        except EmptyPage:
            obj = pageComp.page(pagiComp.num_pages)
        if '_edit' in request.POST:
            for a in data:
                if request.POST.get('%a' % a.componentid):
                    return redirect('componentEdit', componentID=a.componentid)
        if '_delete' in request.POST:
            for a in data:
                if request.POST.get('%d' % a.componentid):
                    # componentname = models.ComponentMaster.objects.get(componentid=a.componentid).componentname
                    # user = models.ZUser.objects.filter(kind='manager')
                    # for b in user:
                    #     noti = models.ZNotification(id_user=user, subject=request.session['name'],
                    #                             content=' deleted component ', object=componentname,
                    #                             link=equipmentID,
                    #                             time=datetime.now(), state=0, active_eng =1, active_vie=0)
                    #     noti.save()
                    a.delete()
            return redirect('componentDisplay', equipmentID=equipmentID)
        if '_new' in request.POST:
            return redirect('componentNew', equipmentID=equipmentID)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/component/componentListDisplay.html',
                  {'page': 'listComp','siteID':faci.siteid_id ,'obj': obj, 'equipmentID': equipmentID,'error':error ,'result':result,'facilityID': eq.facilityid_id, 'eq': eq,
                   'faci': faci, 'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification, 'siteid':siteid})


def NewComponent(request, equipmentID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        eq = models.EquipmentMaster.objects.get(equipmentid=equipmentID)
        data = {}
        dataAPItank = []
        dataAPInormal = []
        error = {}
        componentType = models.ComponentType.objects.all()
        apicomponentType = models.ApiComponentType.objects.all()
        prdType = models.PRDType.objects.all()
        if eq.equipmenttypeid_id == 11:
            isTank = 1
        else:
            isTank = 0
        tank = [12,13,14,15]
        for a in componentType:
            if a.componenttypeid in tank:
                dataAPItank.append(a)
            else:
                dataAPInormal.append(a)
        # tankapi = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 36, 38, 39]
        tankapi = [36, 38, 39]
        other = []
        for a in apicomponentType:
            if a.apicomponenttypeid not in tankapi:
                other.append(a)
        if request.method == 'POST':
            data['componentNumber'] = request.POST.get('componentNumber')
            data['componenttype'] = request.POST.get('componentType')
            data['apicomponenttype'] = request.POST.get('apiComponentType')
            data['componentname'] = request.POST.get('componentName')
            data['prdtype'] = request.POST.get('prdType')
            data['risktaget']=request.POST.get('riskTarget')
            if request.POST.get('comRisk'):
                data['link'] = 1
            else:
                data['link'] = 0
            data['description'] = request.POST.get('description')
            count = models.ComponentMaster.objects.filter(componentnumber=data['componentNumber']).count()
            if count > 0:
                error['exist'] = 'This component already exist!'
            else:
                comp = models.ComponentMaster(componentnumber=data['componentNumber'], equipmentid_id=equipmentID,
                                              componenttypeid_id=models.ComponentType.objects.get(
                                                  componenttypename=data['componenttype']).componenttypeid,
                                              componentname=data['componentname'], componentdesc=data['description'],
                                              isequipmentlinked=data['link'],
                                              risktarget=data['risktaget'],
                                              apicomponenttypeid=models.ApiComponentType.objects.get(
                                                  apicomponenttypename=data['apicomponenttype']).apicomponenttypeid, time = datetime.now())
                comp.save()
                user = models.ZUser.objects.filter(kind='manager')
                for b in user:
                    noti = models.ZNotification(id_user=b.id, subject=request.session['name'],
                                            content=' added component ', object=data['componentNumber'],
                                            link=equipmentID,
                                            time=datetime.now(), state=0, active_eng=1, active_vie=0)
                noti.save()
                return redirect('componentDisplay', equipmentID=equipmentID)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/component/componentNew.html',
                  {'page': 'newComp', 'error': error, 'componenttype': componentType, 'api': apicomponentType,
                   'other': other, 'data': data, 'equipmentID': equipmentID, 'facilityID': eq.facilityid_id,
                   'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                   'prdtype': prdType,'isTank':isTank,'dataAPItank':dataAPItank,'dataAPInormal':dataAPInormal})


def EditComponent(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        dataNew = {}
        error = {}
        dataOld = models.ComponentMaster.objects.get(componentid=componentID)
        dataNew['componentnumber'] = dataOld.componentnumber
        dataNew['componentname'] = dataOld.componentname
        dataNew['componenttype'] = models.ComponentType.objects.get(
            componenttypeid=dataOld.componenttypeid_id).componenttypename
        dataNew['apicomponenttype'] = models.ApiComponentType.objects.get(
            apicomponenttypeid=dataOld.apicomponenttypeid).apicomponenttypename
        dataNew['link'] = dataOld.isequipmentlinked
        dataNew['description'] = dataOld.componentdesc
        dataNew['risktarget'] = dataOld.risktarget
        # print('risktarget'+str(dataNew['risktarget']))
        if request.method == 'POST':
            dataNew['componentnumber'] = request.POST.get('componentNumer')
            dataNew['componentname'] = request.POST.get('componentName')
            if request.POST.get('comRisk'):
                dataNew['link'] = 1
            else:
                dataNew['link'] = 0
            dataNew['description'] = request.POST.get('decription')
            dataNew['risktarget'] = request.POST.get('riskTarget')
            count = models.ComponentMaster.objects.filter(componentnumber=dataNew['componentnumber']).count()
            if count > 0 and dataNew['componentnumber'] != dataOld.componentnumber:
                error['exist'] = 'This component already exist!'
            else:
                dataOld.componentnumber = dataNew['componentnumber']
                dataOld.componentname = dataNew['componentname']
                dataOld.isequipmentlinked = dataNew['link']
                dataOld.componentdesc = dataNew['description']
                dataOld.risktarget = dataNew['risktarget']
                dataOld.save()
                return redirect('componentDisplay', equipmentID=dataOld.equipmentid_id)
    except:
        raise Http404
    return render(request, 'FacilityUI/component/componentEdit.html',
                  {'page': 'editComp', 'data': dataNew, 'error': error, 'equipmentID': dataOld.equipmentid_id,
                   'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                   'facilityID': models.EquipmentMaster.objects.get(equipmentid=dataOld.equipmentid_id).facilityid_id})

def ImportScada(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        componentID = models.RwAssessment.objects.get(id= proposalID).componentid_id
        equipmentID = models.RwAssessment.objects.get(id= proposalID).equipmentid_id
        return render(request,'FacilityUI/proposal/importScada.html',
                      {'page':'importScada','componentID':componentID,'equipmentID':equipmentID,
                       'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification})
    except Exception as e:
        print(e)
def ListProposal(request, componentID):
    # if not request.session.session_key:
    #     return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        rwass = models.RwAssessment.objects.filter(componentid=componentID)
        data = []
        error={}
        result={}
        notice={}
        notify={}
        risk=0
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        api = models.ApiComponentType.objects.get(apicomponenttypeid=comp.apicomponenttypeid)
        equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        tank = [12,13,14,15]
        # tank = [8, 9, 12, 13, 14, 15]
        # tank = [6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 36, 38, 39]
        if '_search' in request.POST and request.POST.get('searchProposal') != "":
            search = request.POST.get('searchProposal')
            for a in rwass:
                df = models.RwFullPof.objects.filter(id=a.id)
                fc = models.RwFullFcof.objects.filter(id=a.id)
                dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
                if (a.proposalname == search):
                    obj1 = {}
                    obj1['id'] = a.id
                    obj1['name'] = a.proposalname
                    try:
                        obj1['lastinsp'] = a.commisstiondate.strftime('%Y-%m-%d')
                    except:
                        obj1['lastinsp'] = a.assessmentdate.strftime('%Y-%m-%d')

                    if df.count() != 0:
                        obj1['df'] = round(df[0].totaldfap1, 2)
                        obj1['gff'] = df[0].gfftotal
                        obj1['fms'] = df[0].fms
                    else:
                        obj1['df'] = 0
                        obj1['gff'] = 0
                        obj1['fms'] = 0
                    if fc.count() != 0:
                        obj1['fc'] = round(fc[0].fcofvalue, 2)
                    else:
                        obj1['fc'] = 0
                    if dm.count() != 0:
                        obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
                        obj1['lastinsp'] = dm[0].lastinspdate.date().strftime('%Y-%m-%d')
                    else:
                        # obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                        obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=16)).strftime(
                            '%Y-%m-%d')  # cuong sua
                        obj1['lastinsp'] = equip.commisstiondate.date().strftime('%Y-%m-%d')  # cuong them vao
                    obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
                    data.append(obj1)
            i = 0
            for b in data:
                i = i + 1
            # print(i)
            if i:
                result['data'] = str(i) + " search results for " + search
            else:
                # print("go error")
                error['exist'] = "Can not find " + "'" + search + "'" + " in any document"
        else:
            list = []
            q = 'SELECT ID,AssessmentDate FROM rw_assessment where ComponentID= %s order by AssessmentDate asc'
            Query = models.RwAssessment.objects.raw(q, [componentID])
            for a in Query:
                list.append(a.id)
            for a in list:
                rwassessment = models.RwAssessment.objects.get(id=a)
                df = models.RwFullPof.objects.filter(id=a)
                fc = models.RwFullFcof.objects.filter(id=a)
                dm = models.RwDamageMechanism.objects.filter(id_dm=a)
                obj1 = {}
                obj1['id'] = a
                obj1['name'] = rwassessment.proposalname
                try:
                    # obj1['lastinsp'] = rwassessment.commisstiondate.strftime('%Y-%m-%d')
                    obj1['lastinsp'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
                except:
                    obj1['lastinsp'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
                if df.count() != 0:
                    obj1['df'] = round(df[0].totaldfap1, 2)
                    obj1['gff'] = df[0].gfftotal
                    obj1['fms'] = df[0].fms
                else:
                    obj1['df'] = 0
                    obj1['gff'] = 0
                    obj1['fms'] = 0
                if fc.count() != 0:
                    obj1['fc'] = round(fc[0].fcofvalue, 2)
                else:
                    obj1['fc'] = 0
                if dm.count() != 0:
                    obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
                    # obj1['lastinsp'] = dm[0].lastinspdate.date().strftime('%Y-%m-%d')
                    obj1['lastinsp'] = dm[0].lastinspdate.date().strftime('%Y-%m-%d')
                else:
                    # obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                    obj1['duedate'] = (rwassessment.assessmentdate.date() + relativedelta(years=16)).strftime(
                        '%Y-%m-%d')  # cuong sua
                    # obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')  # cuong them vao
                    try:
                        # obj1['lastinsp'] = rwassessment.commisstiondate.strftime('%Y-%m-%d')  # cuong them vao
                        obj1['lastinsp'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')  # cuong them vao
                    except:
                        rwassessment.assessmentdate.strftime('%Y-%m-%d')
                obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
                data.append(obj1)
        if data:
            for a in data:
                if a['fc']==0:
                    risk = 0
                    break
                else:
                    risk = 1
        else:
            risk=1
        # print(risk)
        pagidata = Paginator(data, 25)
        pagedata = request.GET.get('page', 1)
        try:
            obj = pagidata.page(pagedata)
        except PageNotAnInteger:
            obj = pagidata.page(1)
        except EmptyPage:
            obj = pagedata.page(pagidata.num_pages)
        if comp.componenttypeid_id in tank:
            istank = 1
        else:
            istank = 0
        if comp.componenttypeid_id == 13:
            isshell = 1
        else:
            isshell = 0
        if request.POST:
            if '_delete' in request.POST:
                for a in rwass:
                    if request.POST.get('%d' % a.id):
                        a.delete()
                return redirect('proposalDisplay', componentID=componentID)
            elif '_cancel' in request.POST:
                return redirect('proposalDisplay', componentID=componentID)
            elif '_edit' in request.POST:
                for a in rwass:
                    if request.POST.get('%d' % a.id):
                        if istank:  # tuansua
                            # print("tank")
                            return redirect('tankEdit', proposalID=a.id)
                        elif isshell:
                            # print("tank")
                            return redirect('tankEdit', proposalID=a.id)
                        else:
                            # print("nottank")
                            return redirect('prosalEdit', proposalID=a.id)
            elif '_new' in request.POST:
                try:
                    if api.apicomponenttypename == 'TANKBOTTOM':
                        return redirect('tankNew', componentID=componentID)
                    elif isshell:
                        return redirect('tankNew', componentID=componentID)
                    else:
                        return redirect('proposalNew', componentID=componentID)
                except Exception as e:
                    print(e)
                    raise Http404
            elif '_newscada' in request.POST:
                # print("newscada")
                try:
                    scada_data = models.ZScada.objects.filter(Componentid=componentID)
                    if scada_data.count()== 0:
                        notice['warning'] = "First you need creat a Scada connection. Then you can import data to proposal selected!"
                    else:
                        list = []
                        listData = []
                        for a in rwass:
                            if request.POST.get('%d' % a.id):
                                print(a.id)
                                scada_data_load = models.ZScada.objects.filter(Componentid=componentID)[0]
                                print(scada_data_load.FileName)
                                gc = gsp.service_account(filename='media//my-project-rbi-192cc68f784c.json')
                                print('3')
                                worksheet = gc.open(scada_data_load.FileName).sheet1
                                rows = worksheet.get_all_values()
                                for b in rows[0]:
                                    list.append(b)
                                del rows[0]
                                for b in rows:
                                    listData.append(b)
                                # ExcelImport.ImportSCADA(url_file, a.id)
                                ExcelImport.ImportSCADA_extend(listData, a.id)
                                notice['scada'] = "Successful data upload, please recalculate for just selected proposal!"
                except Exception as e:
                    print(e)
                    notify['error'] = " Something is not right. Please check your file name and share name's file to 'cuong-270@my-project-rbicuong.iam.gserviceaccount.com' account!.Check your excel format!"
            elif '_clone' in request.POST:
                print('vao clone')
                for a in rwass:
                    if request.POST.get('%d' % a.id):
                        print(a.id)
                        rwassessment = models.RwAssessment.objects.get(id=a.id)
                        rwassessment.id = None
                        rwassessment.proposalname = "Proposal Copy " +str(datetime.now().strftime('%m-%d-%y,%H:%M:%S'))
                        rwassessment.save()
                        rwequipment = models.RwEquipment.objects.get(id=a.id)
                        rwequipment.id = rwassessment
                        rwequipment.save()
                        rwcomponent = models.RwComponent.objects.get(id=a.id)
                        rwcomponent.id = rwassessment
                        rwcomponent.save()
                        rwstream = models.RwStream.objects.get(id=a.id)
                        rwstream.id = rwassessment
                        rwstream.save()
                        rwexcor = models.RwExtcorTemperature.objects.get(id=a.id)
                        rwexcor.id = rwassessment
                        rwexcor.save()
                        rwcoat = models.RwCoating.objects.get(id=a.id)
                        rwcoat.id = rwassessment
                        rwcoat.save()
                        rwmaterial = models.RwMaterial.objects.get(id=a.id)
                        rwmaterial.id = rwassessment
                        rwmaterial.save()
                        component = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
                        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
                            rwinputcaTank = models.RwInputCaTank.objects.get(id=a.id)
                            rwinputcaTank.id = rwassessment
                            rwinputcaTank.save()
                        else:
                            rwinputca = models.RwInputCaLevel1.objects.get(id=a.id)
                            rwinputca.id = rwassessment
                            rwinputca.save()
                        df = models.RwFullPof.objects.get(id=a.id)
                        df.id = rwassessment
                        df.save()
                        fc = models.RwFullFcof.objects.get(id=a.id)
                        fc.id = rwassessment
                        fc.save()
                        dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
                        for b in dm:
                            b.id_dm = rwassessment
                            b.save()
                return redirect('proposalDisplay', componentID=componentID)
            elif '_regular' in request.POST:
                if request.method == 'POST':
                    if request.POST.get('Verify')=="True":
                        mode = 1
                    else:
                        mode = 0
                    timer = request.POST.get('Timer')
                    veri_peri = models.VerificationPeriodically(siteid_id=equip.siteid_id,
                                                mode=mode,timer=timer)
                    veri_peri.save()
                    siteid=equip.siteid_id
                    # print(siteid)
                t1 = threading.Thread(target=RegularVerification,args=(siteid,))
                t1.setDaemon(True)
                t1.start()
                # print("done")
                return redirect('proposalDisplay', componentID=componentID)
            elif '_export' in request.POST:
                try:
                    for a in rwass:
                        if request.POST.get('%d' % a.id):
                            if istank or isshell:
                                print('TUng= ', a.id)
                                PdfFileReader.dataTank(a.id)
                            else:
                                print('id= ', a.id)
                                PdfFileReader.data(a.id)
                    with open('cloud/process/ExportPDF/Baocao.pdf', 'rb') as pdf:
                        response = HttpResponse(pdf.read(), content_type='application/pdf')
                        response['Content-Disposition'] = 'filename=Baocao.pdf'
                        return response
                except:
                    raise Http404()
            else:
                # print("recal")
                for a in rwass:
                    if request.POST.get('%d' % a.id):
                        ReCalculate.ReCalculate(a.id, request)
                return redirect('proposalDisplay', componentID=componentID)
            # print()
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/proposal/proposalListDisplay.html',
                  {'page': 'listProposal', 'obj': obj, 'istank': istank, 'isshell': isshell,'notify':notify,
                   'componentID': componentID,'error':error,'result':result,'risk':risk,'siteID':faci.siteid_id,
                   'equipmentID': comp.equipmentid_id, 'comp': comp, 'equip': equip, 'faci': faci,'notice':notice,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})


def NewProposal(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        Fluid = ["Acid", "AlCl3", "C1-C2", "C13-C16", "C17-C25", "C25+", "C3-C4", "C5", "C6-C8", "C9-C12", "CO", "DEE",
                 "EE", "EEA", "EG", "EO", "H2", "H2S", "HCl", "HF", "Methanol", "Nitric Acid", "NO2", "Phosgene", "PO",
                 "Pyrophoric", "Steam", "Styrene", "TDI", "Water", "Caustic", "Aromatics", "Ammonia", "Chlorine"]
        ToxicFluid = ["H2S", "HF Acid", "CO", "HCl", "Nitric Acid", "AlCl3", "NO2", "Phosgene", "TDI", "PO", "EE",
                      "EO", "Pyrophoric", "Ammonia", "Chlorine"]
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        target = models.FacilityRiskTarget.objects.get(
            facilityid=models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).facilityid_id)
        datafaci = models.Facility.objects.get(
            facilityid=models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).facilityid_id)
        data = {}
        if request.method == 'POST':
            data['assessmentname'] = request.POST.get('AssessmentName')
            data['assessmentdate'] = request.POST.get('assessmentdate')
            data['commisstiondate'] = request.POST.get('CommisstionDate')
            data['assessmentmethod'] = request.POST.get('AssessmentMethod')
            data['apicomponenttypeid'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            data['equipmentType'] = models.EquipmentType.objects.get(equipmenttypeid=models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            data['riskperiod'] = request.POST.get('RiskAnalysisPeriod')
            if request.POST.get('adminControlUpset'):
                adminControlUpset = 1
            else:
                adminControlUpset = 0

            if request.POST.get('ContainsDeadlegs'):
                containsDeadlegs = 1
            else:
                containsDeadlegs = 0

            if request.POST.get('Highly'):
                HighlyEffe = 1
            else:
                HighlyEffe = 0
            if request.POST.get('CylicOper'):
                cylicOp = 1
            else:
                cylicOp = 0

            if request.POST.get('Downtime'):
                downtime = 1
            else:
                downtime = 0

            if request.POST.get('SteamedOut'):
                steamOut = 1
            else:
                steamOut = 0

            if request.POST.get('HeatTraced'):
                heatTrace = 1
            else:
                heatTrace = 0

            if request.POST.get('PWHT'):
                pwht = 1
            else:
                pwht = 0

            if request.POST.get('InterfaceSoilWater'):
                interfaceSoilWater = 1
            else:
                interfaceSoilWater = 0

            if request.POST.get('PressurisationControlled'):
                pressureControl = 1
            else:
                pressureControl = 0

            if request.POST.get('LOM'):
                linerOnlineMoniter = 1
            else:
                linerOnlineMoniter = 0

            if request.POST.get('EquOper'):
                lowestTemp = 1
            else:
                lowestTemp = 0

            if request.POST.get('PresenceofSulphidesShutdow'):
                presentSulphidesShutdown = 1
            else:
                presentSulphidesShutdown = 0

            if request.POST.get('MFTF'):
                materialExposed = 1
            else:
                materialExposed = 0

            if request.POST.get('PresenceofSulphides'):
                presentSulphide = 1
            else:
                presentSulphide = 0

            data['minTemp'] = request.POST.get('Min')
            data['ExternalEnvironment'] = request.POST.get('ExternalEnvironment')
            data['ThermalHistory'] = request.POST.get('ThermalHistory')
            data['OnlineMonitoring'] = request.POST.get('OnlineMonitoring')
            data['EquipmentVolumn'] = request.POST.get('EquipmentVolume')

            ### component properties
            data['normaldiameter'] = request.POST.get('NominalDiameter')
            data['normalthick'] = request.POST.get('NominalThickness')
            data['currentthick'] = request.POST.get('CurrentThickness')
            data['tmin'] = request.POST.get('tmin')
            data['currentrate'] = request.POST.get('CurrentRate')
            data['deltafatt'] = request.POST.get('DeltaFATT')
            data['weldjointeff'] = request.POST.get('WeldJointEff')
            data['allowablestresss'] = request.POST.get('AllowableStress')
            data['structuralthickness'] = request.POST.get('StructuralThickness')
            data['compvolume'] = request.POST.get('CompVolume')
            if request.POST.get('DFDI'):
                damageDuringInsp = 1
            else:
                damageDuringInsp = 0

            if request.POST.get('ChemicalInjection'):
                chemicalInj = 1
            else:
                chemicalInj = 0

            if request.POST.get('PresenceCracks'):
                crackpresent = 1
            else:
                crackpresent = 0

            if request.POST.get('HFICI'):
                HFICI = 1
            else:
                HFICI = 0

            if request.POST.get('HTHADamage'):
                hthadamage = 1
            else:
                hthadamage = 0

            if request.POST.get('MinStructural'):
                minstruc = 1
            else:
                minstruc = 0

            if request.POST.get('P1AndP3'):
                p1andp3 = 1
            else:
                p1andp3 = 0

            if request.POST.get('EquipmentRequirements'):
                equipmentrequire = 1
            else:
                equipmentrequire = 0

            if request.POST.get('OperatingConditions'):
                operatingcondition = 1
            else:
                operatingcondition = 0

            if request.POST.get('CETtheMAWP'):
                cet = 1
            else:
                cet = 0

            if request.POST.get('CyclicService'):
                cyclicservice = 1
            else:
                cyclicservice = 0

            if request.POST.get('EquipmentorCircuit'):
                equipmentorCircuit = 1
            else:
                equipmentorCircuit = 0

            data['MaxBrinell'] = request.POST.get('MBHW')
            data['complex'] = request.POST.get('ComplexityProtrusions')
            data['CylicLoad'] = request.POST.get('CLC')
            data['branchDiameter'] = request.POST.get('BranchDiameter')
            data['joinTypeBranch'] = request.POST.get('JTB')
            data['numberPipe'] = request.POST.get('NFP')
            data['pipeCondition'] = request.POST.get('PipeCondition')
            data['prevFailure'] = request.POST.get('PreviousFailures')

            if request.POST.get('VASD'):
                visibleSharkingProtect = 1
            else:
                visibleSharkingProtect = 0

            data['shakingPipe'] = request.POST.get('ASP')
            data['timeShakingPipe'] = request.POST.get('ATSP')
            data['correctActionMitigate'] = request.POST.get('CAMV')
            data['confidencecr'] = request.POST.get('ConfidenceCR')

            # OP condition
            data['maxOT'] = request.POST.get('MaxOT')
            data['maxOP'] = request.POST.get('MaxOP')
            data['minOT'] = request.POST.get('MinOT')
            data['minOP'] = request.POST.get('MinOP')
            data['OpHydroPressure'] = request.POST.get('OHPP')
            data['criticalTemp'] = request.POST.get('CET')
            data['flowrate'] = request.POST.get('FlowRate')
            data['OP1'] = request.POST.get('Operating1')
            data['OP2'] = request.POST.get('Operating2')
            data['OP3'] = request.POST.get('Operating3')
            data['OP4'] = request.POST.get('Operating4')
            data['OP5'] = request.POST.get('Operating5')
            data['OP6'] = request.POST.get('Operating6')
            data['OP7'] = request.POST.get('Operating7')
            data['OP8'] = request.POST.get('Operating8')
            data['OP9'] = request.POST.get('Operating9')
            data['OP10'] = request.POST.get('Operating10')

            # material
            data['material'] = request.POST.get('Material')
            data['maxDesignTemp'] = request.POST.get('MaxDesignTemp')
            data['minDesignTemp'] = request.POST.get('MinDesignTemp')
            data['designPressure'] = request.POST.get('DesignPressure')
            data['tempRef'] = request.POST.get('ReferenceTemperature')
            data['BrittleFacture'] = request.POST.get('BFGT')
            data['CA'] = request.POST.get('CorrosionAllowance')
            data['sigmaPhase'] = request.POST.get('SigmaPhase')
            data['yieldstrength'] = request.POST.get('YieldStrength')
            data['tensilestrength'] = request.POST.get('TensileStrength')
            if request.POST.get('CoLAS'):
                cacbonAlloy = 1
            else:
                cacbonAlloy = 0

            if request.POST.get('AusteniticSteel'):
                austeniticStell = 1
            else:
                austeniticStell = 0

            if request.POST.get('SusceptibleTemper'):
                suscepTemp = 1
            else:
                suscepTemp = 0

            if request.POST.get('NickelAlloy'):
                nickelAlloy = 1
            else:
                nickelAlloy = 0

            if request.POST.get('Chromium'):
                chromium = 1
            else:
                chromium = 0

            data['sulfurContent'] = request.POST.get('SulfurContent')
            data['heatTreatment'] = request.POST.get('heatTreatment')

            if request.POST.get('MGTEHTHA'):
                materialHTHA = 1
            else:
                materialHTHA = 0

            data['HTHAMaterialGrade'] = request.POST.get('HTHAMaterialGrade')

            if request.POST.get('MaterialPTA'):
                materialPTA = 1
            else:
                materialPTA = 0

            data['PTAMaterialGrade'] = request.POST.get('PTAMaterialGrade')
            data['materialCostFactor'] = request.POST.get('MaterialCostFactor')

            # Coating, Clading
            if request.POST.get('InternalCoating'):
                InternalCoating = 1
            else:
                InternalCoating = 0

            if request.POST.get('ExternalCoating'):
                ExternalCoating = 1
            else:
                ExternalCoating = 0

            data['ExternalCoatingID'] = request.POST.get('ExternalCoatingID')
            data['ExternalCoatingQuality'] = request.POST.get('ExternalCoatingQuality')

            if request.POST.get('SCWD'):
                supportMaterial = 1
            else:
                supportMaterial = 0

            if request.POST.get('InternalCladding'):
                InternalCladding = 1
            else:
                InternalCladding = 0
            data['claddingthickness'] = request.POST.get('CladdingThickness')
            data['CladdingCorrosionRate'] = request.POST.get('CladdingCorrosionRate')

            if request.POST.get('InternalLining'):
                InternalLining = 1
            else:
                InternalLining = 0

            data['InternalLinerType'] = request.POST.get('InternalLinerType')
            data['InternalLinerCondition'] = request.POST.get('InternalLinerCondition')

            if request.POST.get('ExternalInsulation') == "on" or request.POST.get('ExternalInsulation') == 1:
                ExternalInsulation = 1
            else:
                ExternalInsulation = 0

            if request.POST.get('ICC'):
                InsulationCholride = 1
            else:
                InsulationCholride = 0

            data['ExternalInsulationType'] = request.POST.get('ExternalInsulationType')
            data['InsulationCondition'] = request.POST.get('InsulationCondition')

            # Steam
            data['NaOHConcentration'] = request.POST.get('NaOHConcentration')
            data['ReleasePercentToxic'] = request.POST.get('RFPT')
            data['ChlorideIon'] = request.POST.get('ChlorideIon')
            data['CO3'] = request.POST.get('CO3')
            data['H2SContent'] = request.POST.get('H2SContent')
            data['PHWater'] = request.POST.get('PHWater')

            if request.POST.get('EAGTA'):
                exposureAcid = 1
            else:
                exposureAcid = 0

            if request.POST.get('ToxicConstituents'):
                ToxicConstituents = 1
            else:
                ToxicConstituents = 0

            data['ExposureAmine'] = request.POST.get('ExposureAmine')
            data['AminSolution'] = request.POST.get('ASC')

            if request.POST.get('APDO'):
                aquaDuringOP = 1
            else:
                aquaDuringOP = 0

            if request.POST.get('APDSD'):
                aquaDuringShutdown = 1
            else:
                aquaDuringShutdown = 0

            if request.POST.get('EnvironmentCH2S'):
                EnvironmentCH2S = 1
            else:
                EnvironmentCH2S = 0

            if request.POST.get('PHA'):
                presentHF = 1
            else:
                presentHF = 0

            if request.POST.get('PresenceCyanides'):
                presentCyanide = 1
            else:
                presentCyanide = 0

            if request.POST.get('PCH'):
                processHydrogen = 1
            else:
                processHydrogen = 0

            if request.POST.get('ECCAC'):
                environCaustic = 1
            else:
                environCaustic = 0

            if request.POST.get('ESBC'):
                exposedSulfur = 1
            else:
                exposedSulfur = 0

            if request.POST.get('MEFMSCC'):
                materialExposedFluid = 1
            else:
                materialExposedFluid = 0
            # CA
            data['ModelFluid'] = request.POST.get('APIFluid')
            data['MassInventory'] = request.POST.get('MassInventory')
            data['ToxicFluid'] = request.POST.get('ToxicFluid')
            data['ToxicFluidPercent'] = request.POST.get('ToxicFluidPercent')
            data['PhaseStorage'] = request.POST.get('phaseOfFluid')
            data['LiquidLevel'] = request.POST.get('LiquidLevel')
            data['MassComponent'] = request.POST.get('MassComponent')
            data['EquipmentCost'] = request.POST.get('EquipmentCost')
            data['MittigationSystem'] = request.POST.get('MittigationSystem')
            data['ProductionCost'] = request.POST.get('ProductionCost')
            data['InjureCost'] = request.POST.get('InjureCost')
            data['ReleaseDuration'] = request.POST.get('ReleaseDuration')
            data['EnvironmentCost'] = request.POST.get('EnvironmentCost')
            data['PersonDensity'] = request.POST.get('PersonDensity')
            data['ProcessUnit'] = request.POST.get('ProcessUnit')
            data['OutageMulti'] = request.POST.get('OutageMulti')
            if request.POST.get(
                    'DetectionType') == "Intrumentation designed specifically to detect material losses by changes in operating conditions (i.e loss of pressure or flow) in the system":
                detectiontype = 'A'
            elif request.POST.get(
                    'DetectionType') == "Suitably located detectors to determine when the material is present outside the pressure-containing envelope":
                detectiontype = 'B'
            else:
                detectiontype = 'C'
            data['DetectionType'] = detectiontype
            if request.POST.get(
                    'IsolationType') == "Isolation or shutdown systerms activated directly from process instrumentation or detectors, with no operator intervention":
                isolationtype = 'A'
            elif request.POST.get(
                    'IsolationType') == "Isolation or shutdown systems activated by operators in the control room or other suitable locations remote from the leak":
                isolationtype = 'B'
            else:
                isolationtype = 'C'
            data['IsolationType'] = isolationtype
            if request.POST.get(
                    'MitigationSystem') == "Inventory blowdown, couple with isolation system activated remotely or automatically":
                mitigationsystem = 0.25
            elif request.POST.get('MitigationSystem') == "Fire water deluge system and monitors":
                mitigationsystem = 0.2
            elif request.POST.get('MitigationSystem') == "Fire water monitors only":
                mitigationsystem = 0.05
            else:
                mitigationsystem = 0.15
            data['MitigationSystem'] = mitigationsystem
            rwassessment = models.RwAssessment(equipmentid_id=comp.equipmentid_id, componentid_id=comp.componentid,
                                               assessmentdate=data['assessmentdate'],commisstiondate=data['commisstiondate'],
                                               riskanalysisperiod=data['riskperiod'],
                                               isequipmentlinked=comp.isequipmentlinked,
                                               assessmentmethod=data['assessmentmethod'],
                                               proposalname=data['assessmentname'])
            rwassessment.save()
            rwequipment = models.RwEquipment(id=rwassessment, commissiondate=models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate,
                                             adminupsetmanagement=adminControlUpset, containsdeadlegs=containsDeadlegs,
                                             cyclicoperation=cylicOp, highlydeadleginsp=HighlyEffe,
                                             downtimeprotectionused=downtime,
                                             externalenvironment=data['ExternalEnvironment'],
                                             heattraced=heatTrace, interfacesoilwater=interfaceSoilWater,
                                             lineronlinemonitoring=linerOnlineMoniter,
                                             materialexposedtoclext=materialExposed,
                                             minreqtemperaturepressurisation=data['minTemp'],
                                             onlinemonitoring=data['OnlineMonitoring'],
                                             presencesulphideso2=presentSulphide,
                                             presencesulphideso2shutdown=presentSulphidesShutdown,
                                             pressurisationcontrolled=pressureControl, pwht=pwht,
                                             steamoutwaterflush=steamOut,
                                             managementfactor=datafaci.managementfactor,
                                             thermalhistory=data['ThermalHistory'],
                                             yearlowestexptemp=lowestTemp, volume=data['EquipmentVolumn'])
            rwequipment.save()
            rwcomponent = models.RwComponent(id=rwassessment, nominaldiameter=data['normaldiameter'],
                                             nominalthickness=data['normalthick'],
                                             currentthickness=data['currentthick'],
                                             minreqthickness=data['tmin'], currentcorrosionrate=data['currentrate'],
                                             branchdiameter=data['branchDiameter'],
                                             branchjointtype=data['joinTypeBranch'],
                                             brinnelhardness=data['MaxBrinell'],
                                             brittlefracturethickness=data['BrittleFacture'],
                                             deltafatt=data['deltafatt'], chemicalinjection=chemicalInj,
                                             highlyinjectioninsp=HFICI, complexityprotrusion=data['complex'],
                                             correctiveaction=data['correctActionMitigate'], crackspresent=crackpresent,
                                             cyclicloadingwitin15_25m=data['CylicLoad'],
                                             damagefoundinspection=damageDuringInsp,
                                             numberpipefittings=data['numberPipe'],
                                             pipecondition=data['pipeCondition'],
                                             previousfailures=data['prevFailure'], shakingamount=data['shakingPipe'],
                                             shakingdetected=visibleSharkingProtect,
                                             shakingtime=data['timeShakingPipe'],
                                             weldjointefficiency=data['weldjointeff'],
                                             allowablestress=data['allowablestresss'],
                                             structuralthickness=data['structuralthickness'],
                                             componentvolume=data['compvolume'], hthadamage=hthadamage,
                                             minstructuralthickness=minstruc,
                                             fabricatedsteel=p1andp3, equipmentsatisfied=equipmentrequire,
                                             nominaloperatingconditions=operatingcondition,
                                             cetgreaterorequal=cet, cyclicservice=cyclicservice,
                                             equipmentcircuitshock=equipmentorCircuit,
                                             confidencecorrosionrate=data['confidencecr'])
            rwcomponent.save()
            rwstream = models.RwStream(id=rwassessment, aminesolution=data['AminSolution'],
                                       aqueousoperation=aquaDuringOP,
                                       aqueousshutdown=aquaDuringShutdown, toxicconstituent=ToxicConstituents,
                                       caustic=environCaustic,
                                       chloride=data['ChlorideIon'], co3concentration=data['CO3'],
                                       cyanide=presentCyanide,
                                       exposedtogasamine=exposureAcid, exposedtosulphur=exposedSulfur,
                                       exposuretoamine=data['ExposureAmine'],
                                       h2s=EnvironmentCH2S, h2sinwater=data['H2SContent'], hydrogen=processHydrogen,
                                       hydrofluoric=presentHF, materialexposedtoclint=materialExposedFluid,
                                       maxoperatingpressure=data['maxOP'],
                                       maxoperatingtemperature=float(data['maxOT']),
                                       minoperatingpressure=float(data['minOP']),
                                       minoperatingtemperature=data['minOT'],
                                       criticalexposuretemperature=data['criticalTemp'],
                                       naohconcentration=data['NaOHConcentration'],
                                       releasefluidpercenttoxic=float(data['ReleasePercentToxic']),
                                       waterph=float(data['PHWater']),
                                       h2spartialpressure=float(data['OpHydroPressure']),
                                       flowrate=float(data['flowrate']), liquidlevel=float(data['LiquidLevel']),
                                       storagephase=data['PhaseStorage'])
            rwstream.save()
            rwexcor = models.RwExtcorTemperature(id=rwassessment, minus12tominus8=data['OP1'],
                                                 minus8toplus6=data['OP2'],
                                                 plus6toplus32=data['OP3'], plus32toplus71=data['OP4'],
                                                 plus71toplus107=data['OP5'],
                                                 plus107toplus121=data['OP6'], plus121toplus135=data['OP7'],
                                                 plus135toplus162=data['OP8'], plus162toplus176=data['OP9'],
                                                 morethanplus176=data['OP10'])
            rwexcor.save()
            rwcoat = models.RwCoating(id=rwassessment, externalcoating=ExternalCoating,
                                      externalinsulation=ExternalInsulation,
                                      internalcladding=InternalCladding, internalcoating=InternalCoating,
                                      internallining=InternalLining,
                                      externalcoatingdate=data['ExternalCoatingID'],
                                      externalcoatingquality=data['ExternalCoatingQuality'],
                                      externalinsulationtype=data['ExternalInsulationType'],
                                      insulationcondition=data['InsulationCondition'],
                                      insulationcontainschloride=InsulationCholride,
                                      internallinercondition=data['InternalLinerCondition'],
                                      internallinertype=data['InternalLinerType'],
                                      claddingcorrosionrate=data['CladdingCorrosionRate'],
                                      supportconfignotallowcoatingmaint=supportMaterial,
                                      claddingthickness=data['claddingthickness'])
            rwcoat.save()

            rwmaterial = models.RwMaterial(id=rwassessment, corrosionallowance=data['CA'],
                                           materialname=data['material'],
                                           designpressure=data['designPressure'],
                                           designtemperature=data['maxDesignTemp'],
                                           mindesigntemperature=data['minDesignTemp'],
                                           sigmaphase=data['sigmaPhase'],
                                           sulfurcontent=data['sulfurContent'], heattreatment=data['heatTreatment'],
                                           referencetemperature=data['tempRef'],
                                           ptamaterialcode=data['PTAMaterialGrade'],
                                           hthamaterialcode=data['HTHAMaterialGrade'], ispta=materialPTA,
                                           ishtha=materialHTHA,
                                           austenitic=austeniticStell, temper=suscepTemp, carbonlowalloy=cacbonAlloy,
                                           nickelbased=nickelAlloy, chromemoreequal12=chromium,
                                           costfactor=data['materialCostFactor'],
                                           yieldstrength=data['yieldstrength'], tensilestrength=data['tensilestrength'])
            rwmaterial.save()
            rwinputca = models.RwInputCaLevel1(id=rwassessment,api_fluid = data['ModelFluid'],
                                               release_duration=data['ReleaseDuration'],
                                               detection_type=data['DetectionType'],
                                               isulation_type=data['IsolationType'],
                                               mitigation_system=data['MittigationSystem'],
                                               equipment_cost=data['EquipmentCost'], injure_cost=data['InjureCost'],
                                               evironment_cost=data['EnvironmentCost'],
                                               personal_density=data['PersonDensity'],
                                               material_cost=data['materialCostFactor'],
                                               production_cost=data['ProductionCost'],
                                               mass_inventory=data['MassInventory'],
                                               mass_component=data['MassComponent'],
                                               stored_pressure=float(data['minOP']) * 6.895, stored_temp=data['minOT'],
                                               model_fluid=data['ModelFluid'], toxic_fluid=data['ToxicFluid'],
                                               toxic_percent=float(data['ToxicFluidPercent']),
                                               process_unit=float(data['ProcessUnit']),
                                               outage_multiplier=float(data['OutageMulti']))
            rwinputca.save()
            ReCalculate.ReCalculate(rwassessment.id, request)
            return redirect('damgeFactor', proposalID=rwassessment.id)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/proposal/proposalNormalNew.html',
                  {'page': 'newProposal', 'api': Fluid, 'componentID': componentID, 'equipmentID': comp.equipmentid_id,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                   'toxicfluid': ToxicFluid})


def NewTank(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        eq = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        target = models.FacilityRiskTarget.objects.get(facilityid=eq.facilityid_id)
        datafaci = models.Facility.objects.get(facilityid=eq.facilityid_id)
        data = {}
        isshell = False
        if comp.componenttypeid_id == 13:
            isshell = True
        if request.method == 'POST':
            # Data Assessment
            data['confidencecr'] = request.POST.get('ConfidenceCR')  # bo sung level of confident for tankbottom
            data['assessmentName'] = request.POST.get('AssessmentName')
            data['assessmentdate'] = request.POST.get('assessmentdate')
            data['commisstiondate'] = request.POST.get('CommisstionDate')
            data['riskperiod'] = request.POST.get('RiskAnalysisPeriod')
            data['assessmentmethod'] = request.POST.get('AssessmentMethod')
            data['apicomponenttypeid'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            data['equipmenttype'] = models.EquipmentType.objects.get(
                equipmenttypeid=eq.equipmenttypeid_id).equipmenttypename
            # Data Equipment Properties
            if request.POST.get('Admin'):
                adminControlUpset = 1
            else:
                adminControlUpset = 0

            if request.POST.get('CylicOper'):
                cylicOp = 1
            else:
                cylicOp = 0

            if request.POST.get('Highly'):
                highlyDeadleg = 1
            else:
                highlyDeadleg = 0

            if request.POST.get('Steamed'):
                steamOutWater = 1
            else:
                steamOutWater = 0
            if request.POST.get('Downtime'):
                downtimeProtect = 1
            else:
                downtimeProtect = 0

            if request.POST.get('PWHT'):
                pwht = 1
            else:
                pwht = 0

            if request.POST.get('HeatTraced'):
                heatTrace = 1
            else:
                heatTrace = 0

            data['distance'] = request.POST.get('Distance')

            if request.POST.get('InterfaceSoilWater'):
                interfaceSoilWater = 1
            else:
                interfaceSoilWater = 0

            data['soiltype'] = request.POST.get('typeofSoil')

            if request.POST.get('PressurisationControlled'):
                pressureControl = 1
            else:
                pressureControl = 0

            data['minRequireTemp'] = request.POST.get('MinReq')

            if request.POST.get('lowestTemp'):
                lowestTemp = 1
            else:
                lowestTemp = 0

            if request.POST.get('MFTF'):
                materialChlorineExt = 1
            else:
                materialChlorineExt = 0

            if request.POST.get('LOM'):
                linerOnlineMonitor = 1
            else:
                linerOnlineMonitor = 0

            if request.POST.get('PresenceofSulphides'):
                presenceSulphideOP = 1
            else:
                presenceSulphideOP = 0

            if request.POST.get('PresenceofSulphidesShutdow'):
                presenceSulphideShut = 1
            else:
                presenceSulphideShut = 0

            if request.POST.get('ComponentWelded'):
                componentWelded = 1
            else:
                componentWelded = 0

            if request.POST.get('TMA'):
                tankIsMaintain = 1
            else:
                tankIsMaintain = 0

            data['adjustSettlement'] = request.POST.get('AdjForSettlement')
            data['extEnvironment'] = request.POST.get('ExternalEnvironment')
            data['EnvSensitivity'] = request.POST.get('EnvironmentSensitivity')
            data['themalHistory'] = request.POST.get('ThermalHistory')
            data['onlineMonitor'] = request.POST.get('OnlineMonitoring')
            data['equipmentVolumn'] = request.POST.get('EquipmentVolume')
            # Component Properties
            data['structuralthickness'] = request.POST.get('StructuralThickness')
            data['tankDiameter'] = request.POST.get('TankDiameter')
            data['NominalThickness'] = request.POST.get('NominalThickness')
            data['currentThick'] = request.POST.get('CurrentThickness')
            data['minRequireThick'] = request.POST.get('MinReqThick')
            data['currentCorrosion'] = request.POST.get('CurrentCorrosionRate')
            data['ComponentVolume'] = request.POST.get('CompVolume')
            data['WeldJointEff'] = request.POST.get('WeldJointEff')
            data['HeightEShellC'] = request.POST.get('HeightEShellC')
            if request.POST.get('MinStructural'):
                minstruc = 1
            else:
                minstruc = 0
            if request.POST.get('DFDI'):
                damageFound = 1
            else:
                damageFound = 0

            if request.POST.get('PresenceCracks'):
                crackPresence = 1
            else:
                crackPresence = 0

            if request.POST.get('TrampElements'):
                trampElements = 1
            else:
                trampElements = 0

            if request.POST.get('ReleasePreventionBarrier'):
                preventBarrier = 1
            else:
                preventBarrier = 0

            if request.POST.get('ConcreteFoundation'):
                concreteFoundation = 1
            else:
                concreteFoundation = 0

            if request.POST.get('P1AndP3'):
                p1andp3 = 1
            else:
                p1andp3 = 0

            if request.POST.get('EquipmentRequirements'):
                equipmentrequire = 1
            else:
                equipmentrequire = 0

            if request.POST.get('OperatingConditions'):
                operatingcondition = 1
            else:
                operatingcondition = 0

            if request.POST.get('CETtheMAWP'):
                cet = 1
            else:
                cet = 0

            if request.POST.get('CyclicService'):
                cyclicservice = 1
            else:
                cyclicservice = 0

            if request.POST.get('EquipmentorCircuit'):
                equipmentorCircuit = 1
            else:
                equipmentorCircuit = 0

            data['maxBrinnelHardness'] = request.POST.get('MBHW')
            data['complexProtrusion'] = request.POST.get('ComplexityProtrusions')
            data['severityVibration'] = request.POST.get('SeverityVibration')

            # Operating condition
            data['maxOT'] = request.POST.get('MaxOT')
            data['maxOP'] = request.POST.get('MaxOP')
            data['minOT'] = request.POST.get('MinOT')
            data['minOP'] = request.POST.get('MinOP')
            data['H2Spressure'] = request.POST.get('OHPP')
            data['criticalTemp'] = request.POST.get('CET')
            data['flowrate'] = request.POST.get('FlowRate')
            data['OP1'] = request.POST.get('Operating1')
            data['OP2'] = request.POST.get('Operating2')
            data['OP3'] = request.POST.get('Operating3')
            data['OP4'] = request.POST.get('Operating4')
            data['OP5'] = request.POST.get('Operating5')
            data['OP6'] = request.POST.get('Operating6')
            data['OP7'] = request.POST.get('Operating7')
            data['OP8'] = request.POST.get('Operating8')
            data['OP9'] = request.POST.get('Operating9')
            data['OP10'] = request.POST.get('Operating10')

            # Material
            data['materialName'] = request.POST.get('materialname')
            data['maxDesignTemp'] = request.POST.get('MaxDesignTemp')
            data['minDesignTemp'] = request.POST.get('MinDesignTemp')
            data['designPressure'] = request.POST.get('DesignPressure')
            data['refTemp'] = request.POST.get('ReferenceTemperature')
            data['allowStress'] = request.POST.get('ASAT')
            data['brittleThick'] = request.POST.get('BFGT')
            data['corrosionAllow'] = request.POST.get('CorrosionAllowance')
            data['yieldstrength'] = request.POST.get('YieldStrength')
            data['tensilestrength'] = request.POST.get('TensileStrength')
            if request.POST.get('CoLAS'):
                carbonLowAlloySteel = 1
            else:
                carbonLowAlloySteel = 0

            if request.POST.get('AusteniticSteel'):
                austeniticSteel = 1
            else:
                austeniticSteel = 0

            if request.POST.get('NickelAlloy'):
                nickelAlloy = 1
            else:
                nickelAlloy = 0

            if request.POST.get('Chromium'):
                chromium = 1
            else:
                chromium = 0

            data['sulfurContent'] = request.POST.get('SulfurContent')
            data['heatTreatment'] = request.POST.get('heatTreatment')

            if request.POST.get('MGTEPTA'):
                materialPTA = 1
            else:
                materialPTA = 0

            data['PTAMaterialGrade'] = request.POST.get('PTAMaterialGrade')
            data['materialCostFactor'] = request.POST.get('MaterialCostFactor')
            data['productionCost'] = request.POST.get('ProductionCost')

            # Coating, Cladding
            if request.POST.get('InternalCoating'):
                internalCoating = 1
            else:
                internalCoating = 0

            if request.POST.get('ExternalCoating'):
                externalCoating = 1
            else:
                externalCoating = 0

            data['externalInstallDate'] = request.POST.get('ExternalCoatingID')
            data['externalCoatQuality'] = request.POST.get('ExternalCoatingQuality')

            if request.POST.get('SCWD'):
                supportCoatingMaintain = 1
            else:
                supportCoatingMaintain = 0

            if request.POST.get('InternalCladding'):
                internalCladding = 1
            else:
                internalCladding = 0
            data['CladdingThinkness'] = request.POST.get('CladdingThinkness')
            data['cladCorrosion'] = request.POST.get('CladdingCorrosionRate')

            if request.POST.get('InternalLining'):
                internalLinning = 1
            else:
                internalLinning = 0

            data['internalLinnerType'] = request.POST.get('InternalLinerType')
            data['internalLinnerCondition'] = request.POST.get('InternalLinerCondition')

            if request.POST.get('ExternalInsulation'):
                extInsulation = 1
            else:
                extInsulation = 0

            if request.POST.get('ICC'):
                InsulationContainChloride = 1
            else:
                InsulationContainChloride = 0

            data['extInsulationType'] = request.POST.get('ExternalInsulationType')
            data['insulationCondition'] = request.POST.get('InsulationCondition')
            # Stream
            data['fluid'] = request.POST.get('Fluid')
            data['fluidHeight'] = request.POST.get('FluidHeight')
            data['fluidLeaveDike'] = request.POST.get('PFLD')
            data['fluidOnsite'] = request.POST.get('PFLDRS')
            data['fluidOffsite'] = request.POST.get('PFLDGoffsite')
            data['naohConcent'] = request.POST.get('NaOHConcentration')
            data['releasePercentToxic'] = request.POST.get('RFPT')
            data['chlorideIon'] = request.POST.get('ChlorideIon')
            data['co3'] = request.POST.get('CO3')
            data['h2sContent'] = request.POST.get('H2SContent')
            data['PHWater'] = request.POST.get('PHWater')

            if request.POST.get('EAGTA'):
                exposedAmine = 1
            else:
                exposedAmine = 0

            data['amineSolution'] = request.POST.get('AmineSolution')
            data['exposureAmine'] = request.POST.get('ExposureAmine')

            if request.POST.get('APDO'):
                aqueosOP = 1
            else:
                aqueosOP = 0

            if request.POST.get('EnvironmentCH2S'):
                environtH2S = 1
            else:
                environtH2S = 0

            if request.POST.get('APDSD'):
                aqueosShut = 1
            else:
                aqueosShut = 0

            if request.POST.get('PresenceCyanides'):
                cyanidesPresence = 1
            else:
                cyanidesPresence = 0

            if request.POST.get('presenceHF'):
                presentHF = 1
            else:
                presentHF = 0

            if request.POST.get('ECCAC'):
                environtCaustic = 1
            else:
                environtCaustic = 0

            if request.POST.get('PCH'):
                processContainHydro = 1
            else:
                processContainHydro = 0

            if request.POST.get('MEFMSCC'):
                materialChlorineIntern = 1
            else:
                materialChlorineIntern = 0

            if request.POST.get('ESBC'):
                exposedSulfur = 1
            else:
                exposedSulfur = 0

            if str(data['fluid']) == "Gasoline":
                apiFluid = "C6-C8"
            elif str(data['fluid']) == "Light Diesel Oil":
                apiFluid = "C9-C12"
            elif str(data['fluid']) == "Heavy Diesel Oil":
                apiFluid = "C13-C16"
            elif str(data['fluid']) == "Fuel Oil" or str(data['fluid']) == "Crude Oil":
                apiFluid = "C17-C25"
            elif str(data['fluid']) == "Water":
                apiFluid = "Water"
            else:
                apiFluid = "C25+"
            rwassessment = models.RwAssessment(equipmentid_id=comp.equipmentid_id, componentid_id=comp.componentid,
                                               assessmentdate=data['assessmentdate'],commisstiondate=data['commisstiondate'],
                                               riskanalysisperiod=data['riskperiod'],
                                               isequipmentlinked=comp.isequipmentlinked,
                                               proposalname=data['assessmentName'],
                                               assessmentmethod=data['assessmentmethod'])
            rwassessment.save()
            rwequipment = models.RwEquipment(id=rwassessment, commissiondate=eq.commissiondate,
                                             adminupsetmanagement=adminControlUpset,
                                             cyclicoperation=cylicOp, highlydeadleginsp=highlyDeadleg,
                                             downtimeprotectionused=downtimeProtect, steamoutwaterflush=steamOutWater,
                                             pwht=pwht, heattraced=heatTrace, distancetogroundwater=data['distance'],
                                             interfacesoilwater=interfaceSoilWater, typeofsoil=data['soiltype'],
                                             pressurisationcontrolled=pressureControl,
                                             minreqtemperaturepressurisation=data['minRequireTemp'],
                                             yearlowestexptemp=lowestTemp,
                                             materialexposedtoclext=materialChlorineExt,
                                             lineronlinemonitoring=linerOnlineMonitor,
                                             presencesulphideso2=presenceSulphideOP,
                                             presencesulphideso2shutdown=presenceSulphideShut,
                                             componentiswelded=componentWelded, tankismaintained=tankIsMaintain,
                                             adjustmentsettle=data['adjustSettlement'],
                                             externalenvironment=data['extEnvironment'],
                                             environmentsensitivity=data['EnvSensitivity'],
                                             onlinemonitoring=data['onlineMonitor'],
                                             thermalhistory=data['themalHistory'],
                                             managementfactor=datafaci.managementfactor,
                                             volume=data['equipmentVolumn'])
            rwequipment.save()
            rwcomponent = models.RwComponent(id=rwassessment, nominaldiameter=data['tankDiameter'],
                                             allowablestress=data['allowStress'],
                                             nominalthickness=data['NominalThickness'],
                                             currentthickness=data['currentThick'],
                                             minreqthickness=data['minRequireThick'],
                                             currentcorrosionrate=data['currentCorrosion'],
                                             shellheight=data['HeightEShellC'], damagefoundinspection=damageFound,
                                             crackspresent=crackPresence, componentvolume=data['ComponentVolume'],
                                             weldjointefficiency=data['WeldJointEff'],
                                             # trampelements=trampElements,
                                             brittlefracturethickness=data['brittleThick'],
                                             releasepreventionbarrier=preventBarrier,
                                             concretefoundation=concreteFoundation,
                                             brinnelhardness=data['maxBrinnelHardness'],
                                             structuralthickness=data['structuralthickness'],
                                             complexityprotrusion=data['complexProtrusion'],
                                             minstructuralthickness=minstruc,
                                             severityofvibration=data['severityVibration'],
                                             fabricatedsteel=p1andp3, equipmentsatisfied=equipmentrequire,
                                             nominaloperatingconditions=operatingcondition,
                                             cetgreaterorequal=cet, cyclicservice=cyclicservice,
                                             equipmentcircuitshock=equipmentorCircuit,
                                             confidencecorrosionrate=data['confidencecr'])
            rwcomponent.save()
            rwstream = models.RwStream(id=rwassessment, maxoperatingtemperature=data['maxOT'],
                                       maxoperatingpressure=data['maxOP'],
                                       minoperatingtemperature=data['minOT'], minoperatingpressure=data['minOP'],
                                       h2spartialpressure=data['H2Spressure'],
                                       criticalexposuretemperature=data['criticalTemp'],
                                       tankfluidname=data['fluid'], fluidheight=data['fluidHeight'],
                                       fluidleavedikepercent=data['fluidLeaveDike'],
                                       fluidleavedikeremainonsitepercent=data['fluidOnsite'],
                                       fluidgooffsitepercent=data['fluidOffsite'],
                                       naohconcentration=data['naohConcent'],
                                       releasefluidpercenttoxic=data['releasePercentToxic'],
                                       chloride=data['chlorideIon'], co3concentration=data['co3'],
                                       h2sinwater=data['h2sContent'],
                                       waterph=data['PHWater'], exposedtogasamine=exposedAmine,
                                       aminesolution=data['amineSolution'],
                                       exposuretoamine=data['exposureAmine'], aqueousoperation=aqueosOP,
                                       h2s=environtH2S,
                                       aqueousshutdown=aqueosShut, cyanide=cyanidesPresence, hydrofluoric=presentHF,
                                       caustic=environtCaustic, hydrogen=processContainHydro,
                                       materialexposedtoclint=materialChlorineIntern,
                                       exposedtosulphur=exposedSulfur, flowrate=float(data['flowrate']))
            rwstream.save()
            rwexcor = models.RwExtcorTemperature(id=rwassessment, minus12tominus8=data['OP1'],
                                                 minus8toplus6=data['OP2'],
                                                 plus6toplus32=data['OP3'], plus32toplus71=data['OP4'],
                                                 plus71toplus107=data['OP5'],
                                                 plus107toplus121=data['OP6'], plus121toplus135=data['OP7'],
                                                 plus135toplus162=data['OP8'], plus162toplus176=data['OP9'],
                                                 morethanplus176=data['OP10'])
            rwexcor.save()
            rwcoat = models.RwCoating(id=rwassessment, internalcoating=internalCoating, externalcoating=externalCoating,
                                      externalcoatingdate=data['externalInstallDate'],
                                      externalcoatingquality=data['externalCoatQuality'],
                                      supportconfignotallowcoatingmaint=supportCoatingMaintain,
                                      internalcladding=internalCladding,
                                      claddingcorrosionrate=data['cladCorrosion'], internallining=internalLinning,
                                      internallinertype=data['internalLinnerType'],
                                      internallinercondition=data['internalLinnerCondition'],
                                      externalinsulation=extInsulation,
                                      insulationcontainschloride=InsulationContainChloride,
                                      externalinsulationtype=data['extInsulationType'],
                                      insulationcondition=data['insulationCondition'],
                                      claddingthickness=data['CladdingThinkness']
                                      )
            rwcoat.save()
            rwmaterial = models.RwMaterial(id=rwassessment, materialname=data['materialName'],
                                           designtemperature=data['maxDesignTemp'],
                                           mindesigntemperature=data['minDesignTemp'],
                                           designpressure=data['designPressure'],
                                           referencetemperature=data['refTemp'],
                                           # allowablestress=data['allowStress'],
                                           corrosionallowance=data['corrosionAllow'],
                                           carbonlowalloy=carbonLowAlloySteel, austenitic=austeniticSteel,
                                           nickelbased=nickelAlloy,
                                           chromemoreequal12=chromium,
                                           sulfurcontent=data['sulfurContent'], heattreatment=data['heatTreatment'],
                                           ispta=materialPTA, ptamaterialcode=data['PTAMaterialGrade'],
                                           costfactor=data['materialCostFactor'], yieldstrength=data['yieldstrength'],
                                           tensilestrength=data['tensilestrength'])
            rwmaterial.save()
            rwinputca = models.RwInputCaTank(id=rwassessment, fluid_height=data['fluidHeight'],
                                             shell_course_height=data['HeightEShellC'],
                                             tank_diametter=data['tankDiameter'], prevention_barrier=preventBarrier,
                                             environ_sensitivity=data['EnvSensitivity'],
                                             p_lvdike=data['fluidLeaveDike'], p_offsite=data['fluidOffsite'],
                                             p_onsite=data['fluidOnsite'], soil_type=data['soiltype'],
                                             tank_fluid=data['fluid'], api_fluid=apiFluid, sw=data['distance'],
                                             productioncost=data['productionCost'])
            rwinputca.save()
            # print()
            # Customize Caculate Here
            ReCalculate.ReCalculate(rwassessment.id, request)
            return redirect('damgeFactor', proposalID=rwassessment.id)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/proposal/proposalTankNew.html',
                  {'page': 'newProposal', 'isshell': isshell, 'componentID': componentID,
                   'equipmentID': comp.equipmentid_id, 'info': request.session, 'noti': noti, 'countnoti': countnoti,
                   'count': count, 'notiVerification':notiVerification,'siteid':siteid})


def EditProposal(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    old={}
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    componentID = models.RwAssessment.objects.get(id=proposalID).componentid_id
    dataCoating = models.RwCoating.objects.get(id=proposalID)
    dataEquipment = models.RwEquipment.objects.get(id=proposalID)
    dataComponent = models.RwComponent.objects.get(id=proposalID)
    dataStream = models.RwStream.objects.get(id=proposalID)
    dataMaterial = models.RwMaterial.objects.get(id=proposalID)
    dataInput=models.RwInputCaLevel1.objects.get(id=proposalID)
    try:
        old['deltafatt'] = format(dataComponent.deltafatt, '.5f')
    except:
        old['deltafatt'] = 0
    try:
        old['toxic_percent'] = format(dataInput.toxic_percent, '.5f')
    except:
        old['toxic_percent'] = 0
    try:
        old['nominaldiameter'] = format(dataComponent.nominaldiameter, '.5f')
    except:
        old['nominaldiameter'] = 0
    try:
        old['claddingthickness'] = format(dataCoating.claddingthickness, '.5f')
    except:
        old['claddingthickness'] = 0
    try:
        old['cladCorrosion'] = format(dataCoating.claddingcorrosionrate, '.5f')
    except:
        old['cladCorrosion'] = 0
    try:
        old['naohConcent'] = format(dataStream.naohconcentration, '.5f')
    except:
        old['naohConcent'] = 0
    try:
        old['releasePercentToxic'] = format(dataStream.releasefluidpercenttoxic, '.5f')
    except:
        old['releasePercentToxic'] = 0
    try:
        old['chlorideIon'] = format(dataStream.chloride, '.5f')
    except:
        old['chlorideIon'] = 0
    try:
        old['co3'] = format(dataStream.co3concentration, '.5f')
    except:
        old['co3'] = 0
    try:
        old['h2sContent'] = format(dataStream.h2sinwater, '.5f')
    except:
        old['h2sContent'] = 0
    try:
        old['PHWater'] = format(dataStream.waterph, '.5f')
    except:
        old['PHWater'] = 0
    try:
        old['criticalTemp'] = format(dataStream.criticalexposuretemperature, '.5f')
    except:
        old['criticalTemp'] = 0
    try:
        old['H2Spressure'] = format(dataStream.h2spartialpressure, '.5f')
    except:
        old['H2Spressure'] = 0
    try:
        old['maxOT'] = format(dataStream.maxoperatingtemperature, '.5f')
    except:
        old['maxOT'] = 0
    try:
        old['minOT'] = format(dataStream.minoperatingtemperature, '.5f')
    except:
        old['minOT'] = 0
    try:
        old['shellHieght'] = format(dataComponent.shellheight, '.5f')
    except:
        old['shellHieght'] = 0
    try:
        old['BrittleFacture'] = format(dataComponent.brittlefracturethickness, '.5f')
    except:
        old['BrittleFacture'] = 0
    try:
        old['NorminalThickness'] = format(dataComponent.nominalthickness, '.5f')
    except:
        old['NorminalThickness'] = 0
    try:
        old['CurrentThickness'] = format(dataComponent.currentthickness, '.5f')
    except:
        old['CurrentThickness'] = 0
    try:
        old['tankDiameter'] = format(dataComponent.nominaldiameter, '.5f')
    except:
        old['tankDiameter'] = 0
    try:
        old['distance'] = format(dataEquipment.distancetogroundwater, '.5f')
    except:
        old['distance'] = 0
    try:
        old['EquipmentVolumn'] = format(dataEquipment.volume, '.5f')
    except:
        old['EquipmentVolumn'] = 0
    try:
        old['CurrentCorrosionRate'] = format(dataComponent.currentcorrosionrate, '.5f')
    except:
        old['CurrentCorrosionRate'] = 0
    try:
        old['MinRequiredThickness'] = format(dataComponent.minreqthickness, '.5f')
    except:
        old['MinRequiredThickness'] = 0
    try:
        old['MaximumOperatingPressure'] = format(dataStream.maxoperatingpressure, '.5f')
    except:
        old['MaximumOperatingPressure'] = 0
    try:
        old['MinOperatingPressure'] = format(dataStream.minoperatingpressure, '.5f')
    except:
        old['MinOperatingPressure'] = 0
    obj = REGULAR()
    data1 = []
    try:
        new = obj.goinormal(data1, componentID)
        for a in new:
            new[a] = format(new[a], '.5f')
    except:
        new = 0
    try:
        Fluid = ["Acid", "AlCl3", "C1-C2", "C13-C16", "C17-C25", "C25+", "C3-C4", "C5", "C6-C8", "C9-C12", "CO", "DEE",
                 "EE", "EEA", "EG", "EO", "H2", "H2S", "HCl", "HF", "Methanol", "Nitric Acid", "NO2", "Phosgene", "PO",
                 "Pyrophoric", "Steam", "Styrene", "TDI", "Water"]
        ToxicFluid = ["H2S", "HF Acid", "CO", "HCl", "Nitric Acid", "AlCl3", "NO2", "Phosgene", "TDI", "PO", "EE",
                      "EO", "Pyrophoric", "Ammonia", "Chlorine"]
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwinputca = models.RwInputCaLevel1.objects.get(id=proposalID)
        # print(rwinputca.toxic_percent)
        assDate = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        comDate = rwassessment.commisstiondate.strftime('%Y-%m-%d')
        try:
            extDate = rwcoat.externalcoatingdate.strftime('%Y-%m-%d')
        except:
            extDate = datetime.now().strftime('%Y-%m-%d')

        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        data = {}

        if request.method == 'POST':
            data['confidencecr'] = request.POST.get('ConfidenceCR')
            print(data['confidencecr'])
            data['assessmentname'] = request.POST.get('AssessmentName')
            data['assessmentdate'] = request.POST.get('assessmentdate')
            data['commisstiondate'] = request.POST.get('CommisstionDate')
            data['apicomponenttypeid'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            data['equipmentType'] = models.EquipmentType.objects.get(equipmenttypeid=models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            data['riskperiod'] = request.POST.get('RiskAnalysisPeriod')

            if request.POST.get('P1AndP3'):
                p1andp3 = 1
            else:
                p1andp3 = 0

            if request.POST.get('EquipmentRequirements'):
                equipmentrequire = 1
            else:
                equipmentrequire = 0

            if request.POST.get('OperatingConditions'):
                operatingcondition = 1
            else:
                operatingcondition = 0

            if request.POST.get('CETtheMAWP'):
                cet = 1
            else:
                cet = 0

            if request.POST.get('CyclicService'):
                cyclicservice = 1
            else:
                cyclicservice = 0

            if request.POST.get('EquipmentorCircuit'):
                equipmentorCircuit = 1
            else:
                equipmentorCircuit = 0

            if request.POST.get('EquipmentorCircuit'):
                equipmentorCircuit = 1
            else:
                equipmentorCircuit = 0

            if request.POST.get('MinStructural'):
                minstruc = 1
            else:
                minstruc = 0

            if request.POST.get('HTHADamage'):
                hthadamage = 1
            else:
                hthadamage = 0

            if request.POST.get('adminControlUpset'):
                adminControlUpset = 1
            else:
                adminControlUpset = 0

            if request.POST.get('ContainsDeadlegs'):
                containsDeadlegs = 1
            else:
                containsDeadlegs = 0

            if request.POST.get('Highly'):
                HighlyEffe = 1
            else:
                HighlyEffe = 0

            if request.POST.get('CylicOper'):
                cylicOP = 1
            else:
                cylicOP = 0

            if request.POST.get('Downtime'):
                downtime = 1
            else:
                downtime = 0

            if request.POST.get('SteamedOut'):
                steamOut = 1
            else:
                steamOut = 0

            if request.POST.get('HeatTraced'):
                heatTrace = 1
            else:
                heatTrace = 0

            if request.POST.get('PWHT'):
                pwht = 1
            else:
                pwht = 0

            if request.POST.get('InterfaceSoilWater'):
                interfaceSoilWater = 1
            else:
                interfaceSoilWater = 0

            if request.POST.get('PressurisationControlled'):
                pressureControl = 1
            else:
                pressureControl = 0

            if request.POST.get('LOM'):
                linerOnlineMoniter = 1
            else:
                linerOnlineMoniter = 0

            if request.POST.get('EquOper'):
                lowestTemp = 1
            else:
                lowestTemp = 0

            if request.POST.get('PresenceofSulphidesShutdow'):
                presentSulphidesShutdown = 1
            else:
                presentSulphidesShutdown = 0

            if request.POST.get('MFTF'):
                materialExposed = 1
            else:
                materialExposed = 0

            if request.POST.get('PresenceofSulphides'):
                presentSulphide = 1
            else:
                presentSulphide = 0

            data['minTemp'] = request.POST.get('Min')
            data['ExternalEnvironment'] = request.POST.get('ExternalEnvironment')
            data['ThermalHistory'] = request.POST.get('ThermalHistory')
            data['OnlineMonitoring'] = request.POST.get('OnlineMonitoring')
            data['EquipmentVolumn'] = request.POST.get('EquipmentVolume')

            data['normaldiameter'] = request.POST.get('NominalDiameter')
            data['normalthick'] = request.POST.get('NominalThickness')
            data['currentthick'] = request.POST.get('CurrentThickness')
            data['tmin'] = request.POST.get('tmin')
            data['currentrate'] = request.POST.get('CurrentRate')
            data['deltafatt'] = request.POST.get('DeltaFATT')
            data['weldjointeff'] = request.POST.get('WeldJointEff')
            data['structuralthickness'] = request.POST.get('StructuralThickness')
            data['compvolume'] = request.POST.get('CompVolume')
            data['allowStress'] = request.POST.get('AllowableStress')
            if request.POST.get('DFDI'):
                damageDuringInsp = 1
            else:
                damageDuringInsp = 0

            if request.POST.get('ChemicalInjection'):
                chemicalInj = 1
            else:
                chemicalInj = 0

            if request.POST.get('PresenceCracks'):
                crackpresent = 1
            else:
                crackpresent = 0

            if request.POST.get('HFICI'):
                HFICI = 1
            else:
                HFICI = 0

            if request.POST.get('TrampElements'):
                TrampElement = 1
            else:
                TrampElement = 0

            data['MaxBrinell'] = request.POST.get('MBHW')
            data['complex'] = request.POST.get('ComplexityProtrusions')
            data['CylicLoad'] = request.POST.get('CLC')
            data['branchDiameter'] = request.POST.get('BranchDiameter')
            data['joinTypeBranch'] = request.POST.get('JTB')
            data['numberPipe'] = request.POST.get('NFP')
            data['pipeCondition'] = request.POST.get('PipeCondition')
            data['prevFailure'] = request.POST.get('PreviousFailures')

            if request.POST.get('VASD'):
                visibleSharkingProtect = 1
            else:
                visibleSharkingProtect = 0

            data['shakingPipe'] = request.POST.get('ASP')
            data['timeShakingPipe'] = request.POST.get('ATSP')
            data['correctActionMitigate'] = request.POST.get('CAMV')
            # OP condition
            data['maxOT'] = request.POST.get('MaxOT')
            data['maxOP'] = request.POST.get('MaxOP')
            data['minOT'] = request.POST.get('MinOT')
            data['minOP'] = request.POST.get('MinOP')
            data['OpHydroPressure'] = request.POST.get('OHPP')
            data['criticalTemp'] = request.POST.get('CET')
            data['OP1'] = request.POST.get('Operating1')
            data['OP2'] = request.POST.get('Operating2')
            data['OP3'] = request.POST.get('Operating3')
            data['OP4'] = request.POST.get('Operating4')
            data['OP5'] = request.POST.get('Operating5')
            data['OP6'] = request.POST.get('Operating6')
            data['OP7'] = request.POST.get('Operating7')
            data['OP8'] = request.POST.get('Operating8')
            data['OP9'] = request.POST.get('Operating9')
            data['OP10'] = request.POST.get('Operating10')
            # material
            data['material'] = request.POST.get('Material')
            data['maxDesignTemp'] = request.POST.get('MaxDesignTemp')
            data['minDesignTemp'] = request.POST.get('MinDesignTemp')
            data['designPressure'] = request.POST.get('DesignPressure')
            data['tempRef'] = request.POST.get('ReferenceTemperature')
            # data['allowStress'] = request.POST.get('ASAT')
            data['BrittleFacture'] = request.POST.get('BFGT')
            data['CA'] = request.POST.get('CorrosionAllowance')
            data['sigmaPhase'] = request.POST.get('SigmaPhase')
            data['yieldstrength'] = request.POST.get('YieldStrength')
            data['tensilestrength'] = request.POST.get('TensileStrength')
            if request.POST.get('CoLAS'):
                cacbonAlloy = 1
            else:
                cacbonAlloy = 0

            if request.POST.get('AusteniticSteel'):
                austeniticStell = 1
            else:
                austeniticStell = 0

            if request.POST.get('SusceptibleTemper'):
                suscepTemp = 1
            else:
                suscepTemp = 0

            if request.POST.get('NickelAlloy'):
                nickelAlloy = 1
            else:
                nickelAlloy = 0

            if request.POST.get('Chromium'):
                chromium = 1
            else:
                chromium = 0

            data['sulfurContent'] = request.POST.get('SulfurContent')
            data['heatTreatment'] = request.POST.get('heatTreatment')

            if request.POST.get('MGTEHTHA'):
                materialHTHA = 1
            else:
                materialHTHA = 0

            data['HTHAMaterialGrade'] = request.POST.get('HTHAMaterialGrade')

            if request.POST.get('MaterialPTA'):
                materialPTA = 1
            else:
                materialPTA = 0

            data['PTAMaterialGrade'] = request.POST.get('PTAMaterialGrade')
            data['materialCostFactor'] = request.POST.get('MaterialCostFactor')
            # Coating, Clading
            if request.POST.get('InternalCoating'):
                InternalCoating = 1
            else:
                InternalCoating = 0

            if request.POST.get('ExternalCoating'):
                ExternalCoating = 1
            else:
                ExternalCoating = 0

            data['ExternalCoatingID'] = request.POST.get('ExternalCoatingID')
            data['ExternalCoatingQuality'] = request.POST.get('ExternalCoatingQuality')

            if request.POST.get('SCWD'):
                supportMaterial = 1
            else:
                supportMaterial = 0

            if request.POST.get('InternalCladding'):
                InternalCladding = 1
            else:
                InternalCladding = 0

            data['CladdingCorrosionRate'] = request.POST.get('CladdingCorrosionRate')
            data['claddingthickness'] = request.POST.get('CladdingThickness')

            if request.POST.get('InternalLining'):
                InternalLining = 1
            else:
                InternalLining = 0

            data['InternalLinerType'] = request.POST.get('InternalLinerType')
            data['InternalLinerCondition'] = request.POST.get('InternalLinerCondition')

            if request.POST.get('ExternalInsulation') == "on" or request.POST.get('ExternalInsulation') == 1:
                ExternalInsulation = 1
            else:
                ExternalInsulation = 0

            if request.POST.get('ICC'):
                InsulationCholride = 1
            else:
                InsulationCholride = 0

            data['ExternalInsulationType'] = request.POST.get('ExternalInsulationType')
            data['InsulationCondition'] = request.POST.get('InsulationCondition')
            # Steam
            data['NaOHConcentration'] = request.POST.get('NaOHConcentration')
            data['ReleasePercentToxic'] = request.POST.get('RFPT')
            data['ChlorideIon'] = request.POST.get('ChlorideIon')
            data['CO3'] = request.POST.get('CO3')
            data['H2SContent'] = request.POST.get('H2SContent')
            data['PHWater'] = request.POST.get('PHWater')

            if request.POST.get('EAGTA'):
                exposureAcid = 1
            else:
                exposureAcid = 0

            if request.POST.get('ToxicConstituents'):
                ToxicConstituents = 1
            else:
                ToxicConstituents = 0

            data['ExposureAmine'] = request.POST.get('ExposureAmine')
            data['AminSolution'] = request.POST.get('ASC')

            if request.POST.get('APDO'):
                aquaDuringOP = 1
            else:
                aquaDuringOP = 0

            if request.POST.get('APDSD'):
                aquaDuringShutdown = 1
            else:
                aquaDuringShutdown = 0

            if request.POST.get('EnvironmentCH2S'):
                EnvironmentCH2S = 1
            else:
                EnvironmentCH2S = 0

            if request.POST.get('PHA'):
                presentHF = 1
            else:
                presentHF = 0

            if request.POST.get('PresenceCyanides'):
                presentCyanide = 1
            else:
                presentCyanide = 0

            if request.POST.get('PCH'):
                processHydrogen = 1
            else:
                processHydrogen = 0

            if request.POST.get('ECCAC'):
                environCaustic = 1
            else:
                environCaustic = 0

            if request.POST.get('ESBC'):
                exposedSulfur = 1
            else:
                exposedSulfur = 0

            if request.POST.get('MEFMSCC'):
                materialExposedFluid = 1
            else:
                materialExposedFluid = 0

            if request.POST.get('EToAcid'):
                etoacid = 1
            else:
                etoacid = 0

            # CA
            data['APIFluid'] = request.POST.get('APIFluid')
            data['MassInventory'] = request.POST.get('MassInventory')
            data['Systerm'] = request.POST.get('Systerm')
            data['ToxicFluid'] = request.POST.get('ToxicFluid')
            data['ToxicFluidPercent'] = request.POST.get('ToxicFluidPercent')
            # print("ToxicFluidPercent:",data['ToxicFluidPercent'])
            data['PhaseStorage'] = request.POST.get('phaseOfFluid')
            data['LiquidLevel'] = request.POST.get('LiquidLevel')
            data['MassComponent'] = request.POST.get('MassComponent')
            data['EquipmentCost'] = request.POST.get('EquipmentCost')
            data['MittigationSystem'] = request.POST.get('MittigationSystem')
            data['ProductionCost'] = request.POST.get('ProductionCost')
            data['ToxicPercent'] = request.POST.get('ToxicPercent')
            data['InjureCost'] = request.POST.get('InjureCost')
            data['ReleaseDuration'] = request.POST.get('ReleaseDuration')
            data['EnvironmentCost'] = request.POST.get('EnvironmentCost')
            data['PersonDensity'] = request.POST.get('PersonDensity')
            data['ProcessUnit'] = request.POST.get('ProcessUnit')
            data['OutageMulti'] = request.POST.get('OutageMulti')
            if request.POST.get(
                    'DetectionType') == "Intrumentation designed specifically to detect material losses by changes in operating conditions (i.e loss of pressure or flow) in the system":
                detectiontype = 'A'
            elif request.POST.get(
                    'DetectionType') == "Suitably located detectors to determine when the material is present outside the pressure-containing envelope":
                detectiontype = 'B'
            else:
                detectiontype = 'C'
            data['DetectionType'] = detectiontype
            if request.POST.get(
                    'IsolationType') == "Isolation or shutdown systerms activated directly from process instrumentation or detectors, with no operator intervention":
                isolationtype = 'A'
            elif request.POST.get(
                    'IsolationType') == "Isolation or shutdown systems activated by operators in the control room or other suitable locations remote from the leak":
                isolationtype = 'B'
            else:
                isolationtype = 'C'
            data['IsolationType'] = isolationtype

            rwassessment.assessmentdate = data['assessmentdate']
            rwassessment.commisstiondate = data['commisstiondate']
            rwassessment.proposalname = data['assessmentname']
            rwassessment.save()

            rwequipment.adminupsetmanagement = adminControlUpset
            rwequipment.containsdeadlegs = containsDeadlegs
            rwequipment.cyclicoperation = cylicOP
            rwequipment.highlydeadleginsp = HighlyEffe
            rwequipment.downtimeprotectionused = downtime
            rwequipment.externalenvironment = data['ExternalEnvironment']
            rwequipment.heattraced = heatTrace
            rwequipment.interfacesoilwater = interfaceSoilWater
            rwequipment.lineronlinemonitoring = linerOnlineMoniter
            rwequipment.materialexposedtoclext = materialExposed
            rwequipment.minreqtemperaturepressurisation = data['minTemp']
            rwequipment.onlinemonitoring = data['OnlineMonitoring']
            rwequipment.presencesulphideso2 = presentSulphide
            rwequipment.presencesulphideso2shutdown = presentSulphidesShutdown
            rwequipment.pressurisationcontrolled = pressureControl
            rwequipment.pwht = pwht
            rwequipment.steamoutwaterflush = steamOut
            rwequipment.thermalhistory = data['ThermalHistory']
            rwequipment.yearlowestexptemp = lowestTemp
            rwequipment.volume = data['EquipmentVolumn']
            # rwequipment.volume = new['EquipmentVolumn']
            rwequipment.save()

            rwcomponent.nominaldiameter = data['normaldiameter']
            rwcomponent.nominalthickness = data['normalthick']
            rwcomponent.currentthickness = data['currentthick']
            rwcomponent.minreqthickness = data['tmin']
            rwcomponent.currentcorrosionrate = data['currentrate']
            rwcomponent.weldjointefficiency = data['weldjointeff']
            rwcomponent.branchdiameter = data['branchDiameter']
            rwcomponent.branchjointtype = data['joinTypeBranch']
            rwcomponent.brinnelhardness = data['MaxBrinell']
            rwcomponent.deltafatt = data['deltafatt']
            rwcomponent.chemicalinjection = chemicalInj
            rwcomponent.highlyinjectioninsp = HFICI
            rwcomponent.complexityprotrusion = data['complex']
            rwcomponent.correctiveaction = data['correctActionMitigate']
            rwcomponent.crackspresent = crackpresent
            rwcomponent.cyclicloadingwitin15_25m = data['CylicLoad']
            rwcomponent.damagefoundinspection = damageDuringInsp
            rwcomponent.structuralthickness = data['structuralthickness']
            rwcomponent.hthadamage = hthadamage
            rwcomponent.minstructuralthickness = minstruc
            rwcomponent.numberpipefittings = data['numberPipe']
            rwcomponent.pipecondition = data['pipeCondition']
            rwcomponent.previousfailures = data['prevFailure']
            rwcomponent.shakingamount = data['shakingPipe']
            rwcomponent.shakingdetected = visibleSharkingProtect
            rwcomponent.shakingtime = data['timeShakingPipe']
            rwcomponent.allowablestress = data['allowStress']
            rwcomponent.fabricatedsteel = p1andp3
            rwcomponent.equipmentsatisfied = equipmentrequire
            rwcomponent.nominaloperatingconditions = operatingcondition
            rwcomponent.cetgreaterorequal = cet
            rwcomponent.cyclicservice = cyclicservice
            rwcomponent.equipmentcircuitshock = equipmentorCircuit
            # rwcomponent.trampelements=TrampElement
            rwcomponent.brittlefracturethickness = data['BrittleFacture']
            rwcomponent.componentvolume = data['compvolume']
            rwcomponent.confidencecorrosionrate = data['confidencecr']


            rwcomponent.save()

            rwstream.aminesolution = data['AminSolution']
            rwstream.aqueousoperation = aquaDuringOP
            rwstream.aqueousshutdown = aquaDuringShutdown
            rwstream.toxicconstituent = ToxicConstituents
            rwstream.caustic = environCaustic
            rwstream.chloride = data['ChlorideIon']
            rwstream.co3concentration = data['CO3']
            rwstream.cyanide = presentCyanide
            rwstream.exposedtogasamine = exposureAcid
            rwstream.exposedtosulphur = exposedSulfur
            rwstream.exposuretoamine = data['ExposureAmine']
            rwstream.h2s = EnvironmentCH2S
            rwstream.h2sinwater = data['H2SContent']
            rwstream.hydrogen = processHydrogen
            rwstream.hydrofluoric = presentHF
            rwstream.materialexposedtoclint = materialExposedFluid
            rwstream.maxoperatingpressure = data['maxOP']
            rwstream.maxoperatingtemperature = float(data['maxOT'])
            rwstream.minoperatingpressure = float(data['minOP'])
            rwstream.minoperatingtemperature = data['minOT']
            rwstream.criticalexposuretemperature = data['criticalTemp']
            rwstream.naohconcentration = data['NaOHConcentration']
            rwstream.releasefluidpercenttoxic = float(data['ReleasePercentToxic'])
            rwstream.waterph = float(data['PHWater'])
            rwstream.h2spartialpressure = float(data['OpHydroPressure'])
            rwstream.storagephase = data['PhaseStorage']
            rwstream.liquidlevel = float(data['LiquidLevel'])
            rwstream.save()

            rwexcor.minus12tominus8 = data['OP1']
            rwexcor.minus8toplus6 = data['OP2']
            rwexcor.plus6toplus32 = data['OP3']
            rwexcor.plus32toplus71 = data['OP4']
            rwexcor.plus71toplus107 = data['OP5']
            rwexcor.plus107toplus121 = data['OP6']
            rwexcor.plus121toplus135 = data['OP7']
            rwexcor.plus135toplus162 = data['OP8']
            rwexcor.plus162toplus176 = data['OP9']
            rwexcor.morethanplus176 = data['OP10']
            rwexcor.save()

            rwcoat.externalcoating = ExternalCoating
            rwcoat.externalinsulation = ExternalInsulation
            rwcoat.internalcladding = InternalCladding
            rwcoat.internalcoating = InternalCoating
            rwcoat.internallining = InternalLining
            rwcoat.externalcoatingdate = data['ExternalCoatingID']
            rwcoat.externalcoatingquality = data['ExternalCoatingQuality']
            rwcoat.externalinsulationtype = data['ExternalInsulationType']
            rwcoat.insulationcondition = data['InsulationCondition']
            rwcoat.insulationcontainschloride = InsulationCholride
            rwcoat.internallinercondition = data['InternalLinerCondition']
            rwcoat.internallinertype = data['InternalLinerType']
            rwcoat.claddingcorrosionrate = data['CladdingCorrosionRate']
            rwcoat.claddingthickness = data['claddingthickness']
            rwcoat.supportconfignotallowcoatingmaint = supportMaterial
            rwcoat.save()

            rwmaterial.corrosionallowance = data['CA']
            rwmaterial.materialname = data['material']
            rwmaterial.designpressure = data['designPressure']
            rwmaterial.designtemperature = data['maxDesignTemp']
            rwmaterial.mindesigntemperature = data['minDesignTemp']
            rwmaterial.sigmaphase = data['sigmaPhase']
            rwmaterial.sulfurcontent = data['sulfurContent']
            rwmaterial.heattreatment = data['heatTreatment']
            rwmaterial.referencetemperature = data['tempRef']
            rwmaterial.ptamaterialcode = data['PTAMaterialGrade']
            rwmaterial.hthamaterialcode = data['HTHAMaterialGrade']
            rwmaterial.ispta = materialPTA
            rwmaterial.ishtha = materialHTHA
            rwmaterial.austenitic = austeniticStell
            rwmaterial.temper = suscepTemp
            rwmaterial.carbonlowalloy = cacbonAlloy
            rwmaterial.nickelbased = nickelAlloy
            rwmaterial.chromemoreequal12 = chromium
            rwmaterial.costfactor = data['materialCostFactor']
            rwmaterial.yieldstrength = data['yieldstrength']
            rwmaterial.tensilestrength = data['tensilestrength']
            rwmaterial.save()

            rwinputca.api_fluid = data['APIFluid']
            # rwinputca.model_fluid = data['APIFluid'] # them vao
            rwinputca.system = data['Systerm']
            rwinputca.release_duration = data['ReleaseDuration']
            rwinputca.detection_type = data['DetectionType']
            rwinputca.isulation_type = data['IsolationType']
            rwinputca.mitigation_system = data['MittigationSystem']
            rwinputca.equipment_cost = data['EquipmentCost']
            rwinputca.injure_cost = data['InjureCost']
            rwinputca.evironment_cost = data['EnvironmentCost']
            rwinputca.toxic_percent = data['ToxicPercent']
            rwinputca.personal_density = data['PersonDensity']
            rwinputca.material_cost = data['materialCostFactor']
            rwinputca.production_cost = data['ProductionCost']
            rwinputca.mass_inventory = data['MassInventory']
            rwinputca.mass_component = data['MassComponent']
            rwinputca.stored_pressure = float(data['minOP']) * 6.895
            rwinputca.stored_temp = data['minOT']
            rwinputca.toxic_fluid = data['ToxicFluid']
            rwinputca.toxic_percent = data['ToxicFluidPercent']
            rwinputca.process_unit = data['ProcessUnit']
            rwinputca.outage_multiplier = data['OutageMulti']
            rwinputca.save()

            # Customize code here
            ReCalculate.ReCalculate(proposalID, request)
            return redirect('damgeFactor', proposalID=proposalID)
    except Exception as e:
        print(e)
        raise Http404
    print("TUAN", rwassessment.assessmentdate)
    print("TUAN", assDate)
    print("TUAN", rwinputca.toxic_percent)
    return render(request, 'FacilityUI/proposal/proposalNormalEdit.html',
                  {'page': 'editProposal', 'api': Fluid, 'rwAss': rwassessment, 'rwEq': rwequipment,
                   'rwComp': rwcomponent, 'rwStream': rwstream, 'rwExcot': rwexcor,
                   'rwCoat': rwcoat, 'rwMaterial': rwmaterial, 'rwInputCa': rwinputca,
                   'assDate': assDate, 'extDate': extDate, 'comDate': comDate,
                   'componentID': rwassessment.componentid_id,
                   'equipmentID': rwassessment.equipmentid_id, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid, 'toxicfluid': ToxicFluid,'new':new, 'old':old })


def EditTank(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    old={}
    componentID = models.RwAssessment.objects.get(id=proposalID).componentid_id
    dataCoating = models.RwCoating.objects.get(id=proposalID)
    dataEquipment = models.RwEquipment.objects.get(id=proposalID)
    dataComponent = models.RwComponent.objects.get(id=proposalID)
    dataStream = models.RwStream.objects.get(id=proposalID)
    try:
        old['claddingthickness'] = format(dataCoating.claddingthickness, '.5f')
    except:
        old['claddingthickness'] = 0
    try:
        old['cladCorrosion'] = format(dataCoating.claddingcorrosionrate, '.5f')
    except:
        old['cladCorrosion']= 0
    try:
        old['fluidLeaveDike'] = format(dataStream.fluidleavedikepercent, '.5f')
    except:
        old['fluidLeaveDike'] = 0
    try:
        old['fluidOnsite'] = format(dataStream.fluidleavedikeremainonsitepercent, '.5f')
    except:
        old['fluidOnsite'] = 0
    try:
        old['fluidOffsite'] = format(dataStream. fluidgooffsitepercent, '.5f')
    except:
        old['fluidOffsite'] = 0
    try:
        old['fluidHeight'] = format(dataStream.fluidheight, '.5f')
    except:
        old['fluidHeight'] = 0
    try:
        old['naohConcent'] = format(dataStream.naohconcentration, '.5f')
    except:
        old['naohConcent'] = 0
    try:
        old['releasePercentToxic'] = format(dataStream.releasefluidpercenttoxic, '.5f')
    except:
        old['releasePercentToxic'] = 0
    try:
        old['chlorideIon'] = format(dataStream.chloride, '.5f')
    except:
        old['chlorideIon'] = 0
    try:
        old['co3'] = format(dataStream.co3concentration, '.5f')
    except:
        old['co3'] = 0
    try:
        old['h2sContent'] = format(dataStream.h2sinwater, '.5f')
    except:
         old['h2sContent']= 0
    try:
        old['PHWater'] = format(dataStream.waterph, '.5f')
    except:
        old['PHWater'] = 0
    try:
        old['criticalTemp'] = format(dataStream.criticalexposuretemperature, '.5f')
    except:
        old['criticalTemp'] = 0
    try:
        old['H2Spressure'] = format(dataStream.h2spartialpressure, '.5f')
    except:
        old['H2Spressure'] = 0
    try:
        old['maxOT'] = format(dataStream.maxoperatingtemperature, '.5f')
    except:
        old['maxOT'] = 0
    try:
        old['minOT'] = format(dataStream.minoperatingtemperature, '.5f')
    except:
        old['minOT'] = 0
    try:
        old['shellHieght'] = format(dataComponent.shellheight, '.5f')
    except:
        old['shellHieght'] = 0
    try:
        old['BrittleFacture'] = format(dataComponent.brittlefracturethickness, '.5f')
    except:
       old['BrittleFacture'] = 0
    try:
        old['NorminalThickness'] = format(dataComponent.nominalthickness, '.5f')
    except:
        old['NorminalThickness'] = 0
    try:
        old['CurrentThickness'] = format(dataComponent.currentthickness, '.5f')
    except:
        old['CurrentThickness'] = 0
    try:
        old['tankDiameter'] = format(dataComponent.nominaldiameter, '.5f')
    except:
        old['tankDiameter'] = 0
    try:
        old['distance'] = format(dataEquipment.distancetogroundwater, '.5f')
    except:
        old['distance'] = 0
    try:
        old['EquipmentVolumn'] = format(dataEquipment.volume, '.5f')
    except:
        old['EquipmentVolumn'] = 0
    try:
        old['CurrentCorrosionRate'] = format(dataComponent.currentcorrosionrate, '.5f')
    except:
        old['CurrentCorrosionRate'] = 0
    try:
        old['MinRequiredThickness'] = format(dataComponent.minreqthickness, '.5f')
    except:
        old['MinRequiredThickness'] = 0
    try:
        old['MaximumOperatingPressure'] = format(dataStream.maxoperatingpressure, '.5f')
    except:
        old['MaximumOperatingPressure'] = 0
    try:
        old['MinOperatingPressure'] = format(dataStream.minoperatingpressure, '.5f')
    except:
        old['MinOperatingPressure'] = 0
    obj = REGULAR()
    data1 = []
    try:
        new = obj.goitank(data1, componentID)
        for a in new:
            new[a] = format(new[a], '.5f')
    except:
        new = 0
    try:
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwinputca = models.RwInputCaTank.objects.get(id=proposalID)
        assDate = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        comDate = rwassessment.commisstiondate.strftime('%Y-%m-%d')
        try:
            extDate = rwcoat.externalcoatingdate.strftime('%Y-%m-%d')
        except:
            extDate = datetime.now().strftime('%Y-%m-%d')

        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        eq = models.EquipmentMaster.objects.get(equipmentid=rwassessment.equipmentid_id)
        datafaci = models.Facility.objects.get(facilityid=eq.facilityid_id)
        data = {}
        isshell = False
        if comp.componenttypeid_id == 13:  # tuansua
            isshell = True
        if request.method == 'POST':
            # Data Assessment
            data['confidencecr'] = request.POST.get('ConfidenceCR')  # bo sung level of confident for tankbottom
            data['assessmentName'] = request.POST.get('AssessmentName')
            data['assessmentdate'] = request.POST.get('assessmentdate')
            data['commisstiondate'] = request.POST.get('CommisstionDate')
            # print(data['commisstiondate'])
            data['riskperiod'] = request.POST.get('RiskAnalysisPeriod')
            data['assessmentmethod'] = request.POST.get('AssessmentMethod')
            data['apicomponenttypeid'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            data['equipmenttype'] = models.EquipmentType.objects.get(
                equipmenttypeid=eq.equipmenttypeid_id).equipmenttypename
            # Data Equipment Properties
            if request.POST.get('Admin'):
                adminControlUpset = 1
            else:
                adminControlUpset = 0

            if request.POST.get('CylicOper'):
                cylicOp = 1
            else:
                cylicOp = 0

            if request.POST.get('Highly'):
                highlyDeadleg = 1
            else:
                highlyDeadleg = 0

            if request.POST.get('Steamed'):
                steamOutWater = 1
            else:
                steamOutWater = 0
            if request.POST.get('Downtime'):
                downtimeProtect = 1
            else:
                downtimeProtect = 0

            if request.POST.get('PWHT'):
                pwht = 1
            else:
                pwht = 0

            if request.POST.get('HeatTraced'):
                heatTrace = 1
            else:
                heatTrace = 0

            data['distance'] = request.POST.get('Distance')

            if request.POST.get('InterfaceSoilWater'):
                interfaceSoilWater = 1
            else:
                interfaceSoilWater = 0

            data['soiltype'] = request.POST.get('typeofSoil')

            if request.POST.get('PressurisationControlled'):
                pressureControl = 1
            else:
                pressureControl = 0

            data['minRequireTemp'] = request.POST.get('MinReq')

            if request.POST.get('lowestTemp'):
                lowestTemp = 1
            else:
                lowestTemp = 0

            if request.POST.get('MFTF'):
                materialChlorineExt = 1
            else:
                materialChlorineExt = 0

            if request.POST.get('LOM'):
                linerOnlineMonitor = 1
            else:
                linerOnlineMonitor = 0

            if request.POST.get('PresenceofSulphides'):
                presenceSulphideOP = 1
            else:
                presenceSulphideOP = 0

            if request.POST.get('PresenceofSulphidesShutdow'):
                presenceSulphideShut = 1
            else:
                presenceSulphideShut = 0

            if request.POST.get('ComponentWelded'):
                componentWelded = 1
            else:
                componentWelded = 0

            if request.POST.get('TMA'):
                tankIsMaintain = 1
            else:
                tankIsMaintain = 0

            data['adjustSettlement'] = request.POST.get('AdjForSettlement')
            data['extEnvironment'] = request.POST.get('ExternalEnvironment')
            data['EnvSensitivity'] = request.POST.get('EnvironmentSensitivity')
            data['themalHistory'] = request.POST.get('ThermalHistory')
            data['onlineMonitor'] = request.POST.get('OnlineMonitoring')
            data['equipmentVolumn'] = request.POST.get('EquipmentVolume')
            # Component Properties
            data['structuralthickness'] = request.POST.get('StructuralThickness')
            data['tankDiameter'] = request.POST.get('TankDiameter')
            data['NominalThickness'] = request.POST.get('NominalThickness')
            data['currentThick'] = request.POST.get('CurrentThickness')
            data['minRequireThick'] = request.POST.get('MinReqThick')
            data['currentCorrosion'] = request.POST.get('CurrentCorrosionRate')
            data['HeightEShellC'] = request.POST.get('HeightEShellC')
            data['ComponentVolume'] = request.POST.get('CompVolume')
            data['WeldJointeff'] = request.POST.get('WeldJointEff')
            if request.POST.get('MinStructural'):
                minstruc = 1
            else:
                minstruc = 0
            if request.POST.get('DFDI'):
                damageFound = 1
            else:
                damageFound = 0

            if request.POST.get('PresenceCracks'):
                crackPresence = 1
            else:
                crackPresence = 0

            if request.POST.get('TrampElements'):
                trampElements = 1
            else:
                trampElements = 0

            if request.POST.get('ReleasePreventionBarrier'):
                preventBarrier = 1
            else:
                preventBarrier = 0

            if request.POST.get('ConcreteFoundation'):
                concreteFoundation = 1
            else:
                concreteFoundation = 0

            if request.POST.get('P1AndP3'):
                p1andp3 = 1
            else:
                p1andp3 = 0

            if request.POST.get('EquipmentRequirements'):
                equipmentrequire = 1
            else:
                equipmentrequire = 0

            if request.POST.get('OperatingConditions'):
                operatingcondition = 1
            else:
                operatingcondition = 0

            if request.POST.get('CETtheMAWP'):
                cet = 1
            else:
                cet = 0

            if request.POST.get('CyclicService'):
                cyclicservice = 1
            else:
                cyclicservice = 0

            if request.POST.get('EquipmentorCircuit'):
                equipmentorCircuit = 1
            else:
                equipmentorCircuit = 0

            data['maxBrinnelHardness'] = request.POST.get('MBHW')
            data['complexProtrusion'] = request.POST.get('ComplexityProtrusions')
            data['severityVibration'] = request.POST.get('SeverityVibration')

            # Operating condition
            data['maxOT'] = request.POST.get('MaxOT')
            data['maxOP'] = request.POST.get('MaxOP')
            data['minOT'] = request.POST.get('MinOT')
            data['minOP'] = request.POST.get('MinOP')
            data['H2Spressure'] = request.POST.get('OHPP')
            data['criticalTemp'] = request.POST.get('CET')
            data['flowrate'] = request.POST.get('FlowRate')
            data['OP1'] = request.POST.get('Operating1')
            data['OP2'] = request.POST.get('Operating2')
            data['OP3'] = request.POST.get('Operating3')
            data['OP4'] = request.POST.get('Operating4')
            data['OP5'] = request.POST.get('Operating5')
            data['OP6'] = request.POST.get('Operating6')
            data['OP7'] = request.POST.get('Operating7')
            data['OP8'] = request.POST.get('Operating8')
            data['OP9'] = request.POST.get('Operating9')
            data['OP10'] = request.POST.get('Operating10')

            # Material
            data['materialName'] = request.POST.get('materialname')
            data['maxDesignTemp'] = request.POST.get('MaxDesignTemp')
            data['minDesignTemp'] = request.POST.get('MinDesignTemp')
            data['designPressure'] = request.POST.get('DesignPressure')
            data['refTemp'] = request.POST.get('ReferenceTemperature')
            data['allowStress'] = request.POST.get('ASAT')
            data['brittleThick'] = request.POST.get('BFGT')
            data['corrosionAllow'] = request.POST.get('CorrosionAllowance')
            data['yieldstrength'] = request.POST.get('YieldStrength')
            data['tensilestrength'] = request.POST.get('TensileStrength')
            if request.POST.get('CoLAS'):
                carbonLowAlloySteel = 1
            else:
                carbonLowAlloySteel = 0

            if request.POST.get('AusteniticSteel'):
                austeniticSteel = 1
            else:
                austeniticSteel = 0

            if request.POST.get('NickelAlloy'):
                nickelAlloy = 1
            else:
                nickelAlloy = 0

            if request.POST.get('Chromium'):
                chromium = 1
            else:
                chromium = 0

            data['sulfurContent'] = request.POST.get('SulfurContent')
            data['heatTreatment'] = request.POST.get('heatTreatment')

            if request.POST.get('MGTEPTA'):
                materialPTA = 1
            else:
                materialPTA = 0

            data['PTAMaterialGrade'] = request.POST.get('PTAMaterialGrade')
            data['materialCostFactor'] = request.POST.get('MaterialCostFactor')
            data['productionCost'] = request.POST.get('ProductionCost')

            # Coating, Cladding
            if request.POST.get('InternalCoating'):
                internalCoating = 1
            else:
                internalCoating = 0

            if request.POST.get('ExternalCoating'):
                externalCoating = 1
            else:
                externalCoating = 0

            data['externalInstallDate'] = request.POST.get('ExternalCoatingID')
            data['externalCoatQuality'] = request.POST.get('ExternalCoatingQuality')

            if request.POST.get('SCWD'):
                supportCoatingMaintain = 1
            else:
                supportCoatingMaintain = 0

            if request.POST.get('InternalCladding'):
                internalCladding = 1
            else:
                internalCladding = 0
            data['CladdingThinkness'] = request.POST.get('CladdingThinkness')
            data['cladCorrosion'] = request.POST.get('CladdingCorrosionRate')

            if request.POST.get('InternalLining'):
                internalLinning = 1
            else:
                internalLinning = 0

            data['internalLinnerType'] = request.POST.get('InternalLinerType')
            data['internalLinnerCondition'] = request.POST.get('InternalLinerCondition')

            if request.POST.get('ExternalInsulation'):
                extInsulation = 1
            else:
                extInsulation = 0

            if request.POST.get('ICC'):
                InsulationContainChloride = 1
            else:
                InsulationContainChloride = 0

            data['extInsulationType'] = request.POST.get('ExternalInsulationType')
            data['insulationCondition'] = request.POST.get('InsulationCondition')
            # Stream
            data['fluid'] = request.POST.get('Fluid')
            data['fluidHeight'] = request.POST.get('FluidHeight')
            data['fluidLeaveDike'] = request.POST.get('PFLD')
            data['fluidOnsite'] = request.POST.get('PFLDRS')
            data['fluidOffsite'] = request.POST.get('PFLDGoffsite')
            data['naohConcent'] = request.POST.get('NaOHConcentration')
            data['releasePercentToxic'] = request.POST.get('RFPT')
            data['chlorideIon'] = request.POST.get('ChlorideIon')
            data['co3'] = request.POST.get('CO3')
            data['h2sContent'] = request.POST.get('H2SContent')
            data['PHWater'] = request.POST.get('PHWater')

            if request.POST.get('EAGTA'):
                exposedAmine = 1
            else:
                exposedAmine = 0

            data['amineSolution'] = request.POST.get('AmineSolution')
            data['exposureAmine'] = request.POST.get('ExposureAmine')

            if request.POST.get('APDO'):
                aqueosOP = 1
            else:
                aqueosOP = 0

            if request.POST.get('EnvironmentCH2S'):
                environtH2S = 1
            else:
                environtH2S = 0

            if request.POST.get('APDSD'):
                aqueosShut = 1
            else:
                aqueosShut = 0

            if request.POST.get('PresenceCyanides'):
                cyanidesPresence = 1
            else:
                cyanidesPresence = 0

            if request.POST.get('presenceHF'):
                presentHF = 1
            else:
                presentHF = 0

            if request.POST.get('ECCAC'):
                environtCaustic = 1
            else:
                environtCaustic = 0

            if request.POST.get('PCH'):
                processContainHydro = 1
            else:
                processContainHydro = 0

            if request.POST.get('MEFMSCC'):
                materialChlorineIntern = 1
            else:
                materialChlorineIntern = 0

            if request.POST.get('ESBC'):
                exposedSulfur = 1
            else:
                exposedSulfur = 0

            if str(data['fluid']) == "Gasoline":
                apiFluid = "C6-C8"
            elif str(data['fluid']) == "Light Diesel Oil":
                apiFluid = "C9-C12"
            elif str(data['fluid']) == "Heavy Diesel Oil":
                apiFluid = "C13-C16"
            elif str(data['fluid']) == "Fuel Oil" or str(data['fluid']) == "Crude Oil":
                apiFluid = "C17-C25"
            else:
                apiFluid = "C25+"
            rwassessment.assessmentdate = data['assessmentdate']
            rwassessment.commisstiondate = data['commisstiondate']
            rwassessment.proposalname = data['assessmentName']
            rwassessment.assessmentmethod = data['assessmentmethod']
            rwassessment.save()
            # print("4")
            rwequipment.adminupsetmanagement = adminControlUpset
            rwequipment.cyclicoperation = cylicOp
            rwequipment.highlydeadleginsp = highlyDeadleg
            rwequipment.downtimeprotectionused = downtimeProtect
            rwequipment.steamoutwaterflush = steamOutWater
            rwequipment.pwht = pwht
            rwequipment.heattraced = heatTrace
            rwequipment.distancetogroundwater = data['distance']
            rwequipment.interfacesoilwater = interfaceSoilWater
            rwequipment.typeofsoil = data['soiltype']
            rwequipment.pressurisationcontrolled = pressureControl
            rwequipment.minreqtemperaturepressurisation = data['minRequireTemp']
            rwequipment.yearlowestexptemp = lowestTemp
            rwequipment.materialexposedtoclext = materialChlorineExt
            rwequipment.lineronlinemonitoring = linerOnlineMonitor
            rwequipment.presencesulphideso2 = presenceSulphideOP
            rwequipment.presencesulphideso2shutdown = presenceSulphideShut
            rwequipment.componentiswelded = componentWelded
            rwequipment.tankismaintained = tankIsMaintain
            rwequipment.adjustmentsettle = data['adjustSettlement']
            rwequipment.externalenvironment = data['extEnvironment']
            rwequipment.environmentsensitivity = data['EnvSensitivity']
            rwequipment.onlinemonitoring = data['onlineMonitor']
            rwequipment.thermalhistory = data['themalHistory']
            rwequipment.managementfactor = datafaci.managementfactor
            rwequipment.volume = data['equipmentVolumn']
            rwequipment.save()
            # print("5")
            rwcomponent.nominaldiameter = data['tankDiameter']
            rwcomponent.nominalthickness = data['NominalThickness']
            rwcomponent.currentthickness = data['currentThick']
            rwcomponent.minreqthickness = data['minRequireThick']
            rwcomponent.currentcorrosionrate = data['currentCorrosion']
            rwcomponent.shellheight = data['HeightEShellC']
            # print('tuantuantuan', rwcomponent.shellheight)
            rwcomponent.damagefoundinspection = damageFound
            rwcomponent.crackspresent = crackPresence
            rwcomponent.componentvolume = data['ComponentVolume']
            rwcomponent.weldjointefficiency = data['WeldJointeff']
            # rwcomponent.trampelements=trampElements
            rwcomponent.structuralthickness = data['structuralthickness']
            rwcomponent.releasepreventionbarrier = preventBarrier
            rwcomponent.concretefoundation = concreteFoundation
            rwcomponent.brinnelhardness = data['maxBrinnelHardness']
            rwcomponent.complexityprotrusion = data['complexProtrusion']
            rwcomponent.severityofvibration = data['severityVibration']
            rwcomponent.allowablestress = data['allowStress']
            rwcomponent.brittlefracturethickness = data['brittleThick']
            rwcomponent.fabricatedsteel = p1andp3
            rwcomponent.equipmentsatisfied = equipmentrequire
            rwcomponent.nominaloperatingconditions = operatingcondition
            rwcomponent.cetgreaterorequal = cet
            rwcomponent.cyclicservice = cyclicservice
            rwcomponent.equipmentcircuitshock = equipmentorCircuit
            rwcomponent.minstructuralthickness = minstruc
            rwcomponent.save()
            # print("6")
            rwstream.maxoperatingtemperature = data['maxOT']
            rwstream.maxoperatingpressure = data['maxOP']
            rwstream.minoperatingtemperature = data['minOT']
            rwstream.minoperatingpressure = data['minOP']
            rwstream.h2spartialpressure = data['H2Spressure']
            rwstream.criticalexposuretemperature = data['criticalTemp']
            rwstream.flowrate = data['flowrate']
            rwstream.tankfluidname = data['fluid']
            rwstream.fluidheight = data['fluidHeight']
            rwstream.fluidleavedikepercent = data['fluidLeaveDike']
            rwstream.fluidleavedikeremainonsitepercent = data['fluidOnsite']
            rwstream.fluidgooffsitepercent = data['fluidOffsite']
            rwstream.naohconcentration = data['naohConcent']
            rwstream.releasefluidpercenttoxic = data['releasePercentToxic']
            rwstream.chloride = data['chlorideIon']
            rwstream.co3concentration = data['co3']
            rwstream.h2sinwater = data['h2sContent']
            rwstream.waterph = data['PHWater']
            rwstream.exposedtogasamine = exposedAmine
            rwstream.aminesolution = data['amineSolution']
            rwstream.exposuretoamine = data['exposureAmine']
            rwstream.aqueousoperation = aqueosOP
            rwstream.h2s = environtH2S
            rwstream.aqueousshutdown = aqueosShut
            rwstream.cyanide = cyanidesPresence
            rwstream.hydrofluoric = presentHF
            rwstream.caustic = environtCaustic
            rwstream.hydrogen = processContainHydro
            rwstream.materialexposedtoclint = materialChlorineIntern
            rwstream.exposedtosulphur = exposedSulfur
            rwstream.save()
            # print("7")
            rwexcor.minus12tominus8 = data['OP1']
            rwexcor.minus8toplus6 = data['OP2']
            rwexcor.plus6toplus32 = data['OP3']
            rwexcor.plus32toplus71 = data['OP4']
            rwexcor.plus71toplus107 = data['OP5']
            rwexcor.plus107toplus121 = data['OP6']
            rwexcor.plus121toplus135 = data['OP7']
            rwexcor.plus135toplus162 = data['OP8']
            rwexcor.plus162toplus176 = data['OP9']
            rwexcor.morethanplus176 = data['OP10']
            rwexcor.save()
            # print("8")

            rwcoat.internalcoating = internalCoating
            rwcoat.externalcoating = externalCoating
            rwcoat.externalcoatingdate = data['externalInstallDate']
            rwcoat.externalcoatingquality = data['externalCoatQuality']
            rwcoat.supportconfignotallowcoatingmaint = supportCoatingMaintain
            rwcoat.internalcladding = internalCladding
            rwcoat.claddingcorrosionrate = data['cladCorrosion']
            rwcoat.claddingthickness = data['CladdingThinkness']
            rwcoat.internallining = internalLinning
            rwcoat.internallinertype = data['internalLinnerType']
            rwcoat.internallinercondition = data['internalLinnerCondition']
            rwcoat.externalinsulation = extInsulation
            rwcoat.insulationcontainschloride = InsulationContainChloride
            rwcoat.externalinsulationtype = data['extInsulationType']
            rwcoat.insulationcondition = data['insulationCondition']
            rwcoat.save()

            # print("9")
            rwmaterial.materialname = data['materialName']
            rwmaterial.designtemperature = data['maxDesignTemp']
            rwmaterial.mindesigntemperature = data['minDesignTemp']
            rwmaterial.designpressure = data['designPressure']
            rwmaterial.referencetemperature = data['refTemp']
            rwmaterial.corrosionallowance = data['corrosionAllow']
            rwmaterial.carbonlowalloy = carbonLowAlloySteel
            rwmaterial.austenitic = austeniticSteel
            rwmaterial.nickelbased = nickelAlloy
            rwmaterial.chromemoreequal12 = chromium
            rwmaterial.sulfurcontent = data['sulfurContent']
            rwmaterial.heattreatment = data['heatTreatment']
            rwmaterial.ispta = materialPTA
            rwmaterial.ptamaterialcode = data['PTAMaterialGrade']
            rwmaterial.costfactor = data['materialCostFactor']
            rwmaterial.yieldstrength = data['yieldstrength']
            rwmaterial.tensilestrength = data['tensilestrength']
            rwmaterial.save()
            # print("10")
            rwinputca.fluid_height = data['fluidHeight']
            rwinputca.shell_course_height = data['HeightEShellC']
            rwinputca.tank_diametter = data['tankDiameter']
            rwinputca.prevention_barrier = preventBarrier
            rwinputca.environ_sensitivity = data['EnvSensitivity']
            rwinputca.p_lvdike = data['fluidLeaveDike']
            rwinputca.p_offsite = data['fluidOffsite']
            rwinputca.p_onsite = data['fluidOnsite']
            rwinputca.soil_type = data['soiltype']
            rwinputca.tank_fluid = data['fluid']
            rwinputca.api_fluid = apiFluid
            rwinputca.sw = data['distance']
            rwinputca.productioncost = data['productionCost']
            rwinputca.save()
            # print("ok")
            ReCalculate.ReCalculate(proposalID, request)
            return redirect('damgeFactor', proposalID=proposalID)
    except:
        raise Http404
    # print("TUAN-assdate", rwassessment.assessmentdate)
    # print("TUAN-assdate", assDate)
    # print("TUAN-comdate", rwassessment.commisstiondate)
    # print("TUAN-inclad", rwcoat.internalcladding)


    return render(request, 'FacilityUI/proposal/proposalTankEdit.html',
                  {'page': ''
                           'roposal', 'isshell': isshell, 'rwAss': rwassessment,
                   'rwEq': rwequipment, 'rwComp': rwcomponent,
                   'rwStream': rwstream, 'rwExcot': rwexcor,
                   'rwCoat': rwcoat, 'rwMaterial': rwmaterial, 'rwInputCa': rwinputca,
                   'assDate': assDate, 'extDate': extDate, 'comDate': comDate,
                   'componentID': comp.componentid,
                   'equipmentID': comp.equipmentid_id, 'info': request.session, 'noti': noti, 'countnoti': countnoti,
                   'count': count,'new':new, 'old':old, 'notiVerification':notiVerification,'siteid':siteid})


def RiskMatrix(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        fc = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
        locatAPI1 = {}
        locatAPI2 = {}
        locatAPI3 = {}
        locatAPI1['x'] = 0
        locatAPI1['y'] = 500

        locatAPI2['x'] = 0
        locatAPI2['y'] = 500

        locatAPI3['x'] = 0
        locatAPI3['y'] = 500

        df = models.RwFullPof.objects.get(id=proposalID)
        ca = models.RwFullFcof.objects.get(id=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        Ca = round(ca.fcofvalue, 2)
        DF1 = round(df.totaldfap1, 2)
        DF2 = round(df.totaldfap2, 2)
        DF3 = round(df.totaldfap3, 2)
    except:
        raise Http404
    return render(request, 'FacilityUI/risk_summary/riskMatrix.html',
                  {'page': 'riskMatrix', 'API1': location.locat(df.totaldfap1, ca.fcofvalue),
                   'API2': location.locat(df.totaldfap2, ca.fcofvalue),
                   'API3': location.locat(df.totaldfap3, ca.fcofvalue), 'DF1': DF1, 'DF2': DF2, 'DF3': DF3, 'ca': Ca,
                   'ass': rwAss, 'isTank': isTank, 'isShell': isShell, 'df': df, 'proposalID': proposalID,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid, 'fc':fc})


# def ShowGoverning(request, proposalID):
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     return render(request, 'FacilityUI/risk_summary/showGoverning.html',
#                   {'page': 'governing', 'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count})


def FullyConsequence(request, proposalID):  # Finance cof
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    data = {}
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        # print("go he")
        fc = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        rwstream = models.RwStream.objects.get(id=proposalID)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        if isBottom:
            bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
            data['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
            data['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
            data['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
            data['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
            data['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
            data['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
            data['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
            data['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
            data['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
            data['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
            data['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
            data['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
            data['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
            data['volume_ground_water_leak_d1'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d1)
            data['volume_ground_water_leak_d4'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d4)
            data['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
            data['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
            data['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
            data['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
            data['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
            data['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
            data['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
            data['material_factor'] = bottomConsequences.material_factor
            data['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
            data['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
            data['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
            data['consequencecategory'] = bottomConsequences.consequencecategory
            data['cofemmuacattegory'] = ReCalculate.emmua159comparecof(roundData.roundMoney(bottomConsequences.consequence))
            return render(request, 'FacilityUI/risk_summary/fullyBottomConsequence.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss,
                           'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,
                           'isTank': isBottom,
                           'isShell': isShell, 'fc':fc})
        elif isShell:
            shellConsequences = models.RwCaTank.objects.get(id=proposalID)
            rwfullcoftank = models.RWFullCofTank.objects.filter(id=proposalID)
            data['hydraulic_water'] = roundData.roundFC(shellConsequences.hydraulic_water)  # tuansua
            data['hydraulic_fluid'] = roundData.roundFC(shellConsequences.hydraulic_fluid)  # tuansua
            data['seepage_velocity'] = roundData.roundFC(shellConsequences.seepage_velocity)  # tuansua
            data['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
            data['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
            data['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
            data['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
            data['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
            data['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
            data['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
            data['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
            data['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
            data['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
            data['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
            data['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
            data['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
            data['liquid_height'] = roundData.roundFC(shellConsequences.liquid_height)
            data['volume_fluid'] = roundData.roundFC(shellConsequences.volume_fluid)
            data['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
            data['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
            data['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
            data['volume_ground_water_leak_d1'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d1)
            data['volume_ground_water_leak_d4'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d4)
            data['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
            data['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
            data['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
            data['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
            data['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
            data['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
            data['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
            data['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
            data['damage_surrounding_equipment_cost'] = roundData.roundMoney(
                shellConsequences.damage_surrounding_equipment_cost)
            data['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
            data['associated_personnel_injury_cost'] = roundData.roundMoney(
                shellConsequences.associated_personnel_injury_cost)
            data['consequence'] = roundData.roundMoney(shellConsequences.consequence)
            data['consequencecategory'] = shellConsequences.consequencecategory
            # tuansua
            data['material_factor'] = shellConsequences.material_factor
            data['barrel_dike_leak'] = roundData.roundFC(shellConsequences.barrel_dike_leak)
            data['barrel_onsite_leak'] = roundData.roundFC(shellConsequences.barrel_onsite_leak)
            data['barrel_offsite_leak'] = roundData.roundFC(shellConsequences.barrel_offsite_leak)
            data['barrel_water_leak'] = roundData.roundFC(shellConsequences.barrel_water_leak)
            data['fc_environ_leak'] = roundData.roundFC(shellConsequences.fc_environ_leak)
            data['cofemmuacattegory'] = ReCalculate.emmua159comparecof(roundData.roundMoney(shellConsequences.consequence))
            # bổ sung hiển thị 5 giá trị đầu vào và 3 kết quả đầu ra
            if rwfullcoftank.count() == 0:
                data['equip_cost'] = 0
                data['equip_outage_multiplier'] = 0
                data['prod_cost'] = 0
                data['pop_dens'] = 0
                data['inj_cost'] = 0
            else:
                rwfullcoftank = models.RWFullCofTank.objects.get(id=proposalID)
                data['equip_cost'] = rwfullcoftank.equipcost
                data['equip_outage_multiplier'] = rwfullcoftank.equipoutagemultiplier
                data['prod_cost'] = rwfullcoftank.prodcost
                data['pop_dens'] = rwfullcoftank.popdens
                data['inj_cost'] = rwfullcoftank.injcost
            # bo sung 5 tham số đầu vào
            if '_calculate' in request.POST:
                if request.method == 'POST':
                    data['equip_cost'] = request.POST.get('EquipCost')
                    data['equip_outage_multiplier'] = request.POST.get('EquipOutageMultiplier')
                    data['prod_cost'] = request.POST.get('ProdCost')
                    data['pop_dens'] = request.POST.get('PopDens')
                    data['inj_cost'] = request.POST.get('InjCost')
                    rwfullcoftank = models.RWFullCofTank(id=rwAss, equipcost=data['equip_cost'],
                                                         prodcost=data['prod_cost'],
                                                         equipoutagemultiplier=data['equip_outage_multiplier'],
                                                         popdens=data['pop_dens'], injcost=data['inj_cost'])
                    rwfullcoftank.save()
                    ReCalculate.ReCalculate(proposalID, request)
            return render(request, 'FacilityUI/risk_summary/fullyShellConsequence.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss,
                           'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,
                           'isTank': isBottom,
                           'isShell': isShell, 'fc':fc})
        else:
            # print("go normal")
            material = models.RwMaterial.objects.get(id=proposalID)
            rwholezize = models.RwFullCoFHoleSize.objects.get(id=proposalID)
            ca = models.RwCaLevel1.objects.get(id=proposalID)
            inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
            data['model_fluid'] = inputCa.api_fluid
            data['toxic_fluid'] = inputCa.toxic_fluid
            data['material_cost'] = material.costfactor
            data['phase_fluid_storage'] = rwstream.storagephase
            data['toxic_fluid_percentage'] = inputCa.toxic_percent
            data['api_com_type'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=component.apicomponenttypeid).apicomponenttypename
            data['process_unit'] = roundData.roundMoney(inputCa.process_unit)
            data['equip_outage_multiplier'] = roundData.roundMoney((inputCa.outage_multiplier))
            data['production_cost'] = roundData.roundMoney(inputCa.production_cost)
            data['equipment_cost'] = roundData.roundMoney(inputCa.injure_cost)
            data['personal_density'] = inputCa.personal_density
            data['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
            data['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
            data['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
            data['gff_small'] = rwholezize.gff_small
            data['gff_medium'] = rwholezize.gff_medium
            data['gff_large'] = rwholezize.gff_large
            data['gff_rupture'] = rwholezize.gff_rupture
            data['MATERIAL_COST'] = material.costfactor
            data['max_operating_pressure'] = rwstream.maxoperatingpressure * 1000
            caflammable = CA_Flammable.CA_Flammable(data['model_fluid'], data['phase_fluid_storage'],
                                                    inputCa.mitigation_system, proposalID,
                                                    rwstream.maxoperatingtemperature,
                                                    data['api_com_type'], data['toxic_fluid_percentage'],
                                                    data['toxic_fluid'])
            catoxic = ToxicConsequenceArea.CA_Toxic(proposalID, inputCa.toxic_fluid, caflammable.ReleasePhase(),
                                                    data['toxic_fluid_percentage'], data['api_com_type'],
                                                    data['model_fluid'], data['max_operating_pressure'])
            data['CA_cmd'] = max(caflammable.CA_Flam_Cmd(), caflammable.CA_Flam_Cmd_toxic())
            data['CA_inj'] = max(caflammable.CA_Flam_inj(), caflammable.CA_Flam_inj_toxic(), catoxic.CA_toxic_inj(),
                                 catoxic.CA_toxic_inj2(), catoxic.NoneCA_leck())
            fullcof = FinancialCOF.FinancialCOF(proposalID, data['model_fluid'], data['toxic_fluid'],
                                                data['toxic_fluid_percentage'], data['api_com_type'],
                                                data['MATERIAL_COST'], data['CA_cmd'], data['CA_inj'],
                                                data['phase_fluid_storage'], inputCa.mitigation_system,
                                                rwstream.maxoperatingtemperature, data['max_operating_pressure'])
            data['Damage_outage_small'] = fullcof.outage_cmd_n(1)
            data['Damage_outage_medium'] = fullcof.outage_cmd_n(2)
            data['Damage_outage_large'] = fullcof.outage_cmd_n(3)
            data['Damage_outage_rupture'] = fullcof.outage_cmd_n(4)
            data['Equiment_cost_small'] = fullcof.HoleCost(1)
            data['Equiment_cost_medium'] = fullcof.HoleCost(2)
            data['Equiment_cost_large'] = fullcof.HoleCost(3)
            data['Equiment_cost_rupture'] = fullcof.HoleCost(4)
            data['frac_evap'] = roundData.roundFC(fullcof.frac_evap())
            data['FC_cmd'] = roundData.roundFC(fullcof.FC_cmd())
            data['FC_affa'] = roundData.roundFC(fullcof.FC_affa())
            data['outage_affa'] = roundData.roundFC(fullcof.Outage_affa())
            data['FC_prod'] = roundData.roundFC(fullcof.FC_prod())
            data['FC_inj'] = roundData.roundFC(fullcof.FC_inj())
            data['FC_env'] = roundData.roundFC(fullcof.FC_environ())
            data['outage_cmd'] = roundData.roundFC(fullcof.outage_cmd())
            if fullcof.FC_total()==0:
                data['fc_total'] = 100000000
            else:
                data['fc_total'] = roundData.roundFC(fullcof.FC_total())
            if data['fc_total'] == 100000000:
                data['fcof_category'] = 'E'
            else:
                data['fcof_category'] = fullcof.FC_Category()

            data['cofemmuacattegory'] = ReCalculate.emmua159comparecof(roundData.roundFC(fullcof.FC_total()))
            if "_viewlv2" in request.POST:
                filter=models.RwInputCaLevel2.objects.filter(id=rwAss)
                print('kha banh', filter.count())
                if(filter.count()==0):
                    rwinputcalevel2 = models.RwInputCaLevel2(id=rwAss, Psat=0, Frac_l=0,
                                                             Frac_v=0,
                                                             Lower_flammable=0,
                                                             Upper_flammable=0,
                                                             Hcs=0, temp_flash=0,
                                                             Fract_flash=0,
                                                             Heat_combustion_l=0,
                                                             Heat_combustion_v=0,
                                                             temp_bubble=0, temp_dew=0,
                                                             delta=0, surface="",
                                                             temp_ground=0, pressure_bp=0,
                                                             wind_speed_measured=0,
                                                             mfrac_flam=0, temp_fp=0,
                                                             atmospheric_temp=0,
                                                             atmospheric_air_density=0,
                                                             atmospheric_rh=0, atmospheric_wrp=0,
                                                             brust_pressure=0, xs_fball=0,
                                                             yield_factor=0, tox_lim=0,
                                                             mol_frac_tox=0,
                                                             equipment_stored_vapor=0, n_v=0)
                    rwinputcalevel2.save()
                return redirect('fullyConsequencelv2', proposalID)
            return render(request, 'FacilityUI/risk_summary/fullyNormalConsequence.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss,
                           'info': request.session, 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                           'isTank': isBottom,
                           'isShell': isShell, 'fc':fc})
    except Exception as e:
        print(e)
        raise Http404


def AreaBasedCoF(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    data = {}
    try:
        fc = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        # datdz sua
        if isShell:
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwinputca = models.RwInputCaTank.objects.get(id=proposalID)
            countRwcatank = models.RwCaTank.objects.filter(id=proposalID)
            countRefullPOF = models.RwFullPof.objects.filter(id=proposalID)
            damageMachinsm = models.RwDamageMechanism.objects.filter(id_dm=proposalID)
            countRefullfc = models.RwFullFcof.objects.filter(id=proposalID)
            chart = models.RwDataChart.objects.filter(id=proposalID)
            FullFCof = models.RwFullFcof.objects.filter(id=proposalID)
            rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            eq = models.EquipmentMaster.objects.get(equipmentid=rwassessment.equipmentid_id)
            target = models.FacilityRiskTarget.objects.get(facilityid=eq.facilityid_id)
            datafaci = models.Facility.objects.get(facilityid=eq.facilityid_id)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)

            cashell = CA_CAL.CA_SHELL(rwinputca.api_fluid, rwstream.fluidheight, rwinputca.shell_course_height,
                                      rwinputca.tank_diametter,
                                      rwinputca.environ_sensitivity,
                                      rwstream.fluidleavedikepercent, rwstream.fluidleavedikeremainonsitepercent,
                                      rwstream.fluidgooffsitepercent, rwmaterial.costfactor,
                                      models.ApiComponentType.objects.get(
                                          apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename,
                                      rwinputca.productioncost, rwinputca.soil_type,
                                      rwinputca.tank_fluid, rwcomponent.shellheight, rwinputca.productioncost,
                                      rwFullCofTank.equipoutagemultiplier,
                                      rwFullCofTank.equipcost, rwFullCofTank.popdens, rwFullCofTank.injcost,
                                      rwstream.releasefluidpercenttoxic, rwstream.storagephase, proposalID)
            data['hydraulic_water'] = roundData.roundFC(cashell.k_h_water())
            data['hydraulic_fluid'] = roundData.roundFC(cashell.k_h_prod())
            data['product_velocity'] = roundData.roundFC(cashell.vel_s_prod())
            data['flow_rate_d1'] = roundData.roundFC(cashell.W_n_Tank(1))
            data['flow_rate_d2'] = roundData.roundFC(cashell.W_n_Tank(2))
            data['flow_rate_d3'] = roundData.roundFC(cashell.W_n_Tank(3))
            data['flow_rate_d4'] = roundData.roundFC(cashell.W_n_Tank(4))
            data['liquid_height_shell'] = roundData.roundFC(cashell.LHT_above())
            data['fluid_above'] = roundData.roundFC(cashell.Lvol_abouve())
            data['area_small'] = roundData.roundFC(cashell.a_n_shell(1))
            data['area_medium'] = roundData.roundFC(cashell.a_n_shell(2))
            data['area_large'] = roundData.roundFC(cashell.a_n_shell(3))
            data['area_rupture'] = roundData.roundFC(cashell.a_n_shell(4))
            data['leak_duration_d1'] = roundData.roundFC(cashell.ld_tank(1))
            data['leak_duration_d2'] = roundData.roundFC(cashell.ld_tank(2))
            data['leak_duration_d3'] = roundData.roundFC(cashell.ld_tank(3))
            data['leak_duration_d4'] = roundData.roundFC(cashell.ld_tank(4))
            data['release_volume_leak_d1'] = roundData.roundFC(cashell.Bbl_leak_n(1))
            data['release_volume_leak_d2'] = roundData.roundFC(cashell.Bbl_leak_n(2))
            data['release_volume_leak_d3'] = roundData.roundFC(cashell.Bbl_leak_n(3))
            data['release_volume_leak_d4'] = roundData.roundFC(cashell.Bbl_leak_n(4))
            data['release_volume_rupture'] = roundData.roundFC(cashell.Bbl_leak_release())
            data['release_rate_1'] = roundData.roundFC(cashell.rate_Flammable(1))
            data['release_rate_2'] = roundData.roundFC(cashell.rate_Flammable(2))
            data['release_rate_3'] = roundData.roundFC(cashell.rate_Flammable(3))
            data['release_rate_4'] = roundData.roundFC(cashell.rate_Flammable(4))
            data['cainl_cmd_a'] = cashell.a_cmd(1)
            data['cainl_cmd_b'] = cashell.b_cmd(1)
            data['cail_cmd_a'] = cashell.a_cmd(2)
            data['cail_cmd_b'] = cashell.b_cmd(2)

            data['cainl_inj_a'] = cashell.a_inj(1)
            data['cainl_inj_b'] = cashell.b_inj(1)
            data['cail_inj_a'] = cashell.a_inj(2)
            data['cail_inj_b'] = cashell.b_inj(2)

            data['ca_cmd_ainl_cont_1'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 1))
            data['ca_cmd_ainl_cont_2'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 2))
            data['ca_cmd_ainl_cont_3'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 3))
            data['ca_cmd_ainl_cont_4'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 4))

            data['ca_cmd_ail_cont_1'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 1))
            data['ca_cmd_ail_cont_2'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 2))
            data['ca_cmd_ail_cont_3'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 3))
            data['ca_cmd_ail_cont_4'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 4))

            data['ca_inj_ainl_cont_1'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 1))
            data['ca_inj_ainl_cont_2'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 2))
            data['ca_inj_ainl_cont_3'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 3))
            data['ca_inj_ainl_cont_4'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 4))

            data['ca_inj_ail_cont_1'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 1))
            data['ca_inj_ail_cont_2'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 2))
            data['ca_inj_ail_cont_3'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 3))
            data['ca_inj_ail_cont_4'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 4))

            data['blend_ca_cmd_ainl_cont_1'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 1))
            data['blend_ca_cmd_ainl_cont_2'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 2))
            data['blend_ca_cmd_ainl_cont_3'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 3))
            data['blend_ca_cmd_ainl_cont_4'] = roundData.roundFC(cashell.ca_cmdn_ainl_cont(1, 4))

            data['blend_ca_cmd_ail_cont_1'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 1))
            data['blend_ca_cmd_ail_cont_2'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 2))
            data['blend_ca_cmd_ail_cont_3'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 3))
            data['blend_ca_cmd_ail_cont_4'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 4))

            data['blend_ca_inj_ainl_cont_1'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 1))
            data['blend_ca_inj_ainl_cont_2'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 2))
            data['blend_ca_inj_ainl_cont_3'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 3))
            data['blend_ca_inj_ainl_cont_4'] = roundData.roundFC(cashell.ca_inj_ainl_cont(1, 4))

            data['blend_ca_inj_ail_cont_1'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 1))
            data['blend_ca_inj_ail_cont_2'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 2))
            data['blend_ca_inj_ail_cont_3'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 3))
            data['blend_ca_inj_ail_cont_4'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 4))

            data['AIT_cmd_ca_1'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 1))
            data['AIT_cmd_ca_2'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 2))
            data['AIT_cmd_ca_3'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 3))
            data['AIT_cmd_ca_4'] = roundData.roundFC(cashell.ca_cmdn_ail_cont(2, 4))

            data['AIT_inj_ca_1'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 1))
            data['AIT_inj_ca_2'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 2))
            data['AIT_inj_ca_3'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 3))
            data['AIT_inj_ca_4'] = roundData.roundFC(cashell.ca_inj_ail_cont(2, 4))

            data['CA_Flam_Cmd_shell'] = roundData.roundFC(cashell.CA_Flam_Cmd_shell())
            data['CA_Flam_inj_shell'] = roundData.roundFC(cashell.CA_Flam_inj_shell())

            data['ld_toxic_shell_1'] = roundData.roundFC(cashell.leakDurationToxic(1))
            data['ld_toxic_shell_2'] = roundData.roundFC(cashell.leakDurationToxic(2))
            data['ld_toxic_shell_3'] = roundData.roundFC(cashell.leakDurationToxic(3))
            data['ld_toxic_shell_4'] = roundData.roundFC(cashell.leakDurationToxic(4))
            data['mass_rate_shell_1'] = roundData.roundFC(cashell.releaseRateMass(1))
            data['mass_rate_shell_2'] = roundData.roundFC(cashell.releaseRateMass(2))
            data['mass_rate_shell_3'] = roundData.roundFC(cashell.releaseRateMass(3))
            data['mass_rate_shell_4'] = roundData.roundFC(cashell.releaseRateMass(4))

            data['Constant_C_1'] = roundData.roundFC(cashell.ConstC(1))
            data['Constant_C_2'] = roundData.roundFC(cashell.ConstC(2))
            data['Constant_C_3'] = roundData.roundFC(cashell.ConstC(3))
            data['Constant_C_4'] = roundData.roundFC(cashell.ConstC(4))
            data['Constant_D_1'] = roundData.roundFC(cashell.ConstD(1))
            data['Constant_D_2'] = roundData.roundFC(cashell.ConstD(2))
            data['Constant_D_3'] = roundData.roundFC(cashell.ConstD(3))
            data['Constant_D_4'] = roundData.roundFC(cashell.ConstD(4))

            data['CA_toxic_shell1'] = roundData.roundFC(cashell.toxic_Inj(1))
            data['CA_toxic_shell2'] = roundData.roundFC(cashell.toxic_Inj(2))
            data['CA_toxic_shell3'] = roundData.roundFC(cashell.toxic_Inj(3))
            data['CA_toxic_shell4'] = roundData.roundFC(cashell.toxic_Inj(4))
            data['CA_toxic_fi'] = roundData.roundFC(cashell.total_toxic_Inj())

            data['CA_final_Com'] = roundData.roundFC(cashell.CA_Flam_Cmd_shell())
            data['CA_final_Per'] = roundData.roundFC(cashell.max_total_inj())
            data['CA_final'] = roundData.roundFC(cashell.FC_total_shell())
            return render(request, 'FacilityUI/risk_summary/areaBasedCoFforShell.html',
                          {'page': 'AreaBasedCoFShell', 'noti': noti, 'countnoti': countnoti, 'count': count,
                           'proposalID': proposalID, 'ass': rwAss, 'data': data, 'info': request.session,
                           'isTank': isBottom,
                           'isShell': isShell, 'fc':fc})
        elif isBottom:
            bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
        else:
            print("go normal")
            ca = models.RwCaLevel1.objects.get(id=proposalID)
            apiComType = models.ApiComponentType.objects.get(apicomponenttypeid=component.apicomponenttypeid)
            inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwcalevel1 = models.RwCaLevel1.objects.get(id=proposalID)
            rwcofholesize = models.RwFullCoFHoleSize.objects.get(id=proposalID)
            data['ca_final'] = ca.ca_final
            data['fcof_category'] = ca.fcof_category
            data['api_comp_type'] = apiComType.apicomponenttypename
            data['diameter'] = rwcomponent.nominaldiameter
            data['liquidlevel'] = rwstream.liquidlevel
            data['componentvolume'] = rwcomponent.componentvolume
            data['model_fluid'] = inputCa.api_fluid
            data['toxic_fluid'] = inputCa.toxic_fluid
            data['toxic_fluid_percentage'] = inputCa.toxic_percent
            data['phase_fluid_storage'] = rwstream.storagephase
            data['max_operating_temp'] = rwstream.maxoperatingtemperature
            data['max_operating_pressure'] = rwstream.maxoperatingpressure * 1000
            data['ambient_state'] = rwcalevel1.ambient
            data['ideal_gas'] = rwcalevel1.ideal_gas
            data['ideal_gas_ratio'] = rwcalevel1.ideal_gas_ratio
            data['release_magnitude'] = rwcalevel1.fact_di
            data['liquid_density'] = rwcalevel1.liquid_density
            data['CA_reduction'] = rwcalevel1.fact_mit
            data['auto_ignition'] = rwcalevel1.auto_ignition
            data['release_phase'] = rwcalevel1.release_phase
            data['mw'] = rwcalevel1.mw
            data['nbp'] = rwcalevel1.nbp
            data['api_com_type'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=component.apicomponenttypeid).apicomponenttypename
            data['model_fluid_type'] = rwcalevel1.model_fluid_type
            data['toxic_fluid_type'] = rwcalevel1.toxic_fluid_type
            data['an_small'] = roundData.roundFC(rwcofholesize.an_small)
            data['an_medium'] = roundData.roundFC(rwcofholesize.an_medium)
            data['an_large'] = roundData.roundFC(rwcofholesize.an_large)
            data['an_rupture'] = roundData.roundFC(rwcofholesize.an_rupture)
            data['wn_small'] = roundData.roundFC(rwcofholesize.wn_small)
            data['wn_medium'] = roundData.roundFC(rwcofholesize.wn_medium)
            data['wn_large'] = roundData.roundFC(rwcofholesize.wn_large)
            data['wn_rupture'] = roundData.roundFC(rwcofholesize.wn_rupture)
            data['gff_n_small'] = rwcofholesize.gff_small
            data['gff_n_medium'] = rwcofholesize.gff_medium
            data['gff_n_large'] = rwcofholesize.gff_large
            data['gff_n_rupture'] = rwcofholesize.gff_rupture
            data['mass_add_n_small'] = roundData.roundFC(rwcofholesize.mass_add_n_small)
            data['mass_add_n_medium'] = roundData.roundFC(rwcofholesize.mass_add_n_medium)
            data['mass_add_n_large'] = roundData.roundFC(rwcofholesize.mass_add_n_large)
            data['mass_add_n_rupture'] = roundData.roundFC(rwcofholesize.mass_add_n_rupture)
            data['mass_avail_n_small'] = roundData.roundFC(rwcofholesize.mass_avail_n_small)
            data['mass_avail_n_medium'] = roundData.roundFC(rwcofholesize.mass_avail_n_medium)
            data['mass_avail_n_large'] = roundData.roundFC(rwcofholesize.mass_avail_n_large)
            data['mass_avail_n_rupture'] = roundData.roundFC(rwcofholesize.mass_avail_n_rupture)
            data['t_n_small'] = roundData.roundFC(rwcofholesize.t_n_small)
            data['t_n_medium'] = roundData.roundFC(rwcofholesize.t_n_medium)
            data['t_n_large'] = roundData.roundFC(rwcofholesize.t_n_large)
            data['t_n_rupture'] = roundData.roundFC(rwcofholesize.t_n_rupture)
            data['releasetype_small'] = rwcofholesize.releasetype_small[0:8]
            data['releasetype_medium'] = rwcofholesize.releasetype_medium[0:8]
            data['releasetype_large'] = rwcofholesize.releasetype_large[0:8]
            data['releasetype_rupture'] = rwcofholesize.releasetype_rupture[0:8]
            data['ld_max_n_small'] = rwcofholesize.ld_max_n_small
            data['ld_max_n_medium'] = rwcofholesize.ld_max_n_medium
            data['ld_max_n_large'] = rwcofholesize.ld_max_n_large
            data['ld_max_n_rupture'] = rwcofholesize.ld_max_n_rupture
            data['rate_n_small'] = roundData.roundFC(rwcofholesize.rate_n_small)
            data['rate_n_medium'] = roundData.roundFC(rwcofholesize.rate_n_medium)
            data['rate_n_large'] = roundData.roundFC(rwcofholesize.rate_n_large)
            data['rate_n_rupture'] = roundData.roundFC(rwcofholesize.rate_n_rupture)
            data['ld_n_small'] = roundData.roundFC(rwcofholesize.ld_n_small)
            data['ld_n_medium'] = roundData.roundFC(rwcofholesize.ld_n_medium)
            data['ld_n_large'] = roundData.roundFC(rwcofholesize.ld_n_large)
            data['ld_n_rupture'] = roundData.roundFC(rwcofholesize.ld_n_rupture)
            data['mass_n_small'] = roundData.roundFC(rwcofholesize.mass_n_small)
            data['mass_n_medium'] = roundData.roundFC(rwcofholesize.mass_n_medium)
            data['mass_n_large'] = roundData.roundFC(rwcofholesize.mass_n_large)
            data['mass_n_rupture'] = roundData.roundFC(rwcofholesize.mass_n_rupture)

            caflammable = CA_Flammable.CA_Flammable(data['model_fluid'], data['phase_fluid_storage'],
                                                    inputCa.mitigation_system, proposalID,
                                                    rwstream.maxoperatingtemperature,
                                                    data['api_com_type'], data['toxic_fluid_percentage'],
                                                    data['toxic_fluid'])
            catoxic = ToxicConsequenceArea.CA_Toxic(proposalID, inputCa.toxic_fluid, caflammable.ReleasePhase(),
                                                    data['toxic_fluid_percentage'], data['api_com_type'],
                                                    data['model_fluid'], data['max_operating_pressure'])

            # Consequence Analysis Properties
            data['Phase_of_Fluid'] = caflammable.ambient()
            data['release_phase_n'] = caflammable.ReleasePhase()
            # flammable CA_model
            data['cainl_cmd_a'] = caflammable.a_cmd(1)
            data['cainl_cmd_b'] = caflammable.b_cmd(1)
            data['cail_cmd_a'] = caflammable.a_cmd(2)
            data['cail_cmd_b'] = caflammable.b_cmd(2)
            data['iainl_cmd_a'] = caflammable.a_cmd(3)
            data['iainl_cmd_b'] = caflammable.b_cmd(3)
            data['iail_cmd_a'] = caflammable.a_cmd(4)
            data['iail_cmd_b'] = caflammable.b_cmd(4)

            data['cainl_inj_a'] = caflammable.a_inj(1)
            data['cainl_inj_b'] = caflammable.b_inj(1)
            data['cail_inj_a'] = caflammable.a_inj(2)
            data['cail_inj_b'] = caflammable.b_inj(2)
            data['iainl_inj_a'] = caflammable.a_inj(3)
            data['iainl_inj_b'] = caflammable.b_inj(3)
            data['iail_inj_a'] = caflammable.a_inj(4)
            data['iail_inj_b'] = caflammable.b_inj(4)

            data['cainl_cmd_cont_small'] = roundData.roundFC(caflammable.ca_cmdn_cont(1, 1))
            data['cainl_cmd_cont_medium'] = roundData.roundFC(caflammable.ca_cmdn_cont(1, 2))
            data['cainl_cmd_cont_large'] = roundData.roundFC(caflammable.ca_cmdn_cont(1, 3))
            data['cainl_cmd_cont_rupture'] = roundData.roundFC(caflammable.ca_cmdn_cont(1, 4))
            data['cail_cmd_cont_small'] = roundData.roundFC(caflammable.ca_cmdn_cont(2, 1))
            data['cail_cmd_cont_medium'] = roundData.roundFC(caflammable.ca_cmdn_cont(2, 2))
            data['cail_cmd_cont_large'] = roundData.roundFC(caflammable.ca_cmdn_cont(2, 3))
            data['cail_cmd_cont_rupture'] = roundData.roundFC(caflammable.ca_cmdn_cont(2, 4))
            data['iainl_cmd_cont_small'] = roundData.roundFC(caflammable.ca_cmdn_inst(3, 1))
            data['iainl_cmd_cont_medium'] = roundData.roundFC(caflammable.ca_cmdn_inst(3, 2))
            data['iainl_cmd_cont_large'] = roundData.roundFC(caflammable.ca_cmdn_inst(3, 3))
            data['iainl_cmd_cont_rupture'] = roundData.roundFC(caflammable.ca_cmdn_inst(3, 4))
            data['iail_cmd_cont_small'] = roundData.roundFC(caflammable.ca_cmdn_inst(4, 1))
            data['iail_cmd_cont_medium'] = roundData.roundFC(caflammable.ca_cmdn_inst(4, 2))
            data['iail_cmd_cont_large'] = roundData.roundFC(caflammable.ca_cmdn_inst(4, 3))
            data['iail_cmd_cont_rupture'] = roundData.roundFC(caflammable.ca_cmdn_inst(4, 4))

            data['cainl_inj_cont_small'] = roundData.roundFC(caflammable.ca_injn_cont(1, 1))
            data['cainl_inj_cont_medium'] = roundData.roundFC(caflammable.ca_injn_cont(1, 2))
            data['cainl_inj_cont_large'] = roundData.roundFC(caflammable.ca_injn_cont(1, 3))
            data['cainl_inj_cont_rupture'] = roundData.roundFC(caflammable.ca_injn_cont(1, 4))
            data['cail_inj_cont_small'] = roundData.roundFC(caflammable.ca_injn_cont(2, 1))
            data['cail_inj_cont_medium'] = roundData.roundFC(caflammable.ca_injn_cont(2, 2))
            data['cail_inj_cont_large'] = roundData.roundFC(caflammable.ca_injn_cont(2, 3))
            data['cail_inj_cont_rupture'] = roundData.roundFC(caflammable.ca_injn_cont(2, 4))
            data['iainl_inj_cont_small'] = roundData.roundFC(caflammable.ca_injn_inst(3, 1))
            data['iainl_inj_cont_medium'] = roundData.roundFC(caflammable.ca_injn_inst(3, 2))
            data['iainl_inj_cont_large'] = roundData.roundFC(caflammable.ca_injn_inst(3, 3))
            data['iainl_inj_cont_rupture'] = roundData.roundFC(caflammable.ca_injn_inst(3, 4))
            data['iail_inj_cont_small'] = roundData.roundFC(caflammable.ca_injn_inst(4, 1))
            data['iail_inj_cont_medium'] = roundData.roundFC(caflammable.ca_injn_inst(4, 2))
            data['iail_inj_cont_large'] = roundData.roundFC(caflammable.ca_injn_inst(4, 3))
            data['iail_inj_cont_rupture'] = roundData.roundFC(caflammable.ca_injn_inst(4, 4))

            data['blemding_cmd_ainl_small'] = roundData.roundFC(caflammable.CA_AINL_CMD_n(1))
            data['blemding_cmd_ainl_medium'] = roundData.roundFC(caflammable.CA_AINL_CMD_n(2))
            data['blemding_cmd_ainl_large'] = roundData.roundFC(caflammable.CA_AINL_CMD_n(3))
            data['blemding_cmd_ainl_rupture'] = roundData.roundFC(caflammable.CA_AINL_CMD_n(4))

            data['blemding_cmd_ail_small'] = roundData.roundFC(caflammable.CA_AIL_CMD_n(1))
            data['blemding_cmd_ail_medium'] = roundData.roundFC(caflammable.CA_AIL_CMD_n(2))
            data['blemding_cmd_ail_large'] = roundData.roundFC(caflammable.CA_AIL_CMD_n(3))
            data['blemding_cmd_ail_rupture'] = roundData.roundFC(caflammable.CA_AIL_CMD_n(4))

            data['blemding_inj_ainl_small'] = roundData.roundFC(caflammable.CA_AINL_INJ_n(1))
            data['blemding_inj_ainl_medium'] = roundData.roundFC(caflammable.CA_AINL_INJ_n(2))
            data['blemding_inj_ainl_large'] = roundData.roundFC(caflammable.CA_AINL_INJ_n(3))
            data['blemding_inj_ainl_rupture'] = roundData.roundFC(caflammable.CA_AINL_INJ_n(4))

            data['blemding_inj_ail_small'] = roundData.roundFC(caflammable.CA_AIL_INJ_n(1))
            data['blemding_inj_ail_medium'] = roundData.roundFC(caflammable.CA_AIL_INJ_n(2))
            data['blemding_inj_ail_large'] = roundData.roundFC(caflammable.CA_AIL_INJ_n(3))
            data['blemding_inj_ail_rupture'] = roundData.roundFC(caflammable.CA_AIL_INJ_n(4))

            data['ALT_cmd_small'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n(1))
            data['ALT_cmd_medium'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n(2))
            data['ALT_cmd_large'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n(3))
            data['ALT_cmd_rupture'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n(4))

            data['ALT_inj_small'] = roundData.roundFC(caflammable.CA_Flam_inj_n(1))
            data['ALT_inj_medium'] = roundData.roundFC(caflammable.CA_Flam_inj_n(2))
            data['ALT_inj_large'] = roundData.roundFC(caflammable.CA_Flam_inj_n(3))
            data['ALT_inj_rupture'] = roundData.roundFC(caflammable.CA_Flam_inj_n(4))

            data['eneff_n_small'] = rwcofholesize.eneff_n_small
            data['eneff_n_medium'] = rwcofholesize.eneff_n_medium
            data['eneff_n_large'] = rwcofholesize.eneff_n_large
            data['eneff_n_rupture'] = rwcofholesize.eneff_n_rupture
            data['factIC_n_small'] = roundData.roundFC(rwcofholesize.factIC_n_small)
            data['factIC_n_medium'] = roundData.roundFC(rwcofholesize.factIC_n_medium)
            data['factIC_n_large'] = roundData.roundFC(rwcofholesize.factIC_n_large)
            data['factIC_n_rupture'] = roundData.roundFC(rwcofholesize.factIC_n_rupture)

            data['ca_flam_cmd'] = roundData.roundFC(caflammable.CA_Flam_Cmd())
            data['ca_flam_inj'] = roundData.roundFC(caflammable.CA_Flam_inj())
            # Flammable CA_toxic
            data['cainl_cmd_a_toxic'] = caflammable.a_cmd_toxic(1)
            data['cainl_cmd_b_toxic'] = caflammable.b_cmd_toxic(1)
            data['cail_cmd_a_toxic'] = caflammable.a_cmd_toxic(2)
            data['cail_cmd_b_toxic'] = caflammable.b_cmd_toxic(2)
            data['iainl_cmd_a_toxic'] = caflammable.a_cmd_toxic(3)
            data['iainl_cmd_b_toxic'] = caflammable.b_cmd_toxic(3)
            data['iail_cmd_a_toxic'] = caflammable.a_cmd_toxic(4)
            data['iail_cmd_b_toxic'] = caflammable.b_cmd_toxic(4)

            data['cainl_inj_a_toxic'] = caflammable.a_inj_toxic(1)
            data['cainl_inj_b_toxic'] = caflammable.b_inj_toxic(1)
            data['cail_inj_a_toxic'] = caflammable.a_inj_toxic(2)
            data['cail_inj_b_toxic'] = caflammable.b_inj_toxic(2)
            data['iainl_inj_a_toxic'] = caflammable.a_inj_toxic(3)
            data['iainl_inj_b_toxic'] = caflammable.b_inj_toxic(3)
            data['iail_inj_a_toxic'] = caflammable.a_inj_toxic(4)
            data['iail_inj_b_toxic'] = caflammable.b_inj_toxic(4)

            data['cainl_cmd_cont_small_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(1, 1))
            data['cainl_cmd_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(1, 2))
            data['cainl_cmd_cont_large_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(1, 3))
            data['cainl_cmd_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(1, 4))
            data['cail_cmd_cont_small_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(2, 1))
            data['cail_cmd_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(2, 2))
            data['cail_cmd_cont_large_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(2, 3))
            data['cail_cmd_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_cmdn_cont_toxic(2, 4))
            data['iainl_cmd_cont_small_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(3, 1))
            data['iainl_cmd_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(3, 2))
            data['iainl_cmd_cont_large_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(3, 3))
            data['iainl_cmd_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(3, 4))
            data['iail_cmd_cont_small_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(4, 1))
            data['iail_cmd_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(4, 2))
            data['iail_cmd_cont_large_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(4, 3))
            data['iail_cmd_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_cmdn_inst_toxic(4, 4))

            data['cainl_inj_cont_small_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(1, 1))
            data['cainl_inj_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(1, 2))
            data['cainl_inj_cont_large_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(1, 3))
            data['cainl_inj_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(1, 4))
            data['cail_inj_cont_small_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(2, 1))
            data['cail_inj_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(2, 2))
            data['cail_inj_cont_large_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(2, 3))
            data['cail_inj_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_injn_cont_toxic(2, 4))
            data['iainl_inj_cont_small_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(3, 1))
            data['iainl_inj_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(3, 2))
            data['iainl_inj_cont_large_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(3, 3))
            data['iainl_inj_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(3, 4))
            data['iail_inj_cont_small_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(4, 1))
            data['iail_inj_cont_medium_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(4, 2))
            data['iail_inj_cont_large_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(4, 3))
            data['iail_inj_cont_rupture_toxic'] = roundData.roundFC(caflammable.ca_injn_inst_toxic(4, 4))

            data['blemding_cmd_ainl_small_toxic'] = roundData.roundFC(caflammable.CA_AINL_CMD_n_toxic(1))
            data['blemding_cmd_ainl_medium_toxic'] = roundData.roundFC(caflammable.CA_AINL_CMD_n_toxic(2))
            data['blemding_cmd_ainl_large_toxic'] = roundData.roundFC(caflammable.CA_AINL_CMD_n_toxic(3))
            data['blemding_cmd_ainl_rupture_toxic'] = roundData.roundFC(caflammable.CA_AINL_CMD_n_toxic(4))

            data['blemding_cmd_ail_small_toxic'] = roundData.roundFC(caflammable.CA_AIL_CMD_n_toxic(1))
            data['blemding_cmd_ail_medium_toxic'] = roundData.roundFC(caflammable.CA_AIL_CMD_n_toxic(2))
            data['blemding_cmd_ail_large_toxic'] = roundData.roundFC(caflammable.CA_AIL_CMD_n_toxic(3))
            data['blemding_cmd_ail_rupture_toxic'] = roundData.roundFC(caflammable.CA_AIL_CMD_n_toxic(4))

            data['blemding_inj_ainl_small_toxic'] = roundData.roundFC(caflammable.CA_AINL_INJ_n_toxic(1))
            data['blemding_inj_ainl_medium_toxic'] = roundData.roundFC(caflammable.CA_AINL_INJ_n_toxic(2))
            data['blemding_inj_ainl_large_toxic'] = roundData.roundFC(caflammable.CA_AINL_INJ_n_toxic(3))
            data['blemding_inj_ainl_rupture_toxic'] = roundData.roundFC(caflammable.CA_AINL_INJ_n_toxic(4))

            data['blemding_inj_ail_small_toxic'] = roundData.roundFC(caflammable.CA_AIL_INJ_n_toxic(1))
            data['blemding_inj_ail_medium_toxic'] = roundData.roundFC(caflammable.CA_AIL_INJ_n_toxic(2))
            data['blemding_inj_ail_large_toxic'] = roundData.roundFC(caflammable.CA_AIL_INJ_n_toxic(3))
            data['blemding_inj_ail_rupture_toxic'] = roundData.roundFC(caflammable.CA_AIL_INJ_n_toxic(4))

            data['ALT_cmd_small_toxic'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n_toxic(1))
            data['ALT_cmd_medium_toxic'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n_toxic(2))
            data['ALT_cmd_large_toxic'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n_toxic(3))
            data['ALT_cmd_rupture_toxic'] = roundData.roundFC(caflammable.CA_Flam_Cmd_n_toxic(4))

            data['ALT_inj_small_toxic'] = roundData.roundFC(caflammable.CA_Flam_inj_n_toxic(1))
            data['ALT_inj_medium_toxic'] = roundData.roundFC(caflammable.CA_Flam_inj_n_toxic(2))
            data['ALT_inj_large_toxic'] = roundData.roundFC(caflammable.CA_Flam_inj_n_toxic(3))
            data['ALT_inj_rupture_toxic'] = roundData.roundFC(caflammable.CA_Flam_inj_n_toxic(4))

            data['eneff_n_small'] = rwcofholesize.eneff_n_small
            data['eneff_n_medium'] = rwcofholesize.eneff_n_medium
            data['eneff_n_large'] = rwcofholesize.eneff_n_large
            data['eneff_n_rupture'] = rwcofholesize.eneff_n_rupture
            data['factIC_n_small_toxic'] = roundData.roundFC(rwcofholesize.factIC_n_small)
            data['factIC_n_medium_toxic'] = roundData.roundFC(rwcofholesize.factIC_n_medium)
            data['factIC_n_large_toxic'] = roundData.roundFC(rwcofholesize.factIC_n_large)
            data['factIC_n_rupture_toxic'] = roundData.roundFC(rwcofholesize.factIC_n_rupture)

            data['ca_flam_cmd_toxic'] = roundData.roundFC(caflammable.CA_Flam_Cmd_toxic())
            data['ca_flam_inj_toxic'] = roundData.roundFC(caflammable.CA_Flam_inj_toxic())
            # toxic1
            data['ld_tox_small'] = roundData.roundFC(catoxic.ld_tox_n(1))
            data['ld_tox_medium'] = roundData.roundFC(catoxic.ld_tox_n(2))
            data['ld_tox_large'] = roundData.roundFC(catoxic.ld_tox_n(3))
            data['ld_tox_rupture'] = roundData.roundFC(catoxic.ld_tox_n(4))
            data['Cont_C_small'] = catoxic.ContantC(1)
            data['Cont_C_medium'] = catoxic.ContantC(2)
            data['Cont_C_large'] = catoxic.ContantC(3)
            data['Cont_C_rupture'] = catoxic.ContantC(4)
            data['Cont_D_small'] = catoxic.ContantD(1)
            data['Cont_D_medium'] = catoxic.ContantD(2)
            data['Cont_D_large'] = catoxic.ContantD(3)
            data['Cont_D_rupture'] = catoxic.ContantD(4)
            data['Cont_E_small'] = catoxic.ContantE(1)
            data['Cont_E_medium'] = catoxic.ContantE(2)
            data['Cont_E_large'] = catoxic.ContantE(3)
            data['Cont_E_rupture'] = catoxic.ContantE(4)
            data['Cont_F_small'] = catoxic.ContantF(1)
            data['Cont_F_medium'] = catoxic.ContantF(2)
            data['Cont_F_large'] = catoxic.ContantF(3)
            data['Cont_F_rupture'] = catoxic.ContantF(4)

            data['rate_tox_small'] = roundData.roundFC(catoxic.Rate_tox_n(1))
            data['rate_tox_medium'] = roundData.roundFC(catoxic.Rate_tox_n(2))
            data['rate_tox_large'] = roundData.roundFC(catoxic.Rate_tox_n(3))
            data['rate_tox_rupture'] = roundData.roundFC(catoxic.Rate_tox_n(4))

            data['mass_tox_small'] = roundData.roundFC(catoxic.Mass_tox_n(1))
            data['mass_tox_medium'] = roundData.roundFC(catoxic.Mass_tox_n(2))
            data['mass_tox_large'] = roundData.roundFC(catoxic.Mass_tox_n(3))
            data['mass_tox_rupture'] = roundData.roundFC(catoxic.Mass_tox_n(4))

            data['toxic_ca_small'] = roundData.roundFC(catoxic.CA_injn_tox(1))
            data['toxic_ca_medium'] = roundData.roundFC(catoxic.CA_injn_tox(2))
            data['toxic_ca_large'] = roundData.roundFC(catoxic.CA_injn_tox(3))
            data['toxic_ca_rupture'] = roundData.roundFC(catoxic.CA_injn_tox(4))

            data['CA_toxic_inj'] = roundData.roundFC(catoxic.CA_toxic_inj())
            # toxic2
            data['Cont_C_small2'] = catoxic.ContantC_toxic2(1)
            data['Cont_C_medium2'] = catoxic.ContantC_toxic2(2)
            data['Cont_C_large2'] = catoxic.ContantC_toxic2(3)
            data['Cont_C_rupture2'] = catoxic.ContantC_toxic2(4)
            data['Cont_D_small2'] = catoxic.ContantD_toxic2(1)
            data['Cont_D_medium2'] = catoxic.ContantD_toxic2(2)
            data['Cont_D_large2'] = catoxic.ContantD_toxic2(3)
            data['Cont_D_rupture2'] = catoxic.ContantD_toxic2(4)
            data['Cont_E_small2'] = catoxic.ContantE_toxic2(1)
            data['Cont_E_medium2'] = catoxic.ContantE_toxic2(2)
            data['Cont_E_large2'] = catoxic.ContantE_toxic2(3)
            data['Cont_E_rupture2'] = catoxic.ContantE_toxic2(4)
            data['Cont_F_small2'] = catoxic.ContantF_toxic2(1)
            data['Cont_F_medium2'] = catoxic.ContantF_toxic2(2)
            data['Cont_F_large2'] = catoxic.ContantF_toxic2(3)
            data['Cont_F_rupture2'] = catoxic.ContantF_toxic2(4)

            data['rate_tox_small_toxic'] = roundData.roundFC(catoxic.Rate_tox_n_toxic(1))
            data['rate_tox_medium_toxic'] = roundData.roundFC(catoxic.Rate_tox_n_toxic(2))
            data['rate_tox_large_toxic'] = roundData.roundFC(catoxic.Rate_tox_n_toxic(3))
            data['rate_tox_rupture_toxic'] = roundData.roundFC(catoxic.Rate_tox_n_toxic(4))

            data['mass_tox_small_toxic'] = roundData.roundFC(catoxic.Mass_tox_n_toxic(1))
            data['mass_tox_medium_toxic'] = roundData.roundFC(catoxic.Mass_tox_n_toxic(2))
            data['mass_tox_large_toxic'] = roundData.roundFC(catoxic.Mass_tox_n_toxic(3))
            data['mass_tox_rupture_toxic'] = roundData.roundFC(catoxic.Mass_tox_n_toxic(4))

            data['toxic_ca_small2'] = roundData.roundFC(catoxic.CA_injn_tox2(1))
            data['toxic_ca_medium2'] = roundData.roundFC(catoxic.CA_injn_tox2(2))
            data['toxic_ca_large2'] = roundData.roundFC(catoxic.CA_injn_tox2(3))
            data['toxic_ca_rupture2'] = roundData.roundFC(catoxic.CA_injn_tox2(4))

            data['CA_toxic_inj2'] = roundData.roundFC(catoxic.CA_toxic_inj2())
            # non
            data['NoneCA_cont_Inj_1'] = roundData.roundFC(catoxic.NoneCA_cont_Inj_n(1))
            data['NoneCA_cont_Inj_2'] = roundData.roundFC(catoxic.NoneCA_cont_Inj_n(2))
            data['NoneCA_cont_Inj_3'] = roundData.roundFC(catoxic.NoneCA_cont_Inj_n(3))
            data['NoneCA_cont_Inj_4'] = roundData.roundFC(catoxic.NoneCA_cont_Inj_n(4))
            data['NoneCA_Inst_Inj_1'] = roundData.roundFC(catoxic.NoneCA_Inst_Inj_n(1))
            data['NoneCA_Inst_Inj_2'] = roundData.roundFC(catoxic.NoneCA_Inst_Inj_n(2))
            data['NoneCA_Inst_Inj_3'] = roundData.roundFC(catoxic.NoneCA_Inst_Inj_n(3))
            data['NoneCA_Inst_Inj_4'] = roundData.roundFC(catoxic.NoneCA_Inst_Inj_n(4))
            data['NoneCA_leck_Inj_1'] = roundData.roundFC(catoxic.NoneCA_leck_Inj_n(1))
            data['NoneCA_leck_Inj_2'] = roundData.roundFC(catoxic.NoneCA_leck_Inj_n(2))
            data['NoneCA_leck_Inj_3'] = roundData.roundFC(catoxic.NoneCA_leck_Inj_n(3))
            data['NoneCA_leck_Inj_4'] = roundData.roundFC(catoxic.NoneCA_leck_Inj_n(4))
            data['NoneCA_leck'] = roundData.roundFC(catoxic.NoneCA_leck())
            data['CA_total'] = roundData.roundFC(catoxic.CA_total(data['ca_flam_cmd'], data['ca_flam_inj']))
            data['CA_Category'] = catoxic.CA_Category(data['ca_flam_cmd'], data['ca_flam_inj'])
            if (data['CA_total'] == 0):
                data['CA_total'] = 10000
                data['CA_Category'] = 'E'
            return render(request, 'FacilityUI/risk_summary/areaBasedCoFforNormal.html',
                          {'page': 'areaBasedCoF', 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                           'proposalID': proposalID, 'ass': rwAss, 'data': data, 'info': request.session,
                           'isTank': isBottom,
                           'isShell': isShell, 'fc':fc})

    except Exception as e:
        print(e)
        raise Http404


def AreaBasedCoFShell(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    data = {}
    try:
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        ca = models.RwCaLevel1.objects.get(id=proposalID)
        apiComType = models.ApiComponentType.objects.get(apicomponenttypeid=component.apicomponenttypeid)
        inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwcalevel1 = models.RwCaLevel1.objects.get(id=proposalID)
        rwcofholesize = models.RwFullCoFHoleSize.objects.get(id=proposalID)
    except Exception as e:
        print(e)
    return render(request, 'FacilityUI/risk_summary/areaBasedCoFforShell.html',
                  {'page': 'AreaBasedCoFShell', 'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                   'proposalID': proposalID, 'ass': rwAss, 'data': data, 'info': request.session, 'isTank': isBottom,
                   'isShell': isShell})


def CompareBechMark(request,BenchMarkID,proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    dataBM =[]
    dataChart = []
    dataLabel = []
    dataOldChart = []
    dataNewChart=[]
    endLabel = 0
    try:
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        rwBM = models.RwAssessment.objects.get(id=BenchMarkID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        if component.componenttypeid_id == 8 or component.componenttypeid_id == 9 or component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        rwFullpof = models.RwFullPof.objects.get(id=proposalID)
        rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
        risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
        chart = models.RwDataChart.objects.get(id=proposalID)
        assessmentDate = rwAss.assessmentdate
        timerNew = assessmentDate.year * 365 + assessmentDate.month * 30 + assessmentDate.day
        dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                     chart.riskage6,
                     chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage10, chart.riskage11,
                     chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15]

        rwFullpofOld = models.RwFullPof.objects.get(id=BenchMarkID)
        rwFullcofOld = models.RwFullFcof.objects.get(id=BenchMarkID)
        riskOld = rwFullpofOld.pofap1 * rwFullcofOld.fcofvalue
        chartOld = models.RwDataChart.objects.get(id=BenchMarkID)
        dataOld = [riskOld, chartOld.riskage1, chartOld.riskage2, chartOld.riskage3, chartOld.riskage4,
                        chartOld.riskage5, chartOld.riskage6,
                        chartOld.riskage7, chartOld.riskage8, chartOld.riskage9,
                        chartOld.riskage10, chartOld.riskage11,
                        chartOld.riskage12, chartOld.riskage13, chartOld.riskage14, chartOld.riskage15]
        OldassessmentDate = rwBM.assessmentdate
        dateold = OldassessmentDate.year * 365 + OldassessmentDate.month * 30 + OldassessmentDate.day
        if timerNew > dateold:
            i = (timerNew - dateold) / 365
            dataLabel = [date2Str.date2str(OldassessmentDate),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 1)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 2)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 3)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 4)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 5)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 6)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 7)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 8)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 9)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 10)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 11)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 12)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 13)),
                         date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 14))]
            dataOldChart = dataOld
            j=0
            for a in range(1,17):
                if a<=i:
                    dataNewChart.append(0)
                else:
                    dataNewChart.append(dataChart[j])
                    j=j+1
            endLabel = date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 15))
        else:
            i = (dateold-timerNew) /365
            dataLabel = [date2Str.date2str(assessmentDate), date2Str.date2str(date2Str.dateFuture(assessmentDate, 1)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 2)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 3)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 4)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 5)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 6)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 7)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 8)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 9)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 10)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 11)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 12)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 13)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 14))]

            dataNewChart = dataChart
            j=0
            for a in range(1,17):
                if a <= i:
                    dataOldChart.append(0)
                else:
                    dataOldChart.append(dataOld[j])
                    j = j + 1

            endLabel = date2Str.date2str(date2Str.dateFuture(assessmentDate, 15))
        dataTarget = [chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget]
        q1 = 'SELECT ID FROM rw_assessment inner join equipment_master on equipment_master.EquipmentID = rw_assessment.EquipmentID and SiteID = 4'
        Query1 = models.RwAssessment.objects.raw(q1)
        for a in Query1:
            df = models.RwFullPof.objects.filter(id=a.id)
            fc = models.RwFullFcof.objects.filter(id=a.id)
            dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
            obj1 = {}
            obj1['id'] = a.id
            obj1['name'] = a.proposalname
            obj1['lastinsp'] = a.assessmentdate.strftime('%Y-%m-%d')
            if df.count() != 0:
                obj1['df'] = round(df[0].totaldfap1, 2)
                obj1['gff'] = df[0].gfftotal
                obj1['fms'] = df[0].fms
            else:
                obj1['df'] = 0
                obj1['gff'] = 0
                obj1['fms'] = 0
            if fc.count() != 0:
                obj1['fc'] = round(fc[0].fcofvalue, 2)
            else:
                obj1['fc'] = 0
            if dm.count() != 0:
                obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
                obj1['lastinsp'] = dm[0].lastinspdate.date().strftime('%Y-%m-%d')
            else:
                # obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=16)).strftime(
                    '%Y-%m-%d')  # cuong sua
                obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')  # cuong them vao
            obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
            dataBM.append(obj1)
    except Exception as e:
        print(e)
    return render(request, 'FacilityUI/risk_summary/CompareBenchMark.html',
                  {'page': 'testBenchMark','proposalID':proposalID,'componentID':component.componentid,'isTank':isTank,'isShell':isShell,
                   'label': dataLabel, 'data': dataOldChart, 'data1': dataNewChart,
                   'endLabel': endLabel,'dataBM':dataBM,'noti': noti, 'countnoti': countnoti, 'count': count,'info': request.session})

def RiskchartV3(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    componentID = models.RwAssessment.objects.get(id=proposalID).componentid_id
    dataCoating = models.RwCoating.objects.get(id=proposalID)
    dataEquipment = models.RwEquipment.objects.get(id=proposalID)
    dataComponent = models.RwComponent.objects.get(id=proposalID)
    dataStream = models.RwStream.objects.get(id=proposalID)
    
    old={}
    data={}
    data['adjustPerCOF'] = 100
    data['predictFluidHeight'] = ""
    data['fluidLeaveDike'], data['fluidOnsite'], data['fluidOffsite'] = 0,0,0     
    noti, countnoti, count, rwAssessment = base_util.GetStatus(request, proposalID);
    
        
    
    try:
        isTank, isShell, rwAssessment.componentid_id, dataLabel,check, dataOld, dataPresent, Target, proposalname, listTime = chart_util.ChartV3(proposalID, rwAssessment)
        print("here")
        print(isTank)
        if(isTank == 1):
            try:
                old['claddingthickness'] = format(dataCoating.claddingthickness, '.5f')
            except:
                old['claddingthickness'] = 0
            try:
                old['cladCorrosion'] = format(dataCoating.claddingcorrosionrate, '.5f')
            except:
                old['cladCorrosion']= 0
            try:
                old['fluidLeaveDike'] = format(dataStream.fluidleavedikepercent, '.2f')
            except:
                old['fluidLeaveDike'] = 0
            try:
                old['fluidOnsite'] = format(dataStream.fluidleavedikeremainonsitepercent, '.2f')
            except:
                old['fluidOnsite'] = 0
            try:
                old['fluidOffsite'] = format(dataStream. fluidgooffsitepercent, '.2f')
            except:
                old['fluidOffsite'] = 0
            try:
                old['fluidHeight'] = format(dataStream.fluidheight, '.2f')
            except:
                old['fluidHeight'] = 0
            try:
                old['naohConcent'] = format(dataStream.naohconcentration, '.5f')
            except:
                old['naohConcent'] = 0
            try:
                old['releasePercentToxic'] = format(dataStream.releasefluidpercenttoxic, '.5f')
            except:
                old['releasePercentToxic'] = 0
            try:
                old['chlorideIon'] = format(dataStream.chloride, '.5f')
            except:
                old['chlorideIon'] = 0
            try:
                old['co3'] = format(dataStream.co3concentration, '.5f')
            except:
                old['co3'] = 0
            try:
                old['h2sContent'] = format(dataStream.h2sinwater, '.5f')
            except:
                 old['h2sContent']= 0
            try:
                old['PHWater'] = format(dataStream.waterph, '.5f')
            except:
                old['PHWater'] = 0
            try:
                old['criticalTemp'] = format(dataStream.criticalexposuretemperature, '.5f')
            except:
                old['criticalTemp'] = 0
            try:
                old['H2Spressure'] = format(dataStream.h2spartialpressure, '.5f')
            except:
                old['H2Spressure'] = 0
            try:
                old['maxOT'] = format(dataStream.maxoperatingtemperature, '.5f')
            except:
                old['maxOT'] = 0
            try:
                old['minOT'] = format(dataStream.minoperatingtemperature, '.5f')
            except:
                old['minOT'] = 0
            try:
                old['shellHieght'] = format(dataComponent.shellheight, '.5f')
            except:
                old['shellHieght'] = 0
            try:
                old['BrittleFacture'] = format(dataComponent.brittlefracturethickness, '.5f')
            except:
               old['BrittleFacture'] = 0
            try:
                old['NorminalThickness'] = format(dataComponent.nominalthickness, '.5f')
            except:
                old['NorminalThickness'] = 0
            try:
                old['CurrentThickness'] = format(dataComponent.currentthickness, '.5f')
            except:
                old['CurrentThickness'] = 0
            try:
                old['tankDiameter'] = format(dataComponent.nominaldiameter, '.5f')
            except:
                old['tankDiameter'] = 0
            try:
                old['distance'] = format(dataEquipment.distancetogroundwater, '.5f')
            except:
                old['distance'] = 0
            try:
                old['EquipmentVolumn'] = format(dataEquipment.volume, '.5f')
            except:
                old['EquipmentVolumn'] = 0
            try:
                old['CurrentCorrosionRate'] = format(dataComponent.currentcorrosionrate, '.5f')
            except:
                old['CurrentCorrosionRate'] = 0
            try:
                old['MinRequiredThickness'] = format(dataComponent.minreqthickness, '.5f')
            except:
                old['MinRequiredThickness'] = 0
            try:
                old['MaximumOperatingPressure'] = format(dataStream.maxoperatingpressure, '.5f')
            except:
                old['MaximumOperatingPressure'] = 0
            try:
                old['MinOperatingPressure'] = format(dataStream.minoperatingpressure, '.5f')
            except:
                old['MinOperatingPressure'] = 0
        
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
    if 'btn1' in request.POST:
        print("haha-------------------------------------------------haha")
        if(isTank == 1):
            data['adjustPerCOF'] = request.POST.get('adjustCOF')
            old['fluidHeight'] = request.POST.get('FluidHeight')
            data['fluidHeight'] = request.POST.get('FluidHeight')
            old['fluidLeaveDike'] = request.POST.get('PFLD')
            data['fluidLeaveDike'] = request.POST.get('PFLD')
            old['fluidOnsite'] = request.POST.get('PFLDRS')
            data['fluidOnsite'] = request.POST.get('PFLDRS')
            old['fluidOffsite'] = request.POST.get('PFLDGoffsite') 
            data['fluidOffsite'] = request.POST.get('PFLDGoffsite')
            print(data)
            print(data['fluidLeaveDike'])
            result = cof_predict_util.predictHeightFluid(float(data['fluidLeaveDike'])/100, float(data['fluidOnsite'])/100, float(data['fluidOffsite'])/100, float(data['adjustPerCOF'])/100)
            print(result)
            data['predictFluidHeight'] =  "Select Fluid Height equal " + str(float(result)*float(data['fluidHeight'])) + " (m) for satisfy requirements"
            print(cof_predict_util.predictLeaveDike(1, float(data['fluidOnsite'])/100, float(data['fluidOffsite'])/100, float(data['adjustPerCOF'])/100))
            print(cof_predict_util.predictLeaveDikeRemainOnSite(1, float(data['fluidLeaveDike'])/100, float(data['fluidOffsite'])/100, float(data['adjustPerCOF'])/100))
            print(cof_predict_util.predictfGoOffSite(1, float(data['fluidLeaveDike'])/100, float(data['fluidOnsite'])/100, float(data['adjustPerCOF'])/100))
            
        print("hihihihihihihihi-------------------------------------------------hihi")
    return render(request, 'FacilityUI/risk_summary/riskcharv3.html', {'page': 'riskChartv2','proposalID':proposalID,'isTank':isTank,'isShell':isShell,
                   'componentID':rwAssessment.componentid_id,'dataLabel':dataLabel,'check':check,'dataOld':dataOld,'dataPresent':dataPresent,
                    'Target':Target,'proposalname':proposalname,'noti': noti,'countnoti': countnoti, 'count': count,'listTime':listTime, 'data':data, 'old':old})
                    
def RiskchartV2(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    rwAssessment = models.RwAssessment.objects.get(id=proposalID)
    proposalname = rwAssessment.proposalname
    # countProposal = models.RwAssessment.objects.filter(componentid_id= rwAssessment.componentid_id).count()
    check = 0
    dataPresent = []
    Target = []
    dataOld = []
    dataLabel = []
    list=[]
    listDate = []
    rwFullpof = models.RwFullPof.objects.get(id=proposalID)
    rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
    risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
    chart = models.RwDataChart.objects.get(id=proposalID)
    print('id'+str(proposalID))
    try:
        component = models.ComponentMaster.objects.get(componentid=rwAssessment.componentid_id)

        risktarget=component.risktarget
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        siteID = equip.siteid_id
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        print("có 1 proposal")
        assessmentDate = rwAssessment.assessmentdate
        # if risk < chart.riskage1:
        dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                     chart.riskage6,chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage10,
                     chart.riskage11,chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15,
                    chart.riskage16,chart.riskage17,chart.riskage18,chart.riskage19,chart.riskage20,
                     chart.riskage21,chart.riskage22,chart.riskage23,chart.riskage24,chart.riskage25,chart.riskage26,chart.riskage27]
        print('datachart')
        print(dataChart)
        # dataLabel = [date2Str.date2strCC(assessmentDate)]
        listTime=[]
        listPeriod=[]
        time=[]
        periodtime=-12
        year=0
        print(chart.risktarget)
        while (year<17.0):
            dataLabel.append(date2Str.date2strCC(date2Str.dateFuture(assessmentDate, year)))
            periodtime=periodtime+12
            listPeriod.append(periodtime)
            time.append(date2Str.date2strCC(date2Str.dateFuture(assessmentDate, year)))
            if year==int(chart.risktarget):
                day = 1
                month=1
                while month<12:
                    dataLabel.append(date2Str.date2strCC(date2Str.dateFuturebyMonth(assessmentDate, year,month, 0)))
                    month+=1
                    time.append(date2Str.date2strCC(date2Str.dateFuturebyMonth(assessmentDate, year,month, 0)))
                    periodtime =periodtime+ 1
                    listPeriod.append(periodtime)
            year += 1
        # print(len(dataLabel))
        # print(len(dataChart))
        dataChartPoF=models.RwDataChartPoF.objects.get(id=proposalID)
        dataChartDMFactor=models.RwDataDMFactor.objects.get(id=proposalID)
        listPoF=[models.RwFullPof.objects.get(id=proposalID).pofap1,dataChartPoF.riskage1, dataChartPoF.riskage2, dataChartPoF.riskage3, dataChartPoF.riskage4, dataChartPoF.riskage5,
                 dataChartPoF.riskage6,dataChartPoF.riskage7, dataChartPoF.riskage8, dataChartPoF.riskage9, dataChartPoF.riskage10,
                 dataChartPoF.riskage11,dataChartPoF.riskage12, dataChartPoF.riskage13, dataChartPoF.riskage14, dataChartPoF.riskage15,
                 dataChartPoF.riskage16,dataChartPoF.riskage17,dataChartPoF.riskage18,dataChartPoF.riskage19,dataChartPoF.riskage20,
                 dataChartPoF.riskage21,dataChartPoF.riskage22,dataChartPoF.riskage23,dataChartPoF.riskage24,dataChartPoF.riskage25,
                 dataChartPoF.riskage26,dataChartPoF.riskage27]
        listDMFactor = [models.RwFullPof.objects.get(id=proposalID).totaldfap1, dataChartDMFactor.riskage1, dataChartDMFactor.riskage2,
                        dataChartDMFactor.riskage3, dataChartDMFactor.riskage4, dataChartDMFactor.riskage5,
                        dataChartDMFactor.riskage6, dataChartDMFactor.riskage7, dataChartDMFactor.riskage8, dataChartDMFactor.riskage9,
                        dataChartDMFactor.riskage10,
                        dataChartDMFactor.riskage11, dataChartDMFactor.riskage12, dataChartDMFactor.riskage13, dataChartDMFactor.riskage14,
                        dataChartDMFactor.riskage15,
                        dataChartDMFactor.riskage16, dataChartDMFactor.riskage17, dataChartDMFactor.riskage18, dataChartDMFactor.riskage19,
                        dataChartDMFactor.riskage20,
                        dataChartDMFactor.riskage21, dataChartDMFactor.riskage22, dataChartDMFactor.riskage23, dataChartDMFactor.riskage24,
                        dataChartDMFactor.riskage25,
                        dataChartDMFactor.riskage26, dataChartDMFactor.riskage27]

        for a in range(0, 28):
            obj={}
            obj['x'] = time[a]
            obj['y'] = dataChart[a]
            obj['index'] = a + 1
            obj['pof'] = listPoF[a]
            obj['dm'] = listDMFactor[a]
            obj['period']=listPeriod[a]
            listTime.append(obj)
        for a in range(0, 28):
            obj={}
            obj['x'] = dataLabel[a]
            obj['y'] = dataChart[a]
            dataPresent.append(obj)
        print('dataPresent1')
        print(dataPresent)
        # print(dataPresent)
        # comp = models.ComponentMaster.objects.get(componentid=rwAssessment.componentid_id)
        # q = 'SELECT ID,AssessmentDate FROM rw_assessment where ComponentID= %s order by AssessmentDate asc'
        # Query = models.RwAssessment.objects.raw(q, [comp.componentid])
        # for a in Query:
        #     list.append(a.id)
        #     listDate.append(a.assessmentdate)
        # # print(list)
        # print(listDate)
        # if list.index(proposalID) != 0:
        #     print("nhấn cái mới hơn")
        #     a = list.index(proposalID)
        #     if a != 0:
        #
        #         OldID= list[a - 1]
        #         OldassessmentDate = listDate[a - 1]
        #         rwFullpofOld = models.RwFullPof.objects.get(id=OldID)
        #         rwFullcofOld = models.RwFullFcof.objects.get(id=OldID)
        #         riskOld = rwFullpofOld.pofap1 * rwFullcofOld.fcofvalue
        #         if riskOld>risk:
        #             check = 1
        #             chartOld = models.RwDataChart.objects.get(id=OldID)
        #             dataLabel = [date2Str.date2strCC(OldassessmentDate)]
        #             dataLabel2 = [OldassessmentDate]
        #             dataOldChart = [riskOld, chartOld.riskage1, chartOld.riskage2, chartOld.riskage3, chartOld.riskage4,
        #                             chartOld.riskage5, chartOld.riskage6,
        #                             chartOld.riskage7, chartOld.riskage8, chartOld.riskage9, chartOld.riskage9,
        #                             chartOld.riskage10, chartOld.riskage11,
        #                             chartOld.riskage12, chartOld.riskage13, chartOld.riskage14, chartOld.riskage15,
        #                             chartOld.riskage16, chartOld.riskage17, chartOld.riskage18, chartOld.riskage19,
        #                             chartOld.riskage20, chartOld.riskage21, chartOld.riskage22, chartOld.riskage23,
        #                             chartOld.riskage24]
        #             year = 1
        #
        #             while (year < 16.0):
        #                 dataLabel.append(date2Str.date2strCC(date2Str.dateFuture(OldassessmentDate, year)))
        #                 dataLabel2.append(date2Str.dateFuture(OldassessmentDate, year))
        #
        #                 if year == chart.risktarget:
        #                     day = 1
        #                     month = 1
        #                     while month < 10 and day < 10:
        #                         dataLabel.append(
        #                             date2Str.date2strCC(date2Str.dateFuturebyMonth(OldassessmentDate, 0, month, 0)))
        #                         dataLabel2.append(date2Str.dateFuturebyMonth(OldassessmentDate, 0, month, 0))
        #                         month += 1
        #
        #                 year += 1
        #
        #             for a in range(0, 25):
        #                 obj = {}
        #                 obj['x'] = dataLabel[a]
        #                 obj['y'] = dataOldChart[a]
        #                 dataOld.append(obj)
        #             print("dataOld")
        #             print(dataOld)
        #             # tim diem chung
        #             month = 0
        #             day = 0
        #             indexDataOld=0
        #             while (indexDataOld < len(indexDataOld)):
        #                 now=date2Str.dateFuturebyMonth(assessmentDate, 0, 0, 0)
        #
        #                 if now==dataLabel2[indexDataOld]:
        #                     obj = {}
        #                     obj['x'] = dataLabel[indexDataOld]
        #                     obj['y'] = dataOldChart[indexDataOld]
        #                     dataPresent.insert(0, obj)
        #                     break
        #                 else:
        #                     if now<dataLabel2[indexDataOld]:
        #                         obj={}
        #
        #                         if indexDataOld-1>0:
        #                             obj['x']=dataLabel[indexDataOld-1]
        #                             obj['y'] = (dataOldChart[indexDataOld-1]+dataOldChart[indexDataOld])/2
        #                         else:
        #                             obj['x'] = dataLabel[indexDataOld ]
        #                             obj['y'] =dataOldChart[indexDataOld]
        #                         dataPresent.insert(0, obj)
        #                         indexDataOld-=1
        #                         break
        #                     else:
        #                         indexDataOld += 1
        #
        #             # print('month')
        #             # print(month)
        #             # print(day)
        #             while (indexDataOld>=0):
        #
        #                 obj={}
        #                 obj['x'] = dataLabel[indexDataOld]
        #
        #                 obj['y'] = dataOldChart[indexDataOld]
        #                 dataPresent.insert(0, obj)
        #                 indexDataOld-=1
        #
        #             print('dataPresent2')
        #             print(dataPresent)
                    # del dataPresent[30:len(dataPresent)]

                    # dateold = OldassessmentDate.year * 365 + OldassessmentDate.month * 30 + OldassessmentDate.day
                    # datepresent = assessmentDate.year * 365 + assessmentDate.month * 30 + assessmentDate.day
                    # i = (datepresent - dateold) / 36
                    # a= (math.ceil(i)+math.floor(i))/2
                    # if(a>i):
                    #     i=math.floor(i)
                    # else:
                    #     i = math.ceil(i)
                    # datachartCompine = dataOldChart[0:int(i)]
                    # for a in dataChart:
                    #     datachartCompine.append(a)
                    # datachartFinal = datachartCompine[0:160]
                    # for a in range(0, 160):
                    #     if(a<=i):
                    #         if(a==0):
                    #             obj={}
                    #             obj['x']= date2Str.date2strCC(assessmentDate)
                    #             obj['y'] = dataOldChart[i]
                    #             dataOld[i]['x'] = date2Str.date2strCC(assessmentDate)
                    #             dataPresent.insert(0, obj)
                    #         else:
                    #             obj = {}
                    #             obj['x'] = dataLabel[i-a]
                    #             obj['y'] = dataOldChart[i-a]
                    #             dataPresent.insert(0,obj)
                    #             dataPresent.pop()
                    #     else:
                    #         break

        print('risktarget')
        print(risktarget)
        dataTarget = [risktarget,risktarget,risktarget,risktarget,risktarget,risktarget,risktarget,
                      risktarget,risktarget,risktarget,risktarget,risktarget,risktarget,risktarget,
                      risktarget,risktarget,risktarget,risktarget,risktarget,risktarget,risktarget,
                      risktarget,risktarget,risktarget,risktarget,risktarget]

        for a in range(0, len(dataLabel)):
            obj={}
            obj['x'] = dataPresent[a]['x']
            obj['y'] = risktarget
            obj['index'] = a + 1
            Target.append(obj)
        # print(Target)
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
    return render(request, 'FacilityUI/risk_summary/riskcharv3.html', {'page': 'riskChartv2','proposalID':proposalID,'isTank':isTank,'isShell':isShell,
                   'componentID':rwAssessment.componentid_id,'dataLabel':dataLabel,'check':check,'dataOld':dataOld,'dataPresent':dataPresent,
                    'Target':Target,'proposalname':proposalname,'noti': noti,'countnoti': countnoti, 'count': count,'listTime':listTime})
def RiskChart(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    list = []
    # time = []
    listDate=[]
    # listDamage = []
    # OldProsal = 0
    thiningToTal = []
    ext = []
    scc = []
    htha = []
    brit = []
    pipe = []
    data =[]
    dataBM = []
    try:
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0

        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0

        # if isTank:
        #     listDamage = ReCalculate.calulateRiskChartTank(proposalID)
        # else:
        #     listDamage = ReCalculate.caculateRiskChart(proposalID)
        #
        # for a in listDamage[0]:
        #     thiningToTal.append(a)
        # for a in listDamage[1]:
        #     ext.append(a)
        # for a in listDamage[2]:
        #     scc.append(a)
        # for a in listDamage[3]:
        #     htha.append(a)
        # for a in listDamage[4]:
        #     brit.append(a)
        # for a in listDamage[5]:
        #     pipe.append(a)

        # rwAssesmentAll = models.RwAssessment.objects.all()
        rwAssessment = models.RwAssessment.objects.get(id=proposalID)
        # listproposal = models.RwAssessment.objects.filter(componentid=rwAssessment.componentid_id)
        comp = models.ComponentMaster.objects.get(componentid=rwAssessment.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        # Start Query
        q = 'SELECT ID,AssessmentDate FROM rw_assessment where ComponentID= %s order by AssessmentDate asc'
        Query = models.RwAssessment.objects.raw(q, [comp.componentid])
        for a in Query:
            list.append(a.id)
            listDate.append(a.assessmentdate)
        assessmentDate = rwAssessment.assessmentdate
        timerNew = assessmentDate.year * 365 + assessmentDate.month * 30 + assessmentDate.day
        # End Query
        q1 = 'SELECT ID FROM rw_assessment inner join equipment_master on equipment_master.EquipmentID = rw_assessment.EquipmentID and SiteID = 4'
        Query1 = models.RwAssessment.objects.raw(q1)
        for a in Query1:
            df = models.RwFullPof.objects.filter(id=a.id)
            fc = models.RwFullFcof.objects.filter(id=a.id)
            dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
            obj1 = {}
            obj1['id'] = a.id
            obj1['name'] = a.proposalname
            obj1['lastinsp'] = a.assessmentdate.strftime('%Y-%m-%d')
            if df.count() != 0:
                obj1['df'] = round(df[0].totaldfap1, 2)
                obj1['gff'] = df[0].gfftotal
                obj1['fms'] = df[0].fms
            else:
                obj1['df'] = 0
                obj1['gff'] = 0
                obj1['fms'] = 0
            if fc.count() != 0:
                obj1['fc'] = round(fc[0].fcofvalue, 2)
            else:
                obj1['fc'] = 0
            if dm.count() != 0:
                obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
                obj1['lastinsp'] = dm[0].lastinspdate.date().strftime('%Y-%m-%d')
            else:
                # obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=16)).strftime(
                    '%Y-%m-%d')  # cuong sua
                obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')  # cuong them vao
            obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
            dataBM.append(obj1)

        rwFullpof = models.RwFullPof.objects.get(id=proposalID)
        rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
        risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
        chart = models.RwDataChart.objects.get(id=proposalID)

        assessmentDate = rwAssessment.assessmentdate
        dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                     chart.riskage6,
                     chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage9, chart.riskage10, chart.riskage11,
                     chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15]
        # print(dataChart)
        # xác dịnh Olddata
        # print(list)
        if list and list.index(proposalID) != 0:
            # print("go herrr")
            a = list.index(proposalID)
            if a != 0:
                OldProsal = list[a - 1]
                OldassessmentDate = listDate[a-1]
                rwFullpofOld = models.RwFullPof.objects.get(id=OldProsal)
                rwFullcofOld = models.RwFullFcof.objects.get(id=OldProsal)
                riskOld = rwFullpofOld.pofap1 * rwFullcofOld.fcofvalue
                chartOld = models.RwDataChart.objects.get(id=OldProsal)
                dataOldChart = [riskOld, chartOld.riskage1, chartOld.riskage2, chartOld.riskage3, chartOld.riskage4,
                                chartOld.riskage5, chartOld.riskage6,
                                chartOld.riskage7, chartOld.riskage8, chartOld.riskage9, chartOld.riskage9,
                                chartOld.riskage10, chartOld.riskage11,
                                chartOld.riskage12, chartOld.riskage13, chartOld.riskage14, chartOld.riskage15]
                dateold = OldassessmentDate.year * 365 + OldassessmentDate.month * 30 + OldassessmentDate.day
                i = (timerNew - dateold) / 365
                datachartCompine = dataOldChart[0:int(i)]
                for a in dataChart:
                    datachartCompine.append(a)
                datachartFinal = datachartCompine[0:16]
                dataLabel = [date2Str.date2str(OldassessmentDate),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 1)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 2)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 3)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 4)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 5)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 6)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 7)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 8)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 9)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 10)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 11)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 12)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 13)),
                             date2Str.date2str(date2Str.dateFuture(OldassessmentDate, 14))]
        else:
            # print("go else")
            dataOldChart = dataChart
            datachartFinal = dataChart
            dataLabel = [date2Str.date2str(assessmentDate), date2Str.date2str(date2Str.dateFuture(assessmentDate, 1)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 2)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 3)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 4)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 5)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 6)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 7)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 8)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 9)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 10)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 11)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 12)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 13)),
                         date2Str.date2str(date2Str.dateFuture(assessmentDate, 14))]
        # print('charttarget'+str(chart.risktarget))
        dataTarget = [chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget]
        endLabel = date2Str.date2str(date2Str.dateFuture(assessmentDate, 15))
        # print("test here")
        # if (dataChart[0] > dataTarget[0] or dataChart[1] > dataTarget[1] or dataChart[2] > dataTarget[2] or dataChart[
        #     3] > dataTarget[3] or dataChart[4] > dataTarget[4] or dataChart[5] > dataTarget[5] or dataChart[6] >
        #         dataTarget[6]):
        #     notification = models.ZNotification(id_user=request.session['id'], subject=request.session['name'],
        #                                         content=' your proposal were beyond the allowed level ',
        #                                         object=data['facilityname'], link=proposalID,
        #                                         time=datetime.now(), state=0)
        #     notification.save()
        content = {'page': 'riskChart', 'label': dataLabel, 'data': dataOldChart, 'data1': datachartFinal,
                   'target': dataTarget, 'endLabel': endLabel, 'proposalname': rwAssessment.proposalname,'proposalID':proposalID,
                   'proposalID': rwAssessment.id, 'componentID': rwAssessment.componentid_id, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'thiningToTal': thiningToTal, 'ext': ext, 'scc': scc,'notiVerification':notiVerification,'siteid':siteid,
                   'htha': htha, 'brit': brit, 'pipe': pipe,'isTank':isTank,'isShell':isShell,'dataBM':dataBM}
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/riskChart.html', content)


def ExportExcel(request, index, type):
    try:
        return export_data.excelExport(index, type)
    except:
        raise Http404
def ManageFile(request,siteID):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    file_system_path = models.FileSystemPath.objects.filter(siteid_id=siteID,system=0)
    file_system_path_template = models.FileSystemPath.objects.filter(siteid_id=4,system=1)
    file_all = models.FileSystemPath.objects.filter(Q(siteid_id=4)| Q(siteid_id=siteID))
    warning={}
    try:
        if '_download' in request.POST:
            for a in file_all:
                if request.POST.get('%d' % a.id):
                    print("gogo")
                    if os.path.exists(a.path):
                        with open(a.path, 'rb') as fh:
                            response = HttpResponse(fh.read(), content_type="application/vnd.ms-excel")
                            response['Content-Disposition'] = 'inline; filename=' + os.path.basename(a.path)
                        return response

        if '_refresh' in request.POST:
            return redirect('manageFile', siteID=siteID)
        if '_delete' in request.POST:
            if siteID == 4:
                print("go manage file have site 4")
                for b in file_system_path_template:
                    if request.POST.get('%d' % b.id):
                        warning['nofify'] = " You can not delete file system !"
                for a in file_system_path:
                    if request.POST.get('%d' % a.id):
                        print("chekc",a.path)
                        os.remove(a.path)
                        a.delete()
                        warning['success'] = " Delete file successfully !"
            else:
                for a in file_system_path:
                    if request.POST.get('%d' % a.id):
                        # print(a.path)
                        os.remove(a.path)
                        a.delete()
                        warning['success'] = " Delete file successfully !"
                for b in file_system_path_template:
                    if request.POST.get('%d' % b.id):
                        warning['nofify'] = " You can not delete file system !"
            # return redirect('manageFile', siteID=siteID)
        if "_import" in request.POST:
            print("test")
            print("done1")
            fs = FileSystemStorage()
            myfile = request.FILES['myexcelFile']
            filename = fs.save(myfile.name, myfile)
            uploaded_file_url = fs.url(filename)
            print("uploaded_file_url", uploaded_file_url)
            url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
                '%20', ' ')
            print("url_file", url_file)
            x = os.path.getsize(url_file)
            y = 512000
            if x < y:
                value = round(x / 1000, 2)
                ext = ' kb'
            elif x < y * 1000:
                value = round(x / 1000000, 2)
                ext = ' Mb'
            else:
                value = round(x / 1000000000, 2)
                ext = ' Gb'
            sizefile = str(value) + ext
            file_system_path = models.FileSystemPath(siteid_id=siteID, name=filename, path=url_file, size=sizefile)
            file_system_path.save()
        file_system_path = models.FileSystemPath.objects.filter(siteid_id=siteID,system=0)
    except Exception as e:
        print(e)
    siteID = encrypt(siteID)
    return render(request, 'FacilityUI/manage_file/managefile.html',
                  {'page': 'manageFile','siteID': siteID, 'noti': noti,'file_system_path':file_system_path,'notiVerification':notiVerification,
                   'file_system_path_template':file_system_path_template,'countnoti': countnoti, 'count': count,'info': request.session,
                   'warning':warning})
def getListEquipmentNumber():
    data = {}
    equip = models.EquipmentMaster.objects.all()
    data["type"] = "FeatureCollection"
    data["features"] = []
    for a in equip:
        obj = {}
        obj["EquipNumber"] = a.equipmentnumber
        data["features"].append(obj)
    with open('static/js/listequipment.js', 'w', encoding="utf-8") as outfile:
        outfile.write("eqfeed_callback(")
        print(data)
        outfile.write(str(data))
        outfile.write(")")
    return data
def getListComponent():
    data={}
    comp = models.ComponentMaster.objects.all()
    data["type"] = "FeatureCollection"
    data["features"] = []
    for a in comp:
        obj = {}
        obj["CompNumber"] = a.componentnumber
        data["features"].append(obj)
    with open('static/js/listComponent.js', 'w', encoding="utf-8") as outfile:
        outfile.write("eqfeed_callback_1(")
        # print(data)
        outfile.write(str(data))
        outfile.write(")")
def upload(request, siteID, id=0):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    dataSheet1=[]
    dataSheet2=[]
    dataSheet3=[]
    dataSheet4=[]
    dataSheet5=[]
    dataSheet6=[]
    dataSheet7=[]
    RBIData = []
    info_notice=''
    listEquipmentNumber = []
    listComponentNumber = []
    listEquipmentNumber = getListEquipmentNumber()
    listComponentNumber = getListComponent()
    # print(listComponentNumber)
    check = 0
    isTank=0
    apicomponentType = models.ApiComponentType.objects.all()
    filename=""
    file_system_path_template = models.FileSystemPath.objects.filter(siteid_id=4)
    file_system_path = models.FileSystemPath.objects.filter(siteid_id=siteID)
    sitename = models.Sites.objects.get(siteid=siteID)
    faci = models.Facility.objects.filter(siteid_id = siteID)
    designcode = models.DesignCode.objects.filter(siteid_id=siteID)
    manufacture = models.Manufacturer.objects.filter(siteid_id=siteID)
    info = {}
    equip = models.EquipmentMaster.objects.filter(siteid_id=siteID)
    comp = []
    for a in equip:
        com = models.ComponentMaster.objects.filter(equipmentid_id = a.equipmentid)
        for b in com:
            obj = {}
            obj['componentid'] = b.componentid
            obj['componentnumber'] = b.componentnumber
            obj['componentname'] = b.componentname
            comp.append(obj)
    try:
        fs = FileSystemStorage()
        showcontent = "Choose file from your computer"
        if id:
            # print("filename",filename)
            # uploaded_file_url = fs.url(filename)
            # print("uploaded_file_url",uploaded_file_url)
            # url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
            #     '%20', ' ')
            # print("url_file",url_file)
            file_data = models.FileSystemPath.objects.get(id=id)
            filename = file_data.name
            url_file = file_data.path
            try:
                RBIData = ExcelImport.getRBIData(url_file)
                # print(RBIData)
                print("go go")
                if RBIData[0]['check']:
                    check = 1
            except:
                check = 0
            if not check:
                dataSheet1 = ExcelImport.getSheetEquip(url_file)
                if dataSheet1[0]['isTank']:
                    isTank = 1
                else:
                    isTank = 0
                dataSheet2 = ExcelImport.getSheetCom(url_file)
                dataSheet3 = ExcelImport.getSheetOperCon(url_file)
                dataSheet4 = ExcelImport.getSheetStream(url_file)
                dataSheet5 = ExcelImport.getSheetMaterial(url_file)
                dataSheet6 = ExcelImport.getSheetCoat(url_file)
                dataSheet7 = ExcelImport.getSheetFullCoF(url_file)
        try:
            if "_select" in request.POST:
                # print("done")
                for a in file_system_path:
                    if request.POST.get('%d' % a.id):
                        # print("vo day",a.id)
                        return redirect('uploadPlan', siteID=siteID,id=a.id)
                for b in file_system_path_template:
                    # print("cuong")
                    if request.POST.get('%d' % b.id):
                        return redirect('uploadPlan', siteID=siteID,id=b.id)
            if "import" in request.POST:
                print("go here")
                myfile = request.FILES['myexcelFile']
                filename = fs.save(myfile.name, myfile)
                print("filename", filename)
                uploaded_file_url = fs.url(filename)
                print("uploaded_file_url", uploaded_file_url)
                url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
                    '%20', ' ')
                print("url_file", url_file)
                x = os.path.getsize(url_file)
                y = 512000
                if x < y:
                    value = round(x / 1000, 2)
                    ext = ' kb'
                elif x < y * 1000:
                    value = round(x / 1000000, 2)
                    ext = ' Mb'
                else:
                    value = round(x / 1000000000, 2)
                    ext = ' Gb'
                sizefile = str(value) + ext
                file_system_path = models.FileSystemPath(siteid_id=siteID, name=filename, path=url_file, size=sizefile)
                file_system_path.save()
                return redirect('uploadPlan', siteID=siteID,id=file_system_path.id)
            if "cancel" in request.POST:
                return redirect('uploadPlan', siteID=siteID)
            if "submitFile" in request.POST:
                # print(isTank)
                dataSheet1Data=[]
                dataSheet2Data=[]
                dataSheet3Data=[]
                dataSheet4Data=[]
                dataSheet5Data=[]
                dataSheet6Data=[]
                dataSheet7Data=[]
                SheetRBIData=[]
                if check:
                    for a in RBIData:
                        data = {}
                        data['check'] = a['check']
                        # data['txtFacility'] = request.POST.get('txtFacility')
                        # data['txtEquipment'] = request.POST.get('txtEquipment')
                        # data['txtComponent'] = request.POST.get('txtComponent')
                        data['0'] = request.POST.get('0' + a['0'])
                        data['1'] = request.POST.get('1' + a['0'])
                        data['2'] = request.POST.get('2' + a['0'])
                        data['3'] = request.POST.get('3' + a['0'])
                        data['4'] = request.POST.get('4' + a['0'])
                        data['5'] = request.POST.get('5' + a['0'])
                        data['6'] = request.POST.get('6' + a['0'])
                        data['7'] = request.POST.get('7' + a['0'])
                        data['8'] = request.POST.get('8' + a['0'])
                        data['9'] = request.POST.get('9' + a['0'])
                        data['10'] = request.POST.get('10' + a['0'])
                        data['11'] = request.POST.get('11' + a['0'])
                        data['12'] = request.POST.get('12' + a['0'])
                        data['13'] = request.POST.get('13' + a['0'])
                        data['14'] = request.POST.get('14' + a['0'])
                        data['15'] = request.POST.get('15' + a['0'])
                        data['16'] = request.POST.get('16' + a['0'])
                        if request.POST.get('17' + a['0']) == 'Y':
                            data['17'] = 1
                        elif request.POST.get('17' + a['0']) == 'N':
                            data['17'] = 0
                        data['18'] = request.POST.get('18' + a['0'])
                        data['19'] = request.POST.get('19' + a['0'])
                        data['20'] = request.POST.get('20' + a['0'])
                        data['21'] = request.POST.get('21' + a['0'])
                        if request.POST.get('22' + a['0']) == 'Y':
                            data['22'] = 1
                        elif request.POST.get('22' + a['0']) == 'N':
                            data['22'] = 0
                        data['23'] = request.POST.get('23' + a['0'])
                        data['24'] = request.POST.get('24' + a['0'])
                        data['25'] = request.POST.get('25' + a['0'])
                        data['26'] = request.POST.get('26' + a['0'])
                        data['27'] = request.POST.get('27' + a['0'])
                        if request.POST.get('28' + a['0']) == 'Y':
                            data['28'] = 1
                        elif request.POST.get('28' + a['0']) == 'N':
                            data['28'] = 0
                        data['29'] = request.POST.get('29' + a['0'])
                        data['30'] = request.POST.get('30' + a['0'])
                        data['31'] = request.POST.get('31' + a['0'])
                        data['32'] = request.POST.get('32' + a['0'])
                        data['33'] = request.POST.get('33' + a['0'])
                        data['34'] = request.POST.get('34' + a['0'])
                        data['35'] = request.POST.get('35' + a['0'])
                        data['36'] = request.POST.get('36' + a['0'])
                        data['37'] = request.POST.get('37' + a['0'])
                        data['38'] = request.POST.get('38' + a['0'])
                        data['39'] = request.POST.get('39' + a['0'])
                        data['40'] = request.POST.get('40' + a['0'])
                        data['41'] = request.POST.get('41' + a['0'])
                        data['42'] = request.POST.get('42' + a['0'])
                        data['43'] = request.POST.get('43' + a['0'])
                        data['44'] = request.POST.get('44' + a['0'])
                        data['45'] = request.POST.get('45' + a['0'])
                        data['46'] = request.POST.get('46' + a['0'])
                        data['47'] = request.POST.get('47' + a['0'])
                        if request.POST.get('48' + a['0']) == 'Y':
                            data['48'] = 1
                        elif request.POST.get('48' + a['0']) == 'N':
                            data['48'] = 0
                        data['49'] = request.POST.get('49' + a['0'])
                        if request.POST.get('50' + a['0']) == 'Y':
                            data['50'] = 1
                        elif request.POST.get('50' + a['0']) == 'N':
                            data['50'] = 0
                        data['51'] = request.POST.get('51' + a['0'])
                        data['52'] = request.POST.get('52' + a['0'])
                        if request.POST.get('53' + a['0']) == 'Y':
                            data['53'] = 1
                        elif request.POST.get('53' + a['0']) == 'N':
                            data['53'] = 0
                        if request.POST.get('54' + a['0']) == 'Yes':
                            data['54'] = 1
                        elif request.POST.get('53' + a['0']) == 'No':
                            data['54'] = 0
                        data['55'] = request.POST.get('55' + a['0'])
                        data['56'] = request.POST.get('56' + a['0'])
                        data['57'] = request.POST.get('57' + a['0'])
                        data['58'] = request.POST.get('58' + a['0'])
                        data['59'] = request.POST.get('59' + a['0'])
                        data['60'] = request.POST.get('60' + a['0'])
                        data['61'] = request.POST.get('61' + a['0'])
                        data['62'] = request.POST.get('62' + a['0'])
                        data['63'] = request.POST.get('63' + a['0'])
                        data['64'] = request.POST.get('64' + a['0'])
                        data['65'] = request.POST.get('65' + a['0'])
                        SheetRBIData.append(data)
                    print(SheetRBIData)
                elif isTank:
                    for a in dataSheet1:
                        data = {}
                        data['isTank'] = a['isTank']
                        data['0'] = request.POST.get('0'+a['0'])
                        data['1'] = request.POST.get('1'+a['0'])
                        data['2'] = request.POST.get('2'+a['0'])
                        data['3'] = request.POST.get('3'+a['0'])
                        data['4'] = request.POST.get('4'+a['0'])
                        data['5'] = request.POST.get('5'+a['0'])
                        data['6'] = request.POST.get('6'+a['0'])
                        data['7'] = request.POST.get('7'+a['0'])
                        data['8'] = request.POST.get('8'+a['0'])
                        data['9'] = request.POST.get('9'+a['0'])
                        data['10'] = request.POST.get('10'+a['0'])
                        if request.POST.get('11'+a['0']):
                            data['11'] = 1
                        else:
                            data['11'] = 0
                        data['12'] = request.POST.get('12' + a['0'])
                        data['13'] = request.POST.get('13' + a['0'])
                        data['14'] = request.POST.get('14' + a['0'])
                        if request.POST.get('15'+a['0']):
                            data['15'] = 1
                        else:
                            data['15'] = 0
                        if request.POST.get('16'+a['0']):
                            data['16'] = 1
                        else:
                            data['16'] = 0
                        data['17'] = request.POST.get('17' + a['0'])
                        if request.POST.get('18'+a['0']):
                            data['18'] = 1
                        else:
                            data['18'] = 0
                        if request.POST.get('19'+a['0']):
                            data['19'] = 1
                        else:
                            data['19'] = 0
                        if request.POST.get('20'+a['0']):
                            data['20'] = 1
                        else:
                            data['20'] = 0
                        if request.POST.get('21'+a['0']):
                            data['21'] = 1
                        else:
                            data['21'] = 0
                        data['22'] = request.POST.get('22' + a['0'])
                        if request.POST.get('23'+a['0']):
                            data['23'] = 1
                        else:
                            data['23'] = 0
                        if request.POST.get('24'+a['0']):
                            data['24'] = 1
                        else:
                            data['24'] = 0
                        if request.POST.get('25'+a['0']):
                            data['25'] = 1
                        else:
                            data['25'] = 0
                        if request.POST.get('26'+a['0']):
                            data['26'] = 1
                        else:
                            data['26'] = 0
                        if request.POST.get('27'+a['0']):
                            data['27'] = 1
                        else:
                            data['27'] = 0
                        data['28'] = request.POST.get('28' + a['0'])
                        if request.POST.get('29'+a['0']):
                            data['29'] = 1
                        else:
                            data['29'] = 0
                        data['30'] = request.POST.get('30' + a['0'])
                        data['31'] = request.POST.get('31' + a['0'])
                        data['32'] = request.POST.get('32' + a['0'])
                        data['33'] = request.POST.get('33' + a['0'])
                        dataSheet1Data.append(data)
                    #sheet 2
                    for a in dataSheet2:
                        data1 = {}
                        data1['isTank'] = a['isTank']
                        data1['0'] = request.POST.get('00' + a['0'])
                        data1['1'] = request.POST.get('01' + a['0'])
                        data1['2'] = request.POST.get('02' + a['0'])
                        data1['3'] = request.POST.get('03' + a['0'])
                        data1['4'] = request.POST.get('04' + a['0'])
                        if request.POST.get('05'+a['0']):
                            data1['5'] = 1
                        else:
                            data1['5'] = 0
                        data1['6'] = request.POST.get('06' + a['0'])
                        data1['7'] = request.POST.get('07' + a['0'])
                        data1['8'] = request.POST.get('08' + a['0'])
                        data1['9'] = request.POST.get('09' + a['0'])
                        data1['10'] = request.POST.get('010' + a['0'])
                        data1['11'] = request.POST.get('011' + a['0'])
                        data1['12'] = request.POST.get('012' + a['0'])
                        data1['13'] = request.POST.get('013' + a['0'])
                        if request.POST.get('014'+a['0']):
                            data1['14'] = 1
                        else:
                            data1['14'] = 0
                        data1['15'] = request.POST.get('015' + a['0'])
                        data1['16'] = request.POST.get('016' + a['0'])
                        data1['17'] = request.POST.get('017' + a['0'])
                        if request.POST.get('018'+a['0']):
                            data1['18'] = 1
                        else:
                            data1['18'] = 0
                        data1['19'] = request.POST.get('019' + a['0'])
                        data1['20'] = request.POST.get('020' + a['0'])
                        data1['21'] = request.POST.get('021' + a['0'])
                        data1['22'] = request.POST.get('022' + a['0'])
                        if request.POST.get('023'+a['0']):
                            data1['23'] = 1
                        else:
                            data1['23'] = 0
                        if request.POST.get('024'+a['0']):
                            data1['24'] = 1
                        else:
                            data1['24'] = 0
                        if request.POST.get('025'+a['0']):
                            data1['25'] = 1
                        else:
                            data1['25'] = 0
                        if request.POST.get('026'+a['0']):
                            data1['26'] = 1
                        else:
                            data1['26'] = 0
                        if request.POST.get('027'+a['0']):
                            data1['27'] = 1
                        else:
                            data1['27'] = 0
                        if request.POST.get('028'+a['0']):
                            data1['28'] = 1
                        else:
                            data1['28'] = 0
                        data1['29'] = request.POST.get('029' + a['0'])
                        if request.POST.get('030'+a['0']):
                            data1['30'] = 1
                        else:
                            data1['30'] = 0
                        data1['31'] = request.POST.get('031' + a['0'])
                        if request.POST.get('032'+a['0']):
                            data1['32'] = 1
                        else:
                            data1['32'] = 0
                        dataSheet2Data.append(data1)
                    #sheet3
                    for a in dataSheet3:
                        data2 = {}
                        data2['isTank'] = a['isTank']
                        data2['0'] = request.POST.get('710' + a['0'])
                        data2['1'] = request.POST.get('711' + a['0'])
                        data2['2'] = request.POST.get('712' + a['0'])
                        data2['3'] = request.POST.get('713' + a['0'])
                        data2['4'] = request.POST.get('714' + a['0'])
                        data2['5'] = request.POST.get('715' + a['0'])
                        data2['6'] = request.POST.get('716' + a['0'])
                        data2['7'] = request.POST.get('717' + a['0'])
                        data2['8'] = request.POST.get('718' + a['0'])
                        data2['9'] = request.POST.get('719' + a['0'])
                        data2['10'] = request.POST.get('7110' + a['0'])
                        data2['11'] = request.POST.get('7111' + a['0'])
                        data2['12'] = request.POST.get('7112' + a['0'])
                        data2['13'] = request.POST.get('7113' + a['0'])
                        data2['14'] = request.POST.get('7114' + a['0'])
                        data2['15'] = request.POST.get('7115' + a['0'])
                        data2['16'] = request.POST.get('7116' + a['0'])
                        dataSheet3Data.append(data2)
                    #sheet4
                    for a in dataSheet4:
                        data3 = {}
                        data3['isTank'] = a['isTank']
                        data3['isTank'] = a['isTank']
                        data3['0'] = request.POST.get('810' + a['0'])
                        data3['1'] = request.POST.get('811' + a['0'])
                        data3['2'] = request.POST.get('812' + a['0'])
                        data3['3'] = request.POST.get('813' + a['0'])
                        data3['4'] = request.POST.get('814' + a['0'])
                        data3['5'] = request.POST.get('815' + a['0'])
                        data3['6'] = request.POST.get('816' + a['0'])
                        data3['7'] = request.POST.get('817' + a['0'])
                        data3['8'] = request.POST.get('818' + a['0'])
                        data3['9'] = request.POST.get('819' + a['0'])
                        data3['10'] = request.POST.get('8110' + a['0'])
                        if request.POST.get('8111'+a['0']):
                            data3['11'] = 1
                        else:
                            data3['11'] = 0
                        if request.POST.get('8112'+a['0']):
                            data3['12'] = 1
                        else:
                            data3['12'] = 0
                        if request.POST.get('8113'+a['0']):
                            data3['13'] = 1
                        else:
                            data3['13'] = 0
                        if request.POST.get('8114'+a['0']):
                            data3['14'] = 1
                        else:
                            data3['14'] = 0
                        if request.POST.get('8115'+a['0']):
                            data3['15'] = 1
                        else:
                            data3['15'] = 0
                        if request.POST.get('8116'+a['0']):
                            data3['16'] = 1
                        else:
                            data3['16'] = 0
                        if request.POST.get('8117'+a['0']):
                            data3['17'] = 1
                        else:
                            data3['17'] = 0
                        if request.POST.get('8118'+a['0']):
                            data3['18'] = 1
                        else:
                            data3['18'] = 0
                        if request.POST.get('8119'+a['0']):
                            data3['19'] = 1
                        else:
                            data3['19'] = 0
                        data3['20'] = request.POST.get('8120' + a['0'])
                        data3['21'] = request.POST.get('8121' + a['0'])
                        data3['22'] = request.POST.get('8122' + a['0'])
                        data3['23'] = request.POST.get('8123' + a['0'])
                        data3['24'] = request.POST.get('8124' + a['0'])
                        data3['25'] = request.POST.get('8125' + a['0'])
                        dataSheet4Data.append(data3)
                    for a in dataSheet5:
                        data4 = {}
                        data4['isTank'] = a['isTank']
                        data4['0'] = request.POST.get('910' + a['0'])
                        data4['1'] = request.POST.get('911' + a['0'])
                        if request.POST.get('912' + a['0']):
                            data4['2'] = 1
                        else:
                            data4['2'] = 0
                        if request.POST.get('913' + a['0']):
                            data4['3'] = 1
                        else:
                            data4['3'] = 0
                        data4['4'] = request.POST.get('914' + a['0'])
                        data4['5'] = request.POST.get('915' + a['0'])
                        data4['6'] = request.POST.get('916' + a['0'])
                        data4['7'] = request.POST.get('917' + a['0'])
                        data4['8'] = request.POST.get('918' + a['0'])
                        data4['9'] = request.POST.get('919' + a['0'])
                        if request.POST.get('9110' + a['0']):
                            data4['10'] = 1
                        else:
                            data4['10'] = 0
                        data4['11'] = request.POST.get('9111' + a['0'])
                        if request.POST.get('9112' + a['0']):
                            data4['12'] = 1
                        else:
                            data4['12'] = 0
                        data4['13'] = request.POST.get('9113' + a['0'])
                        data4['14'] = request.POST.get('9114' + a['0'])
                        if request.POST.get('9115' + a['0']):
                            data4['15'] = 1
                        else:
                            data4['15'] = 0
                        data4['16'] = request.POST.get('9116' + a['0'])
                        dataSheet5Data.append(data4)
                    for a in dataSheet6:
                        data5={}
                        # data5['isTank'] = a['isTank']
                        data5['0'] = request.POST.get('610' + a['0'])
                        if request.POST.get('611' + a['0']):
                            data5['1'] = 1
                        else:
                            data5['1'] = 0
                        data5['2'] = request.POST.get('612' + a['0'])
                        data5['3'] = request.POST.get('613' + a['0'])
                        if request.POST.get('614' + a['0']):
                            data5['4'] = 1
                        else:
                            data5['4'] = 0
                        data5['5'] = request.POST.get('615' + a['0'])
                        data5['6'] = request.POST.get('616' + a['0'])
                        if request.POST.get('617' + a['0']):
                            data5['7'] = 1
                        else:
                            data5['7'] = 0
                        if request.POST.get('618' + a['0']):
                            data5['8'] = 1
                        else:
                            data5['8'] = 0
                        data5['9'] = request.POST.get('619' + a['0'])
                        data5['10'] = request.POST.get('6110' + a['0'])
                        if request.POST.get('6111' + a['0']):
                            data5['11'] = 1
                        else:
                            data5['11'] = 0
                        if request.POST.get('6112' + a['0']):
                            data5['12'] = 1
                        else:
                            data5['12'] = 0
                        if request.POST.get('6113' + a['0']):
                            data5['13'] = 1
                        else:
                            data5['13'] = 0
                        data5['14'] = request.POST.get('6114' + a['0'])
                        data5['15'] = request.POST.get('6115' + a['0'])
                        dataSheet6Data.append(data5)
                    for a in dataSheet7:
                        data6 = {}
                        data6['isTank'] = a['isTank']
                        data6['0'] = request.POST.get('000' + a['0'])
                        data6['1'] = request.POST.get('001' + a['0'])
                        data6['2'] = request.POST.get('002' + a['0'])
                        data6['3'] = request.POST.get('003' + a['0'])
                        data6['4'] = request.POST.get('004' + a['0'])
                        data6['5'] = request.POST.get('005' + a['0'])
                        dataSheet7Data.append(data6)
                else:
                    # print('thiet bi thuong')
                    for a in dataSheet1:
                        data = {}
                        data['isTank'] = a['isTank']
                        data['0'] = request.POST.get('0' + a['0'])
                        data['1'] = request.POST.get('1' + a['0'])
                        data['2'] = request.POST.get('2' + a['0'])
                        data['3'] = request.POST.get('3' + a['0'])
                        data['4'] = request.POST.get('4' + a['0'])
                        data['5'] = request.POST.get('5' + a['0'])
                        data['6'] = request.POST.get('6' + a['0'])
                        data['7'] = request.POST.get('7' + a['0'])
                        data['8'] = request.POST.get('8' + a['0'])
                        data['9'] = request.POST.get('9' + a['0'])
                        data['10'] = request.POST.get('10' + a['0'])
                        if request.POST.get('11' + a['0']):
                            data['11'] = 1
                        else:
                            data['11'] = 0
                        data['12'] = request.POST.get('12' + a['0'])
                        data['13'] = request.POST.get('13' + a['0'])
                        data['14'] = request.POST.get('14' + a['0'])
                        if request.POST.get('15' + a['0']):
                            data['15'] = 1
                        else:
                            data['15'] = 0
                        if request.POST.get('16' + a['0']):
                            data['16'] = 1
                        else:
                            data['16'] = 0
                        if request.POST.get('17' + a['0']):
                            data['17'] = 1
                        else:
                            data['17'] = 0
                        if request.POST.get('18' + a['0']):
                            data['18'] = 1
                        else:
                            data['18'] = 0
                        data['19'] = request.POST.get('19' + a['0'])
                        if request.POST.get('20' + a['0']):
                            data['20'] = 1
                        else:
                            data['20'] = 0
                        if request.POST.get('21' + a['0']):
                            data['21'] = 1
                        else:
                            data['21'] = 0
                        if request.POST.get('21' + a['0']):
                            data['22'] = 1
                        else:
                            data['22'] = 0
                        if request.POST.get('23' + a['0']):
                            data['23'] = 1
                        else:
                            data['23'] = 0
                        if request.POST.get('24' + a['0']):
                            data['24'] = 1
                        else:
                            data['24'] = 0
                        data['25'] = request.POST.get('25' + a['0'])
                        if request.POST.get('26' + a['0']):
                            data['26'] = 1
                        else:
                            data['26'] = 0
                        data['27'] = request.POST.get('27' + a['0'])
                        if request.POST.get('28' + a['0']):
                            data['28'] = 1
                        else:
                            data['28'] = 0

                        if request.POST.get('29' + a['0']):
                            data['29'] = 1
                        else:
                            data['29'] = 0

                        dataSheet1Data.append(data)
                    # sheet 2
                    for a in dataSheet2:
                        data1 = {}
                        data1['isTank'] = a['isTank']
                        data1['0'] = request.POST.get('00' + a['0'])
                        data1['1'] = request.POST.get('01' + a['0'])
                        data1['2'] = request.POST.get('02' + a['0'])
                        data1['3'] = request.POST.get('03' + a['0'])
                        data1['4'] = request.POST.get('04' + a['0'])
                        if request.POST.get('05' + a['0']):
                            data1['5'] = 1
                        else:
                            data1['5'] = 0
                        data1['6'] = request.POST.get('06' + a['0'])
                        data1['7'] = request.POST.get('07' + a['0'])
                        data1['8'] = request.POST.get('08' + a['0'])
                        data1['9'] = request.POST.get('09' + a['0'])
                        data1['10'] = request.POST.get('010' + a['0'])
                        data1['11'] = request.POST.get('011' + a['0'])
                        data1['12'] = request.POST.get('012' + a['0'])
                        data1['13'] = request.POST.get('013' + a['0'])
                        if request.POST.get('014' + a['0']):
                            data1['14'] = 1
                        else:
                            data1['14'] = 0
                        data1['15'] = request.POST.get('015' + a['0'])
                        data1['16'] = request.POST.get('016' + a['0'])
                        data1['17'] = request.POST.get('017' + a['0'])
                        if request.POST.get('018' + a['0']):
                            data1['18'] = 1
                        else:
                            data1['18'] = 0
                        data1['19'] = request.POST.get('019' + a['0'])
                        data1['20'] = request.POST.get('020' + a['0'])
                        data1['21'] = request.POST.get('021' + a['0'])
                        data1['22'] = request.POST.get('022' + a['0'])
                        if request.POST.get('023' + a['0']):
                            data1['23'] = 1
                        else:
                            data1['23'] = 0
                        data1['24'] = request.POST.get('024' + a['0'])
                        if request.POST.get('025' + a['0']):
                            data1['25'] = 1
                        else:
                            data1['25'] = 0
                        if request.POST.get('026' + a['0']):
                            data1['26'] = 1
                        else:
                            data1['26'] = 0
                        if request.POST.get('027' + a['0']):
                            data1['27'] = 1
                        else:
                            data1['27'] = 0
                        if request.POST.get('028' + a['0']):
                            data1['28'] = 1
                        else:
                            data1['28'] = 0
                        data1['29'] = request.POST.get('029' + a['0'])
                        if request.POST.get('030' + a['0']):
                            data1['30'] = 1
                        else:
                            data1['30'] = 0
                        data1['31'] = request.POST.get('031' + a['0'])
                        if request.POST.get('032' + a['0']):
                            data1['32'] = 1
                        else:
                            data1['32'] = 0
                        data1['33'] = request.POST.get('033' + a['0'])
                        data1['34'] = request.POST.get('034' + a['0'])
                        data1['35'] = request.POST.get('035' + a['0'])
                        data1['36'] = request.POST.get('036' + a['0'])
                        data1['37'] = request.POST.get('037' + a['0'])
                        data1['38'] = request.POST.get('038' + a['0'])
                        data1['39'] = request.POST.get('039' + a['0'])
                        data1['40'] = request.POST.get('040' + a['0'])
                        data1['41'] = request.POST.get('041' + a['0'])
                        if request.POST.get('042' + a['0']):
                            data1['42'] = 1
                        else:
                            data1['42'] = 0
                        if request.POST.get('043' + a['0']):
                            data1['43'] = 1
                        else:
                            data1['43'] = 0
                        dataSheet2Data.append(data1)
                    # sheet3
                    for a in dataSheet3:
                        data2 = {}
                        data2['isTank'] = a['isTank']
                        data2['0'] = request.POST.get('710' + a['0'])
                        data2['1'] = request.POST.get('711' + a['0'])
                        data2['2'] = request.POST.get('712' + a['0'])
                        data2['3'] = request.POST.get('713' + a['0'])
                        data2['4'] = request.POST.get('714' + a['0'])
                        data2['5'] = request.POST.get('715' + a['0'])
                        data2['6'] = request.POST.get('716' + a['0'])
                        data2['7'] = request.POST.get('717' + a['0'])
                        data2['8'] = request.POST.get('718' + a['0'])
                        data2['9'] = request.POST.get('719' + a['0'])
                        data2['10'] = request.POST.get('7110' + a['0'])
                        data2['11'] = request.POST.get('7111' + a['0'])
                        data2['12'] = request.POST.get('7112' + a['0'])
                        data2['13'] = request.POST.get('7113' + a['0'])
                        data2['14'] = request.POST.get('7114' + a['0'])
                        data2['15'] = request.POST.get('7115' + a['0'])
                        data2['16'] = request.POST.get('7116' + a['0'])
                        data2['17'] = request.POST.get('7117' + a['0'])
                        dataSheet3Data.append(data2)
                    # sheet4
                    for a in dataSheet4:
                        data3 = {}
                        data3['isTank'] = a['isTank']

                        data3['0'] = request.POST.get('810' + a['0'])
                        data3['1'] = request.POST.get('811' + a['0'])
                        data3['2'] = request.POST.get('812' + a['0'])
                        data3['3'] = request.POST.get('813' + a['0'])
                        data3['4'] = request.POST.get('814' + a['0'])
                        data3['5'] = request.POST.get('815' + a['0'])
                        data3['6'] = request.POST.get('816' + a['0'])
                        data3['7'] = request.POST.get('817' + a['0'])
                        data3['8'] = request.POST.get('818' + a['0'])
                        if request.POST.get('819' + a['0']):
                            data3['9'] = 1
                        else:
                            data3['9'] = 0
                        data3['10'] = request.POST.get('8110' + a['0'])
                        if request.POST.get('8111' + a['0']):
                            data3['11'] = 1
                        else:
                            data3['11'] = 0
                        if request.POST.get('8112' + a['0']):
                            data3['12'] = 1
                        else:
                            data3['12'] = 0
                        if request.POST.get('8113' + a['0']):
                            data3['13'] = 1
                        else:
                            data3['13'] = 0
                        if request.POST.get('8114' + a['0']):
                            data3['14'] = 1
                        else:
                            data3['14'] = 0
                        if request.POST.get('8115' + a['0']):
                            data3['15'] = 1
                        else:
                            data3['15'] = 0
                        if request.POST.get('8116' + a['0']):
                            data3['16'] = 1
                        else:
                            data3['16'] = 0
                        if request.POST.get('8117' + a['0']):
                            data3['17'] = 1
                        else:
                            data3['17'] = 0
                        if request.POST.get('8118' + a['0']):
                            data3['18'] = 1
                        else:
                            data3['18'] = 0
                        if request.POST.get('8119' + a['0']):
                            data3['19'] = 1
                        else:
                            data3['19'] = 0
                        data3['20'] = request.POST.get('8120' + a['0'])
                        data3['21'] = request.POST.get('8121' + a['0'])
                        data3['22'] = request.POST.get('8122' + a['0'])
                        data3['23'] = request.POST.get('8123' + a['0'])
                        data3['24'] = request.POST.get('8124' + a['0'])
                        data3['25'] = request.POST.get('8125' + a['0'])
                        if request.POST.get('8126' + a['0']):
                            data3['26'] = 1
                        else:
                            data3['26'] = 0
                        dataSheet4Data.append(data3)
                    for a in dataSheet5:
                        data4 = {}
                        data4['isTank'] = a['isTank']
                        data4['0'] = request.POST.get('910' + a['0'])
                        data4['1'] = request.POST.get('911' + a['0'])
                        if request.POST.get('912' + a['0']):
                            data4['2'] = 1
                        else:
                            data4['2'] = 0
                        if request.POST.get('913' + a['0']):
                            data4['3'] = 1
                        else:
                            data4['3'] = 0
                        data4['4'] = request.POST.get('914' + a['0'])
                        data4['5'] = request.POST.get('915' + a['0'])
                        data4['6'] = request.POST.get('916' + a['0'])
                        data4['7'] = request.POST.get('917' + a['0'])
                        data4['8'] = request.POST.get('918' + a['0'])
                        data4['9'] = request.POST.get('919' + a['0'])
                        if request.POST.get('9110' + a['0']):
                            data4['10'] = 1
                        else:
                            data4['10'] = 0
                        if request.POST.get('9111' + a['0']):
                            data4['11'] = 1
                        else:
                            data4['11'] = 0
                        data4['12'] = request.POST.get('9112' + a['0'])
                        if request.POST.get('9113' + a['0']):
                            data4['13'] = 1
                        else:
                            data4['13'] = 0
                        data4['14'] = request.POST.get('9114' + a['0'])
                        if request.POST.get('9115' + a['0']):
                            data4['15'] = 1
                        else:
                            data4['15'] = 0
                        data4['16'] = request.POST.get('9116' + a['0'])
                        data4['17'] = request.POST.get('9117' + a['0'])
                        if request.POST.get('9118' + a['0']):
                            data4['18'] = 1
                        else:
                            data4['18'] = 0
                        data4['19'] = request.POST.get('9119' + a['0'])
                        data4['20'] = request.POST.get('9120' + a['0'])
                        dataSheet5Data.append(data4)
                    for a in dataSheet6:
                        data5 = {}

                        data5['0'] = request.POST.get('610' + a['0'])
                        if request.POST.get('611' + a['0']):
                            data5['1'] = 1
                        else:
                            data5['1'] = 0
                        data5['2'] = request.POST.get('612' + a['0'])
                        data5['3'] = request.POST.get('613' + a['0'])
                        if request.POST.get('614' + a['0']):
                            data5['4'] = 1
                        else:
                            data5['4'] = 0
                        data5['5'] = request.POST.get('615' + a['0'])
                        data5['6'] = request.POST.get('616' + a['0'])
                        if request.POST.get('617' + a['0']):
                            data5['7'] = 1
                        else:
                            data5['7'] = 0
                        if request.POST.get('618' + a['0']):
                            data5['8'] = 1
                        else:
                            data5['8'] = 0
                        data5['9'] = request.POST.get('619' + a['0'])
                        data5['10'] = request.POST.get('6110' + a['0'])
                        if request.POST.get('6111' + a['0']):
                            data5['11'] = 1
                        else:
                            data5['11'] = 0
                        if request.POST.get('6112' + a['0']):
                            data5['12'] = 1
                        else:
                            data5['12'] = 0
                        if request.POST.get('6113' + a['0']):
                            data5['13'] = 1
                        else:
                            data5['13'] = 0
                        data5['14'] = request.POST.get('6114' + a['0'])
                        data5['15'] = request.POST.get('6115' + a['0'])
                        dataSheet6Data.append(data5)
                    for a in dataSheet7:
                        data6 = {}
                        data6['isTank'] = a['isTank']
                        data6['0'] = request.POST.get('000' + a['0'])
                        data6['1'] = request.POST.get('001' + a['0'])
                        data6['2'] = request.POST.get('002' + a['0'])
                        data6['3'] = request.POST.get('003' + a['0'])
                        data6['4'] = request.POST.get('004' + a['0'])
                        data6['5'] = request.POST.get('005' + a['0'])
                        data6['6'] = request.POST.get('006' + a['0'])
                        data6['7'] = request.POST.get('007' + a['0'])
                        data6['8'] = request.POST.get('008' + a['0'])
                        data6['9'] = request.POST.get('009' + a['0'])
                        data6['10'] = request.POST.get('0010' + a['0'])
                        dataSheet7Data.append(data6)
                if not check:
                    ExcelImport.saveSheetEquip(dataSheet1Data)
                    ExcelImport.saveSheetComponent(dataSheet2Data)
                    ExcelImport.saveSheetAssessment(dataSheet2Data)
                    ExcelImport.saveSheetRwEquipment(dataSheet1Data)
                    ExcelImport.saveSheetRwComponent(dataSheet2Data)
                    ExcelImport.saveSheetRwExtcor(dataSheet3Data)
                    ExcelImport.saveSheetStream1(dataSheet3Data)
                    ExcelImport.saveSheetStream2(dataSheet4Data)
                    ExcelImport.saveSheetMaterial(dataSheet5Data)
                    ExcelImport.saveSheetCoating(dataSheet6Data)
                    ExcelImport.saveSheetCOF(dataSheet7Data)
                    info['success'] = "Upload data success!"
                    info['fail'] = ""
                else:
                    if SheetRBIData[0]['2'] != "Choose Equipment...":
                        # ExcelImport.saveRBIData(SheetRBIData)
                        ExcelImport.saveRBIData_v2(SheetRBIData)
                        print("check done")
                        info['success'] = "Upload data success!"
                        info['fail'] = ""
                    else:
                        info['success'] = "Upload data success!"
                        info['fail'] = "You need select Facility to import data!"

                uploaded_file_url = fs.url(filename)
                url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
                    '%20', ' ')
                # return redirect('successUpload', siteID=siteID)

                # return redirect('uploadPlan', siteID=siteID)
                # ExcelImport.importPlanProcess(url_file)
            # if request.method == 'POST' and request.FILES['myexcelFile']:
            #     print("myexcelFile")
            #     myfile = request.FILES['myexcelFile']
            #     fs = FileSystemStorage()
            #     filename = fs.save(myfile.name, myfile)
            #     print(filename)
            #     uploaded_file_url = fs.url(filename)
            #     print(uploaded_file_url)
            #     url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
            #         '%20', ' ')
                # ExcelImport.importPlanProcess(url_file)
            #     print("go done")
            # try:
            #     os.remove(url_file)
            # except OSError:
            #     pass
        except Exception as e:
            print(e)
            print("ko co file")
            print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        # try:
        #     if request.method == 'POST' and request.FILES['myexcelScada']:
        #         print("myexcelScada")
        # except:
        #     print("ko co file scada")
    except Exception as e:
        print(e)
        raise Http404
    siteID = encrypt(siteID)
    return render(request, 'FacilityUI/facility/uploadData.html',
                  {'siteID': siteID, 'filename':filename ,'showcontent': showcontent,'RBIData':RBIData,'check':check,'dataSheet1':dataSheet1,'dataSheet2':dataSheet2,'dataSheet3':dataSheet3,'dataSheet4':dataSheet4,
                   'dataSheet5':dataSheet5,'dataSheet6':dataSheet6,'dataSheet7':dataSheet7,'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid,
                   'info': request.session, 'page': 'uploadPlan','faci':faci,'equip':equip,'comp':comp,'isTank':isTank,'api':apicomponentType,'manufacture':manufacture,'info':info
                   ,'file_system_path_template':file_system_path_template,'file_system_path':file_system_path,'sitename':sitename,'designcode':designcode,'listEquipmentNumber':listEquipmentNumber,'listComponentNumber':listComponentNumber})
def successUpload(request,siteID):
    return render(request, 'FacilityUI/facility/successUploadData.html',{'siteID': siteID})
def ImportExcel(request,url_file):
    return render(request, 'FacilityUI/facility/importExcel.html',
                  {'noti': noti, 'countnoti': countnoti, 'count': count,
                   'info': request.session, 'page': 'importexcel'})
def uploadInspPlan(request, siteID,filename=""):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        print("da vao")
        fs = FileSystemStorage()
        showcontent = "Choose inspection history file"
        # if filename:
        #     print("da lay duoc file name", filename)
        #     uploaded_file_url = fs.url(filename)
        #     url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
        #         '%20', ' ')
            # dataSheet1 = ExcelImport.getSheetEquip(url_file)
            # dataSheet2 = ExcelImport.getSheetCom(url_file)
            # dataSheet3 = ExcelImport.getSheetOperCon(url_file)
            # dataSheet4 = ExcelImport.getSheetStream(url_file)
            # dataSheet5 = ExcelImport.getSheetMaterial(url_file)
            # dataSheet6 = ExcelImport.getSheetCoat(url_file)
            # dataSheet7 = ExcelImport.getSheetFullCoF(url_file)
        if "import" in request.POST:
            # print("go import")
            myfile = request.FILES['myexcelFile']
            filename = fs.save(myfile.name, myfile)
            # print(filename)
            # uploaded_file_url = fs.url(filename)
            # url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
            #     '%20', ' ')
            # link=url_file
            # print(link)
            return redirect('upload', siteID=siteID, filename=filename)
        if "submitFile" in request.POST:
            # print("2")
            # print(filename)
            uploaded_file_url = fs.url(filename)
            url_file = settings.BASE_DIR.replace('\\', '//') + str(uploaded_file_url).replace('/', '//').replace(
                '%20', ' ')
            ExcelImport.importInspectionPlan(url_file)
            try:
                os.remove(url_file)
            except OSError:
                pass
        # print("go inspection history")
        # showcontent = "Choose inspection history file"
        #
        # if request.method == 'POST' and request.FILES['myexcelFile']:
        #     myfile = request.FILES['myexcelFile']
        #     fs = FileSystemStorage()
        #     filename = fs.save(myfile.name, myfile)
        #     upload_url = fs.url(filename)
        #     url_file = settings.BASE_DIR.replace('\\', '//') + str(upload_url).replace('/', '//').replace('%20', ' ')
        #     ExcelImport.importInspectionPlan(url_file)
    except Exception as e:
        print(e)
        raise Http404
    siteID = encrypt(siteID)
    return render(request, 'FacilityUI/facility/uploadData.html',
                  {'siteID': siteID, 'showcontent': showcontent, 'noti': noti, 'countnoti': countnoti, 'count': count,
                   'info': request.session, 'page': 'uploadHistory','notiVerification':notiVerification,'siteid':siteid})


# def uploadSCADA(request, siteID):
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#
#     return render(request, 'FacilityUI/facility/uploadSCADA.html',
#                   {'siteID': siteID, 'noti': noti, 'countnoti': countnoti, 'count': count,
#                    'info': request.session, 'page': 'uploadHistory'})
############### Dang Nhap Dang Suat #################
def ManagementSystems(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    faci = models.Facility.objects.get(facilityid=facilityID)
    data={}
    num=(10, 2, 2, 2, 2, 2, 10, 15, 10, 5, 5, 5, 5, 2, 2, 2, 10, 3, 3, 3, 5, 10, 8, 4, 4, 1, 1, 1, 1, 1, 1, 5, 8, 10, 5, 1, 1, 1, 1, 1, 2, 2, 2, 2,
                2,2,2,3,3,3,3,3,8,3,3,10,12,10,5,9,5,4,4,4,4,5,4,5,3,3,3,3,3,10,5,10,5,2,2,2,2,2,2,2,2,3,4,3,10,10,11,6,3,0,8,4,2,0,2,2,2,2,2,2,2,2,2,2,10,1,1,1,1,1,
                10,10,7,4,2,0,10,5,4,4,10,10,3,3,3,3,3,3,10,7,3,0,10,5,0,10,7,5,3,0,4,4,4,5,5,5,5,2,2,2,2,2,2,1,2,2,5,5,1,1,3,1,1,2,2,2,3,2,5,3,2,3,3,5,1,2,3,2,5,3,2,
                5,5,3,1,1,1,1,1,1,1,1,1,1,1,1,1,5,5,10,10,10,5,5,5,5,5,5,10,5,2,2,2,2,2,2,2,2,2,2,2,5,2,2,2,5,2,10,10,5,3,3,2,2,2,2,2,2,2,2,2,2,2,5,10,5,6,6,3,3,3,2,2,2,2,
                9,9,10,10,7,0,10,5,5,10,2,6,4,2,7,4,5,8,3,8,4)
    # if request.POST.get('check1'):
    #     print(num[0])
    # if request.POST.get('check2'):
    #     check[1]=2
    #     print('check[1]',check[1])
    if request.method == 'POST':
        for i in range(len(num)):
            score=0
            if request.POST.get('check1'):
                score+=num[0]
            if request.POST.get('check2'):
                score+=num[1]
            if request.POST.get('check3'):
                score+=num[2]
            if request.POST.get('check4'):
                score+=num[3]
            if request.POST.get('check5'):
                score+=num[4]
            if request.POST.get('check6'):
                score+=num[5]
            if request.POST.get('check7'):
                score+=num[6]
            if request.POST.get('check8'):
                score+=num[7]
            if request.POST.get('check9'):
                score+=num[8]
            if request.POST.get('check10'):
                score+=num[9]
            if request.POST.get('check11'):
                score+=num[10]
            if request.POST.get('check12'):
                score+=num[11]
            if request.POST.get('check13'):
                score+=num[12]
            if request.POST.get('check14'):
                score+=num[13]
            if request.POST.get('check15'):
                score+=num[14]
            if request.POST.get('check16'):
                score+=num[15]
            if request.POST.get('check17'):
                score+=num[16]
            if request.POST.get('check18'):
                score+=num[17]
            if request.POST.get('check19'):
                score+=num[18]
            if request.POST.get('check20'):
                score+=num[19]
            if request.POST.get('check21'):
                score+=num[20]
            if request.POST.get('check22'):
                score+=num[21]
            if request.POST.get('check23'):
                score+=num[22]
            if request.POST.get('check24'):
                score+=num[23]
            if request.POST.get('check25'):
                score+=num[24]
            if request.POST.get('check26'):
                score+=num[25]
            if request.POST.get('check27'):
                score+=num[26]
            if request.POST.get('check28'):
                score+=num[27]
            if request.POST.get('check29'):
                score+=num[28]
            if request.POST.get('check30'):
                score+=num[29]
            if request.POST.get('check31'):
                score+=num[30]
            if request.POST.get('check32'):
                score+=num[31]
            if request.POST.get('check33'):
                score+=num[32]
            if request.POST.get('check34'):
                score+=num[33]
            if request.POST.get('check35'):
                score+=num[34]
            if request.POST.get('check36'):
                score+=num[35]
            if request.POST.get('check37'):
                score+=num[36]
            if request.POST.get('check38'):
                score+=num[37]
            if request.POST.get('check39'):
                score+=num[38]
            if request.POST.get('check40'):
                score+=num[39]
            if request.POST.get('check41'):
                score+=num[40]
            if request.POST.get('check42'):
                score+=num[41]
            if request.POST.get('check43'):
                score+=num[42]
            if request.POST.get('check44'):
                score+=num[43]
            if request.POST.get('check45'):
                score+=num[44]
            if request.POST.get('check46'):
                score+=num[45]
            if request.POST.get('check47'):
                score+=num[46]
            if request.POST.get('check48'):
                score+=num[47]
            if request.POST.get('check49'):
                score+=num[48]
            if request.POST.get('check50'):
                score+=num[49]
            if request.POST.get('check51'):
                score+=num[50]
            if request.POST.get('check52'):
                score+=num[51]
            if request.POST.get('check53'):
                score+=num[52]
            if request.POST.get('check54'):
                score+=num[53]
            if request.POST.get('check55'):
                score+=num[54]
            if request.POST.get('check56'):
                score+=num[55]
            if request.POST.get('check57'):
                score+=num[56]
            if request.POST.get('check58'):
                score+=num[57]
            if request.POST.get('check59'):
                score+=num[58]
            if request.POST.get('check60'):
                score+=num[59]
            if request.POST.get('check61'):
                score+=num[60]
            if request.POST.get('check62'):
                score+=num[61]
            if request.POST.get('check63'):
                score+=num[62]
            if request.POST.get('check64'):
                score+=num[63]
            if request.POST.get('check65'):
                score+=num[64]
            if request.POST.get('check66'):
                score+=num[65]
            if request.POST.get('check67'):
                score+=num[66]
            if request.POST.get('check68'):
                score+=num[67]
            if request.POST.get('check69'):
                score+=num[68]
            if request.POST.get('check70'):
                score+=num[69]
            if request.POST.get('check71'):
                score+=num[70]
            if request.POST.get('check72'):
                score+=num[71]
            if request.POST.get('check73'):
                score+=num[72]
            if request.POST.get('check74'):
                score+=num[73]
            if request.POST.get('check75'):
                score+=num[74]
            if request.POST.get('check76'):
                score+=num[75]
            if request.POST.get('check77'):
                score+=num[76]
            if request.POST.get('check78'):
                score+=num[77]
            if request.POST.get('check79'):
                score+=num[78]
            if request.POST.get('check80'):
                score+=num[79]
            if request.POST.get('check81'):
                score+=num[80]
            if request.POST.get('check82'):
                score+=num[81]
            if request.POST.get('check83'):
                score+=num[82]
            if request.POST.get('check84'):
                score+=num[83]
            if request.POST.get('check85'):
                score+=num[84]
            if request.POST.get('check86'):
                score+=num[85]
            if request.POST.get('check87'):
                score+=num[86]
            if request.POST.get('check88'):
                score+=num[87]
            if request.POST.get('check89'):
                score+=num[88]
            if request.POST.get('check90'):
                score+=num[89]
            if request.POST.get('check91'):
                score+=num[90]
            if request.POST.get('check92'):
                score+=num[91]
            if request.POST.get('check93'):
                score+=num[92]
            if request.POST.get('check94'):
                score+=num[93]
            if request.POST.get('check95'):
                score+=num[94]
            if request.POST.get('check96'):
                score+=num[95]
            if request.POST.get('check97'):
                score+=num[96]
            if request.POST.get('check98'):
                score+=num[97]
            if request.POST.get('check99'):
                score+=num[98]
            if request.POST.get('check100'):
                score+=num[99]
            if request.POST.get('check101'):
                score+=num[100]
            if request.POST.get('check102'):
                score+=num[101]
            if request.POST.get('check103'):
                score+=num[102]
            if request.POST.get('check104'):
                score+=num[103]
            if request.POST.get('check105'):
                score+=num[104]
            if request.POST.get('check106'):
                score+=num[105]
            if request.POST.get('check107'):
                score+=num[106]
            if request.POST.get('check108'):
                score+=num[107]
            if request.POST.get('check109'):
                score+=num[108]
            if request.POST.get('check110'):
                score+=num[109]
            if request.POST.get('check111'):
                score+=num[110]
            if request.POST.get('check112'):
                score+=num[111]
            if request.POST.get('check113'):
                score+=num[112]
            if request.POST.get('check114'):
                score+=num[113]
            if request.POST.get('check115'):
                score+=num[114]
            if request.POST.get('check116'):
                score+=num[115]
            if request.POST.get('check117'):
                score+=num[116]
            if request.POST.get('check118'):
                score+=num[117]
            if request.POST.get('check119'):
                score+=num[118]
            if request.POST.get('check120'):
                score+=num[119]
            if request.POST.get('check121'):
                score+=num[120]
            if request.POST.get('check122'):
                score+=num[121]
            if request.POST.get('check123'):
                score+=num[122]
            if request.POST.get('check124'):
                score+=num[123]
            if request.POST.get('check125'):
                score+=num[124]
            if request.POST.get('check126'):
                score+=num[125]
            if request.POST.get('check127'):
                score+=num[126]
            if request.POST.get('check128'):
                score+=num[127]
            if request.POST.get('check129'):
                score+=num[128]
            if request.POST.get('check130'):
                score+=num[129]
            if request.POST.get('check131'):
                score+=num[130]
            if request.POST.get('check132'):
                score+=num[131]
            if request.POST.get('check133'):
                score+=num[132]
            if request.POST.get('check134'):
                score+=num[133]
            if request.POST.get('check135'):
                score+=num[134]
            if request.POST.get('check136'):
                score+=num[135]
            if request.POST.get('check137'):
                score+=num[136]
            if request.POST.get('check138'):
                score+=num[137]
            if request.POST.get('check139'):
                score+=num[138]
            if request.POST.get('check140'):
                score+=num[139]
            if request.POST.get('check141'):
                score+=num[140]
            if request.POST.get('check142'):
                score+=num[141]
            if request.POST.get('check143'):
                score+=num[142]
            if request.POST.get('check144'):
                score+=num[143]
            if request.POST.get('check145'):
                score+=num[144]
            if request.POST.get('check146'):
                score+=num[145]
            if request.POST.get('check147'):
                score+=num[146]
            if request.POST.get('check148'):
                score+=num[147]
            if request.POST.get('check149'):
                score+=num[148]
            if request.POST.get('check150'):
                score+=num[149]
            if request.POST.get('check151'):
                score+=num[150]
            if request.POST.get('check152'):
                score+=num[151]
            if request.POST.get('check153'):
                score+=num[152]
            if request.POST.get('check154'):
                score+=num[153]
            if request.POST.get('check155'):
                score+=num[154]
            if request.POST.get('check156'):
                score+=num[155]
            if request.POST.get('check157'):
                score+=num[156]
            if request.POST.get('check158'):
                score+=num[157]
            if request.POST.get('check159'):
                score+=num[158]
            if request.POST.get('check160'):
                score+=num[159]
            if request.POST.get('check161'):
                score+=num[160]
            if request.POST.get('check162'):
                score+=num[161]
            if request.POST.get('check163'):
                score+=num[162]
            if request.POST.get('check164'):
                score+=num[163]
            if request.POST.get('check165'):
                score+=num[164]
            if request.POST.get('check166'):
                score+=num[165]
            if request.POST.get('check167'):
                score+=num[166]
            if request.POST.get('check168'):
                score+=num[167]
            if request.POST.get('check169'):
                score+=num[168]
            if request.POST.get('check170'):
                score+=num[169]
            if request.POST.get('check171'):
                score+=num[170]
            if request.POST.get('check172'):
                score+=num[171]
            if request.POST.get('check173'):
                score+=num[172]
            if request.POST.get('check174'):
                score+=num[173]
            if request.POST.get('check175'):
                score+=num[174]
            if request.POST.get('check176'):
                score+=num[175]
            if request.POST.get('check177'):
                score+=num[176]
            if request.POST.get('check178'):
                score+=num[177]
            if request.POST.get('check179'):
                score+=num[178]
            if request.POST.get('check180'):
                score+=num[179]
            if request.POST.get('check181'):
                score+=num[180]
            if request.POST.get('check182'):
                score+=num[181]
            if request.POST.get('check183'):
                score+=num[182]
            if request.POST.get('check184'):
                score+=num[183]
            if request.POST.get('check185'):
                score+=num[184]
            if request.POST.get('check186'):
                score+=num[185]
            if request.POST.get('check187'):
                score+=num[186]
            if request.POST.get('check188'):
                score+=num[187]
            if request.POST.get('check189'):
                score+=num[188]
            if request.POST.get('check190'):
                score+=num[189]
            if request.POST.get('check191'):
                score+=num[190]
            if request.POST.get('check192'):
                score+=num[191]
            if request.POST.get('check193'):
                score+=num[192]
            if request.POST.get('check194'):
                score+=num[193]
            if request.POST.get('check195'):
                score+=num[194]
            if request.POST.get('check196'):
                score+=num[195]
            if request.POST.get('check197'):
                score+=num[196]
            if request.POST.get('check198'):
                score+=num[197]
            if request.POST.get('check199'):
                score+=num[198]
            if request.POST.get('check200'):
                score+=num[199]
            if request.POST.get('check201'):
                score+=num[200]
            if request.POST.get('check202'):
                score+=num[201]
            if request.POST.get('check203'):
                score+=num[202]
            if request.POST.get('check204'):
                score+=num[203]
            if request.POST.get('check205'):
                score+=num[204]
            if request.POST.get('check206'):
                score+=num[205]
            if request.POST.get('check207'):
                score+=num[206]
            if request.POST.get('check208'):
                score+=num[207]
            if request.POST.get('check209'):
                score+=num[208]
            if request.POST.get('check210'):
                score+=num[209]
            if request.POST.get('check211'):
                score+=num[210]
            if request.POST.get('check212'):
                score+=num[211]
            if request.POST.get('check213'):
                score+=num[212]
            if request.POST.get('check214'):
                score+=num[213]
            if request.POST.get('check215'):
                score+=num[214]
            if request.POST.get('check216'):
                score+=num[215]
            if request.POST.get('check217'):
                score+=num[216]
            if request.POST.get('check218'):
                score+=num[217]
            if request.POST.get('check219'):
                score+=num[218]
            if request.POST.get('check220'):
                score+=num[219]
            if request.POST.get('check221'):
                score+=num[220]
            if request.POST.get('check222'):
                score+=num[221]
            if request.POST.get('check223'):
                score+=num[222]
            if request.POST.get('check224'):
                score+=num[223]
            if request.POST.get('check225'):
                score+=num[224]
            if request.POST.get('check226'):
                score+=num[225]
            if request.POST.get('check227'):
                score+=num[226]
            if request.POST.get('check228'):
                score+=num[227]
            if request.POST.get('check229'):
                score+=num[228]
            if request.POST.get('check230'):
                score+=num[229]
            if request.POST.get('check231'):
                score+=num[230]
            if request.POST.get('check232'):
                score+=num[231]
            if request.POST.get('check233'):
                score+=num[232]
            if request.POST.get('check234'):
                score+=num[233]
            if request.POST.get('check235'):
                score+=num[234]
            if request.POST.get('check236'):
                score+=num[235]
            if request.POST.get('check237'):
                score+=num[236]
            if request.POST.get('check238'):
                score+=num[237]
            if request.POST.get('check239'):
                score+=num[238]
            if request.POST.get('check240'):
                score+=num[239]
            if request.POST.get('check241'):
                score+=num[240]
            if request.POST.get('check242'):
                score+=num[241]
            if request.POST.get('check243'):
                score+=num[242]
            if request.POST.get('check244'):
                score+=num[243]
            if request.POST.get('check245'):
                score+=num[244]
            if request.POST.get('check246'):
                score+=num[245]
            if request.POST.get('check247'):
                score+=num[246]
            if request.POST.get('check248'):
                score+=num[247]
            if request.POST.get('check249'):
                score+=num[248]
            if request.POST.get('check250'):
                score+=num[249]
            if request.POST.get('check251'):
                score+=num[250]
            if request.POST.get('check252'):
                score+=num[251]
            if request.POST.get('check253'):
                score+=num[252]
            if request.POST.get('check254'):
                score+=num[253]
            if request.POST.get('check255'):
                score+=num[254]
            if request.POST.get('check256'):
                score+=num[255]
            if request.POST.get('check257'):
                score+=num[256]
            if request.POST.get('check258'):
                score+=num[257]
            if request.POST.get('check259'):
                score+=num[258]
            if request.POST.get('check260'):
                score+=num[259]
            if request.POST.get('check261'):
                score+=num[260]
            if request.POST.get('check262'):
                score+=num[261]
            if request.POST.get('check263'):
                score+=num[262]
            if request.POST.get('check264'):
                score+=num[263]
            if request.POST.get('check265'):
                score+=num[264]
            if request.POST.get('check266'):
                score+=num[265]
            if request.POST.get('check267'):
                score+=num[266]
            if request.POST.get('check268'):
                score+=num[267]
            if request.POST.get('check269'):
                score+=num[268]
            if request.POST.get('check270'):
                score+=num[269]
            if request.POST.get('check271'):
                score+=num[270]
            if request.POST.get('check272'):
                score+=num[271]
            if request.POST.get('check273'):
                score+=num[272]
            if request.POST.get('check274'):
                score+=num[273]
        # print('score',score)
        pscore = score/10
        fms = pow(10, (-0.02 * pscore + 1))
        faci.managementfactor = roundData.roundDF(fms)
        faci.save()
        return redirect('facilitiesEdit', facilityID=facilityID)
    return render(request, 'FacilityUI/equipment/ManagementSystems.html',
                  {'page': 'mana', 'facilityID': facilityID, 'siteID': faci.siteid_id, 'count': count,
                   'info': request.session, 'noti': noti, 'countnoti': countnoti})

def RegularVerification(request):
    # print(1)
    # obj = REGULAR()
    # obj.regular_1(siteid=siteid)
    obj = Verification()
    obj.Regular(request)
def Setting(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        api = models.ApiComponentType.objects.get(apicomponenttypeid=comp.apicomponenttypeid)
        equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        tank = [12, 13, 14, 15]
        if comp.componenttypeid_id in tank:
            istank = 1
        else:
            istank = 0
        modeOfSite = models.VerificationPeriodically.objects.filter(componentid_id=comp.componentid)
        if modeOfSite:
            # print("if")
            oldMode = modeOfSite[modeOfSite.count() - 1].mode
            oldTimer = modeOfSite[modeOfSite.count() - 1].timer
        else:
            # print("else")
            oldMode = 0
            oldTimer = 0
            interpolation = 0
            veri_peri = models.VerificationPeriodically(siteid_id=equip.siteid_id, facilityid_id=faci.facilityid,
                                                        equipmentid_id=equip.equipmentid,
                                                        componentid_id=comp.componentid,
                                                        mode=oldMode, timer=oldTimer, interpolation=interpolation)
            veri_peri.save()
        if '_save' in request.POST:
            if request.method == 'POST':

                if request.POST.get('mode') == "on":
                    mode = 1
                else:
                    mode = 0
                timer = request.POST.get('timer')
                veri_peri_list = models.VerificationPeriodically.objects.filter(componentid_id=comp.componentid)
                veri_peri_new = models.VerificationPeriodically.objects.get(id=veri_peri_list[0].id)
                veri_peri_new.mode = mode
                if mode == 0:
                    veri_peri_new.timer = str('00:00:00')
                else:
                    veri_peri_new.timer = timer
                veri_peri_new.interpolation = 0
                veri_peri_new.save()
            # t1 = threading.Thread(target=RegularVerification, args=(siteid,))
            # t1.setDaemon(True)
            # t1.start()
            return redirect('setting', componentID=componentID)
    except Exception as e:
        print("error at Setting: ", e)
    return render(request, 'FacilityUI/proposal/Setting.html',
                  {'page': 'setting', 'count': count, 'equipmentID': comp.equipmentid_id, 'comp': comp, 'equip': equip,
                   'faci': faci,
                   'oldMode': oldMode, 'oldTimer': oldTimer,
                   'componentID': componentID, 'istank': istank, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti})
def Password(request):
    infor = {}
    tuan = ''
    try:
        noti = ''
        if request.method == "POST":

            email = request.POST.get('txtmail')
            # print(email)
            # gmail_user = 'nguyenvudat1998@gmail.com'
            # gmail_pass = 'pzmgnqhvwuzglxyg'

            gmail_user = 'nguyenthihai@cortekrbi.com'
            gmail_pass = 'nguyenthihai2104'

            sent_from = gmail_user
            to = email
            user = models.ZUser.objects.filter(email=email)[0]

            username = user.username
            userid = user.id
            subject = 'Reset your CortekRBI Password'
            body = 'Your Gmail ' + email + ' having a request to change password of user ' + username + ', pleases click on this path to continue session: \n http://cortekrbi.com/Reset_Password/' + str(userid) +'/'
            msg = MIMEMultipart()
            msg['To'] = email
            msg['From'] = gmail_user
            msg['subject'] = subject
            msg.attach(MIMEText(body,'plain'))
            message = msg.as_string()
            email_text = """\
            From: %s
            To: %s
            Subject: %s

            %s
            """ % (sent_from, ", ".join(to), subject, body)
            server = smtplib.SMTP_SSL('sg1-ss16.a2hosting.com', 465)
            server.ehlo()
            server.login(gmail_user, gmail_pass)
            server.sendmail(sent_from, to, message)
            server.close()
            noti = "The System will send a message to your email, please check !!!"
            print ('Email sent!')
            tuan = 'Check email de'
            # authUser = models.ZUser.objects.filter(Q(username=user) | Q(email=email))
            # if authUser.count() > 0:
            #     infor['exist'] = "We cound not find an account for this email adress: " + email

    except Exception as e:
        noti = 'This Email is not exists'
        print(e)
    # email_subject = "reset password"
    # message = "dat ngu vay"
    # to_email = "nguyenvudta1998@cortekrbi.com"
    # Email = EmailMessage(email_subject, message, to=[to_email])
    # Email.send()
    print(noti)
    return render(request, 'Home/Password.html', {'noti':noti})

def CuongLuong():
    while True:
        Logging.Logging()
        time.sleep(25)
def signin(request):
    error = ''
    try:
        # t1 = threading.Thread(target=RegularVerification, args=(request,))
        # t1.setDaemon(True)
        # t1.start()

        # t2 = threading.Thread(target=subscribe.SubDATA)
        # t2.setDaemon(True)
        # t2.start()
        # t2 = threading.Thread(target=CuongLuong)
        # t2.setDaemon(True)
        # t2.start()
        # t2.join()
        if request.session.has_key('id'):
            print("go if")
            if request.session['kind'] == 'citizen':
                return redirect('citizenHome')
            elif request.session['kind'] == 'factory':
                siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
                print("gogo",siteid)
                siteid = encrypt(siteid)
                print("encode",siteid)
                return redirect('homefacility', siteid)
            elif request.session['kind'] == 'manager':
                return redirect('manager', 3)
            elif request.session['kind'] == 'admin':
                return redirect('admindetail', 37)
        else:
            if request.method == 'POST':
                xuser = request.POST.get('txtuser')
                xpass = request.POST.get('txtpass')
                print('deo hieu kieu gi')
                user = str(''.join(format(ord(i), '08b') for i in xuser))
                passw = str(''.join(format(ord(i), '08b') for i in xpass))
                data = models.ZUser.objects.filter(Q(username=xuser), Q(password=xpass), Q(active=1))
                if data.count():
                    datauser = data[0].username
                    datapass = data[0].password
                    binuser = str(''.join(format(ord(i), '08b') for i in datauser))
                    binpass = str(''.join(format(ord(i), '08b') for i in datapass))
                    if (binuser == user and binpass == passw):
                        request.session['id'] = data[0].id
                        request.session['name'] = data[0].name
                        request.session['kind'] = data[0].kind
                        request.session['phone'] = data[0].phone
                        request.session['address'] = data[0].adress
                        request.session['email'] = data[0].email
                        request.session['other_info'] = data[0].other_info
                        request.session.set_expiry(0)
                        if request.session['kind'] == 'citizen':
                            return redirect('citizenHome')
                        elif request.session['kind'] == 'factory':
                            facilityID = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
                            facilityID = encrypt(facilityID)
                            return redirect('homefacility', facilityID)
                        elif request.session['kind'] == 'admin':
                            return redirect('admindetail', 37)
                        else:
                            return redirect('managerhomedetail', 3)
                else:
                    error = "Tài khoản hoặc mật khẩu không đúng"
            return render(request, 'Home/index.html', {'error': error})
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404


def logout(request):
    try:
        del request.session['id']
        request.session.flush()
    except:
        pass
    return redirect('home')


################## Forum Dien Dan ###################
def Filter(string):
    s1=string.replace("[","")
    s2=s1.replace("]","")
    s3=s2.replace(" ","")
    return s3
def base_forum(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0]
    faci = models.Facility.objects.filter(siteid=siteid.siteid)
    equip = models.EquipmentMaster.objects.all()
    comp = models.ComponentMaster.objects.all()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    countveri = 0
    fill = {}
    fill['all'] = 1
    fill['newest'] = 0
    fill['active'] = 0
    fill['closed'] = 0
    # fill['solved'] = 0
    # fill['unsolved'] = 0
    fill['noreply'] = 0
    a = []
    b = []
    mang = []
    try:
        if request.session.has_key('id'):
            allUser = models.ZUser.objects.all()
            if 'btnsend' in request.POST:
                xtitle = request.POST.get('txttitle')
                xcontent = request.POST.get('txtcontent')
                xuser2 = request.POST.get('txtReciever')
                txtComponent = request.POST.get('txtComponent')
                # print(txtComponent)
                dataarray=[]
                # print(request.POST.get('1'))
                if not str(request.POST.get('1'))=="None":
                    dataarray.append(1)
                if not str(request.POST.get('2'))=="None":
                    dataarray.append(2)
                if not str(request.POST.get('3'))=="None":
                    dataarray.append(3)
                if not str(request.POST.get('4'))=="None":
                    dataarray.append(4)
                if not str(request.POST.get('5'))=="None":
                    dataarray.append(5)
                if not str(request.POST.get('6'))=="None":
                    dataarray.append(6)
                # print(data)
                xtag = request.POST.get('txttag')
                c = models.ZPosts(title=xtitle, tag=dataarray, content=xcontent, time=datetime.now(),id_component = txtComponent,
                                  id_user=request.session['id'],id_user_2= xuser2, views=0,active = 1)
                c.save()
            print("test1")
            data1 = models.ZPosts.objects.all()
            # print(request.session['id'])
            if request.session['id'] == 3:
                site = models.Sites.objects.all()
                faci = models.Facility.objects.all()
                equip = models.EquipmentMaster.objects.all()
                comp = models.ComponentMaster.objects.all()
            else:
                site = models.Sites.objects.filter(userID_id=request.session['id'])[0]
                faci = models.Facility.objects.filter(siteid_id = site.siteid)
                equip = models.EquipmentMaster.objects.filter(siteid_id = site.siteid)
                comp = models.ComponentMaster.objects.all()
            print("test1")
        if 'all' in request.POST:
            data = models.ZPosts.objects.all()
            for i in data:
                dataF = {}
                dataF['id'] = i.id
                dataF['id_user'] = i.id_user
                dataF['nameUser'] = models.ZUser.objects.get(id=i.id_user).name
                dataF['reply'] = models.ZComment.objects.all().filter(id_posts=i.id).count()
                dataF['id_user_2'] = i.id_user_2
                dataF['title'] = i.title
                dataF['content'] = i.content
                try:
                    string = ""
                    data = Filter(i.tag)
                    s = data.split(",")
                    for a1 in s:
                        tag = models.ZTask.objects.get(id=int(a1))
                        # print(tag.describle)
                        string = string + "#" + tag.describle
                    # print(string)
                    dataF['tag'] = string
                except:
                    dataF['tag'] = i.tag
                dataF['views'] = i.views
                dataF['active'] = i.active
                dataF['time'] = i.time
                a.append(dataF)
            print(a)
        # lọc theo active
        if 'active' in request.POST:
            data = models.ZPosts.objects.filter(active =1)
            fill['all'] = 0
            fill['newest'] = 0
            fill['active'] = 1
            fill['closed'] = 0
            # fill['solved'] = 0
            # fill['unsolved'] = 0
            fill['noreply'] = 0
            for i in data:
                dataF = {}
                dataF['id'] = i.id
                dataF['id_user'] = i.id_user
                dataF['nameUser'] = models.ZUser.objects.get(id=i.id_user).name
                dataF['reply'] = models.ZComment.objects.all().filter(id_posts=i.id).count()
                dataF['id_user_2'] = i.id_user_2
                dataF['title'] = i.title
                dataF['content'] = i.content
                try:
                    string = ""
                    data = Filter(i.tag)
                    s = data.split(",")
                    for a1 in s:
                        tag = models.ZTask.objects.get(id=int(a1))
                        # print(tag.describle)
                        string = string + "#" + tag.describle
                    # print(string)
                    dataF['tag'] = string
                except:
                    dataF['tag'] = i.tag
                dataF['views'] = i.views
                dataF['active'] = i.active
                dataF['time'] = i.time
                a.append(dataF)

        if 'closed' in request.POST:
            data = models.ZPosts.objects.filter(active=0)
            fill['all'] = 0
            fill['newest'] = 0
            fill['active'] = 0
            fill['closed'] = 1
            # fill['solved'] = 0
            # fill['unsolved'] = 0
            fill['noreply'] = 0
            for i in data:
                dataF = {}
                dataF['id'] = i.id
                dataF['id_user'] = i.id_user
                dataF['nameUser'] = models.ZUser.objects.get(id=i.id_user).name
                dataF['reply'] = models.ZComment.objects.all().filter(id_posts=i.id).count()
                dataF['id_user_2'] = i.id_user_2
                dataF['title'] = i.title
                dataF['content'] = i.content
                try:
                    string = ""
                    data = Filter(i.tag)
                    s = data.split(",")
                    for a1 in s:
                        tag = models.ZTask.objects.get(id=int(a1))
                        # print(tag.describle)
                        string = string + "#" + tag.describle
                    # print(string)
                    dataF['tag'] = string
                except:
                    dataF['tag'] = i.tag
                dataF['views'] = i.views
                dataF['active'] = i.active
                dataF['time'] = i.time
                a.append(dataF)
        # lọc theo no reply
        if 'no_replies' in request.POST:
            data = models.ZPosts.objects.all()
            fill['all'] = 0
            fill['newest'] = 0
            fill['active'] = 0
            fill['closed'] = 0
            # fill['solved'] = 0
            # fill['unsolved'] = 0
            fill['noreply'] = 1
            for i in data:
                dataF = {}
                dataF['id'] = i.id
                dataF['id_user'] = i.id_user
                dataF['nameUser'] = models.ZUser.objects.get(id=i.id_user).name
                dataF['reply'] = models.ZComment.objects.all().filter(id_posts=i.id).count()
                dataF['id_user_2'] = i.id_user_2
                dataF['title'] = i.title
                dataF['content'] = i.content
                try:
                    string = ""
                    data = Filter(i.tag)
                    s = data.split(",")
                    for a1 in s:
                        tag = models.ZTask.objects.get(id=int(a1))
                        # print(tag.describle)
                        string = string + "#" + tag.describle
                    # print(string)
                    dataF['tag'] = string
                except:
                    dataF['tag'] = i.tag
                dataF['views'] = i.views
                dataF['active'] = i.active
                dataF['time'] = i.time
                b.append(dataF)
            for i in b:
                if (i['reply'] == 0):
                    # print(i['title'])
                    a.append(i)
        if not a:
            data = models.ZPosts.objects.all()
            for i in data:
                dataF = {}
                dataF['id'] = i.id
                dataF['id_user'] = i.id_user
                dataF['nameUser'] = models.ZUser.objects.get(id=i.id_user).name
                dataF['reply'] = models.ZComment.objects.all().filter(id_posts=i.id).count()
                dataF['id_user_2'] = i.id_user_2
                dataF['title'] = i.title
                dataF['content'] = i.content
                try:
                    string = ""
                    data = Filter(i.tag)
                    s = data.split(",")
                    for a1 in s:
                        tag = models.ZTask.objects.get(id=int(a1))
                        # print(tag.describle)
                        string = string + "#" + tag.describle
                    # print(string)
                    dataF['tag'] = string
                except:
                    dataF['tag'] = i.tag
                dataF['views'] = i.views
                dataF['active'] = i.active
                dataF['time'] = i.time
                a.append(dataF)
        if request.session.has_key('kind') == "factory":
            siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
            faci = models.Facility.objects.get(siteid=siteid)
            countveri = models.Verification.objects.filter(facility=faci.facilityid).filter(Is_active=0).count()
        noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        # return redirect('home')
    return render(request, 'BaseUI/BaseForum/forumhome.html',
                  {'data': a, 'noti': noti, 'countnoti': countnoti, 'countveri': countveri, 'count': count,
                   'info': request.session,
                   'notiVerification': notiVerification, 'siteid': siteid, 'allUser': allUser, 'faci': faci,
                   'equip': equip, 'comp': comp, 'fill': fill})

def posts_forum(request, postID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    # print("check",len(notiVerification))
    countnoti = noti.filter(state=0).count()
    # print(countnoti)
    a = models.ZPosts.objects.filter(id=postID)[0]
    a.views += 1
    a.save()
    component = models.ComponentMaster.objects.filter(componentid = a.id_component)
    if component.count():
        print("cuong")
        component = component[0]
    nameUserAssignment = models.ZUser.objects.all().filter(id=a.id_user_2)
    if nameUserAssignment.count():
        nameUserAssignment = nameUserAssignment[0]
    nameuserpost = models.ZUser.objects.all().filter(id=a.id_user)[0]
    countveri = 0
    checkuser = 0
    if request.session['id'] == a.id_user:
        noti = models.ZNotification.objects.all().filter(link=postID)
        for notifi in noti:
            notifi.state = 1
            notifi.save()
        checkuser = 1
    if 'btncomment' in request.POST:
        # print("go here")
        xcontent = request.POST.get('txtcomment')
        data = models.ZComment(content=xcontent, time=datetime.now(), id_posts=postID, id_user=request.session['id'])
        data.save()  # Thêm thông tin comment vào csdl
        # chức năng thông báo
        id_user = models.ZPosts.objects.all().filter(id=postID)[0].id_user  # Lấy ID người đăng bài
        title_post = models.ZPosts.objects.all().filter(id=postID)[0].title

        if request.session['id'] != id_user:
            print("go go",id_user,request.session['id'])
            try:
                noti = models.ZNotification(id_user=id_user, subject=request.session['name'],
                                            content=' have responsed to the post ', object=title_post, link=postID,
                                            time=datetime.now(), state=0, active_eng=1, active_vie=0)
                noti.save()
                print("go 1")
            except Exception as e:
                print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
            try:
                obj = SendEmail()
                obj.email_for_post(request,postID)
            except Exception as e:
                print(e)
    if 'edit_post' in request.POST:
        print("edit")
    if 'close_post' in request.POST:
        a.active = 0
        a.save()
    comment = models.ZComment.objects.all().filter(id_posts=postID)  # Lấy dữ liệu comment của this post
    datacmt = []
    for data in comment:
        cmt = {}
        cmt['name'] = models.ZUser.objects.all().filter(id=data.id_user)[0].name
        cmt['content'] = data.content
        datacmt.append(cmt)  # mang chua Du lieu cac comment
    # if request.session.kind == 'factory':
    #     siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    #     faci = models.Facility.objects.get(siteid=siteid)
    #     countveri = models.Verification.objects.filter(facility=faci.facilityid).filter(Is_active=0).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'BaseUI/BaseForum/forumposts.html',
                  {'data': a, 'nameuserpost': nameuserpost, 'nameUserAssignment':nameUserAssignment,'datacmt': datacmt, 'session': request.session,
                   'noti': noti, 'countnoti': countnoti, 'info': request.session,'notiVerification':notiVerification,'siteid':siteid,'checkuser':checkuser,
                   'component':component,'checkmanage':request.session['id']})




################## Tin nhan Email ###################
def MessagesInbox(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    datacontent = models.Emailto.objects.filter(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email)
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    countveri = 0
    siteID =3
    try:
        objEmail = []
        # print("------------")
        now = datetime.now()
        for a in datacontent:
            data = {}
            data['ID'] = a.id
            # print(a.id)
            data['Emailsent'] = a.Emails
            data['Subject'] =a.subject
            data['Content'] = a.content
            data['Date']=a.date
            if a.date:
                data['TimeAgo'] = timeago.format(a.date.strftime('%Y-%m-%d'), now)
            else:
                data['TimeAgo'] = ""
            objEmail.append(data)
        if '_forward' in request.POST:
            for a in datacontent:
                if(request.POST.get('%d' % a.id)):
                    # print('test1')
                    return redirect('f')
        if '_reply' in request.POST:
            for a in datacontent:
                if (request.POST.get('%d' % a.id)):
                    # print('test2')
                    return redirect('f')
        try:
            if '_delete' in request.POST:
                for b in datacontent:
                    if (request.POST.get('%d' % b.id)):
                        b.delete()
                return redirect('messagesInbox')
        except Exception as e:
            print(e)
            raise Http404
        if 'post' in request.POST:
            data = {}
            data['id']= request.POST.get('id')
            data['emailto'] = request.POST.get('sentto')
            data['subject'] = request.POST.get('subject')
            data['emailsent'] = models.ZUser.objects.filter(id=request.session['id'])[0].email
            data['content'] = request.POST.get('content')
            a = models.Emailsent(content=data['content'], subject=data['subject'], Emails=data['emailsent'],
                                 Emailt=data['emailto'])
            a.save()
            b = models.Emailto(content=data['content'], subject=data['subject'], Emails=data['emailsent'],
                               Emailt=data['emailto'], Is_see=0)
            b.save()
        if request.method == 'POST':
            for data1 in datacontent:
                if request.POST.get('%d' % data1.id):
                    email1 = models.Emailto.objects.get(id=data1.id)
                    email1.delete()
                    return redirect('messagesInbox')
        acti = models.Emailto.objects.filter(Emailt=request.session['email'])
        if request.session.has_key('kind') == 'factory':
            siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
            faci = models.Facility.objects.get(siteid=siteid)
            countveri = models.Verification.objects.filter(facility=faci.facilityid).filter(Is_active=0).count()
        for acti in acti:
            acti.Is_see = 1
            acti.save()
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'Messages/Messages_Inbox.html',
                  {'page': 'messagesInbox', 'datacontent': datacontent,'objEmail':objEmail, 'siteID':siteID,'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})

def MessagesInbox_seen(request,IDEmail):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    datacontent = models.Emailto.objects.filter(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email)
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    countveri = 0
    datacontent = models.Emailto.objects.get(id=IDEmail)
    try:
        now = datetime.now()
        data = {}
        data['Emailsent']= datacontent.Emails
        data['Subject']= datacontent.subject
        data['Content'] =datacontent.content
        if datacontent.date:
            data['time'] = timeago.format(datacontent.date.strftime('%Y-%m-%d'), now)
        else:
            data['time'] = ""
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'Messages/Messages_Inbox_Seen.html',
                          {'page': 'messagesInbox_seen', 'data': data, 'info': request.session,
                           'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})
def Email_Message_sent(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    datacontent = models.Emailsent.objects.filter(Emails=models.ZUser.objects.filter(id=request.session['id'])[0].email)
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    countveri = 0
    siteID = 3
    try:
        objEmail = []
        now = datetime.now()
        for a in datacontent:
            data = {}
            data['ID'] = a.id
            # print(a.id)
            data['Emailto'] = a.Emailt
            data['Subject'] = a.subject
            data['Content'] = a.content
            data['Date'] = a.date
            objEmail.append(data)
        if 'post' in request.POST:
            data = {}
            data['emailto'] = request.POST.get('sentto')
            data['subject'] = request.POST.get('subject')
            data['emailsent'] = models.ZUser.objects.filter(id=request.session['id'])[0].email
            data['content'] = request.POST.get('content')
            a = models.Emailsent(content=data['content'], subject=data['subject'], Emails=data['emailsent'],
                                 Emailt=data['emailto'])
            a.save()
            b = models.Emailto(content=data['content'], subject=data['subject'], Emails=data['emailsent'],
                               Emailt=data['emailto'], Is_see=0)
            b.save()
        if request.method == 'POST':
            for data1 in datacontent:
                if request.POST.get('%d' % data1.id):
                    email1 = models.Emailsent.objects.get(id=data1.id)
                    email1.delete()
                    return redirect('messagesSent')
        if request.session.has_key('kind') == 'factory':
            siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
            faci = models.Facility.objects.get(siteid=siteid)
            countveri = models.Verification.objects.filter(facility=faci.facilityid).filter(Is_active=0).count()
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'Messages/Messages_Sent.html',
                  {'page': 'messagesSent', 'datacontent': datacontent,'objEmail':objEmail, 'siteID':siteID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})

def MessagesSent_Seen(request, IDEmail):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    datacontent = models.Emailsent.objects.filter(Emails=models.ZUser.objects.filter(id=request.session['id'])[0].email)
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    countveri = 0
    datacontent = models.Emailsent.objects.get(id=IDEmail)
    try:
        data = {}
        data['Emailsent'] = datacontent.Emails
        data['Subject'] = datacontent.subject
        data['Content'] = datacontent.content
        data['Date'] = datacontent.date
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'Messages/Messages_Sent_Seen.html',
                  {'page': 'messagesSent_seen', 'data': data, 'info': request.session,
                   'noti': noti, 'countnoti': countnoti, 'count': count,'notiVerification':notiVerification,'siteid':siteid})
################# Help #################
def Help(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    countveri = 0
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/help.html',
                  {'page': 'home', 'info': request.session, 'count': count, 'noti': noti, 'countnoti': countnoti,
                   'countveri': countveri,'notiVerification':notiVerification,'siteid':siteid})


def Help_Usermanual_Citizen(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    countveri = 0
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/User_Manual/help_Citizen.html',
                  {'page': 'userManual', 'info': request.session, 'count': count, 'noti': noti, 'countnoti': countnoti,'notiVerification':notiVerification,'siteid':siteid})


def Help_Usermanual_Business(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    countveri = 0
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/User_Manual/help_Business.html',
                  {'page': 'userManual', 'info': request.session, 'count': count, 'noti': noti, 'countnoti': countnoti,'notiVerification':notiVerification,'siteid':siteid})


def Help_Usermanual_Manager(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    countveri = 0
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/User_Manual/help_Manager.html',
                  {'page': 'userManual', 'info': request.session, 'count': count, 'noti': noti, 'countnoti': countnoti,'notiVerification':notiVerification,'siteid':siteid})


def Help_AccountManagement_LoginPass(request):
    if not request.session.session_key:
        return redirect('home')
    countveri = 0
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/Account_Management/Login_and_Password.html',
                  {'page': 'accountManager', 'info': request.session, 'count': count, 'noti': noti,
                   'countnoti': countnoti})


def Help_AccountManagement_PerInfo(request):
    if not request.session.session_key:
        return redirect('home')
    countveri = 0
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/Account_Management/Personal_Information.html',
                  {'page': 'accountManager', 'info': request.session, 'count': count, 'noti': noti,
                   'countnoti': countnoti})


def Help_AccountManagement_AccessDownload(request):
    if not request.session.session_key:
        return redirect('home')
    countveri = 0
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/Account_Management/Access_and_Download_Information.html',
                  {'page': 'accountManager', 'info': request.session, 'count': count, 'noti': noti,
                   'countnoti': countnoti})


def Help_AccountManagement_Notification(request):
    if not request.session.session_key:
        return redirect('home')
    countveri = 0
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/Account_Management/Notification.html',
                  {'page': 'accountManager', 'info': request.session, 'count': count, 'noti': noti,
                   'countnoti': countnoti})


def Policies_Reports(request):
    if not request.session.session_key:
        return redirect('home')
    countveri = 0
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/Policies_Reports.html',
                  {'page': 'policiesReports', 'info': request.session, 'count': count, 'noti': noti,
                   'countnoti': countnoti})


def Private_Safe(request):
    if not request.session.session_key:
        return redirect('home')
    countveri = 0
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/Private_Safe.html',
                  {'page': 'privateSafe', 'info': request.session, 'count': count, 'noti': noti,
                   'countnoti': countnoti})


################ Dang ki tai khoan ####################
def AccountCitizen(request):
    infor = {}
    try:
        if request.method == "POST":
            user = request.POST.get('username')
            name = request.POST.get('name')
            # last_name = request.POST.get('txtlname')
            password = request.POST.get('txtpass')
            repassword = request.POST.get('repass')
            phone = request.POST.get('txtmobile')
            email = request.POST.get('txtmail')
            addr = request.POST.get('txtadd')
            kind = 'citizen'
            desc = request.POST.get('CompanyInformation')
            # print(companyName + " " + user + " " + email)
            if password == repassword:
                authUser = models.ZUser.objects.filter(Q(username=user) | Q(email=email))
                if authUser.count() > 0:
                    infor['exist'] = "This User Name or E-mail was taken"
                    # print(infor['exist'])
                else:
                    try:
                        authUser1 = models.ZUser(username=user, phone=phone, adress=addr, email=email, name=name,
                                                 kind=kind, password=password)
                        authUser1.save()
                        print(authUser1.username)
                        # profile = models.ZProfilebisiness(user_id=authUser1.id, organization_detail=desc)
                        # profile.save()
                    except Exception as e:
                        print(e)
                    current_site = get_current_site(request)
                    # print("a")
                    email_subject = "Activate your block account"
                    message = render_to_string('Home/Account/activateEmail.html', {
                        'user': authUser1,
                        'domain': current_site.domain,
                        'uid': urlsafe_base64_encode(force_bytes(authUser1.pk)).decode(),
                        'token': gen_token.make_token(authUser1)
                    })
                    # print('ok')
                    to_email = email
                    Email = EmailMessage(email_subject, message, to=[to_email])
                    Email.send()
                    # print("sended")
                    # return HttpResponse("Please confirm in your e-mail")
                    return render_to_response('response/complete_regiatration.html')
            else:
                infor['match'] = "The password is not match"
    except Exception as e:
        print(e)
    return render(request, 'Home/Account/sigup_citizen.html',
    {'infor': infor})


def AccountBusiness(request):
    infor = {}
    try:
        if request.method == "POST":
            companyName = request.POST.get('companyname_business')
            user = request.POST.get('username')
            # first_name = request.POST.get('first_name')
            # last_name = request.POST.get('last_name')
            name = request.POST.get('name')
            password = request.POST.get('password')
            repassword = request.POST.get('repassword')
            phone = request.POST.get('phone')
            email = request.POST.get('txtmail')
            addr = request.POST.get('txtadd')
            kind = 'factory'
            desc = request.POST.get('CompanyInformation')
            # print(companyName + " " + user + " " + email)
            authUser = models.ZUser.objects.filter(Q(username=user) | Q(email=email))
            if password == repassword:
                authUser = models.ZUser.objects.filter(Q(username=user) | Q(email=email))
                print("ok")
                if authUser.count() > 0:
                    infor['exist'] = "This User Name or E-mail was taken"
                    # print(infor['exist'])
                else:
                    try:
                        authUser1 = models.ZUser(username=user, phone=phone, adress=addr, email=email, name=name,
                                                 kind=kind, password=password)
                        authUser1.save()
                        # print(authUser1.username)
                        fa = models.Sites(sitename=companyName, userID_id=authUser1.id)
                        fa.save()
                        bu = models.Zbusiness(compainfor=desc, namecompany=companyName, userID_id=authUser1.id)
                        bu.save()
                    except Exception as e:
                        print(e)
                    current_site = get_current_site(request)
                    # print("a")
                    gmail_user = 'nguyenthihai@cortekrbi.com'
                    gmail_pass = 'nguyenthihai2104'
                    sent_from = gmail_user
                    to = email
                    subject = "Activate your block account"
                    # email_subject = "Activate your block account"
                    body = render_to_string('Home/Account/activateEmail.html', {
                        'user': authUser1,
                        'domain': current_site.domain,
                        'uid': urlsafe_base64_encode(force_bytes(authUser1.pk)).decode(),
                        'token': gen_token.make_token(authUser1)
                    })
                    msg = MIMEMultipart()
                    msg['To'] = email
                    msg['From'] = gmail_user
                    msg['Subject'] = subject
                    msg.attach(MIMEText(body, 'plain'))
                    message = msg.as_string()
                    email_text = """\
                                                  From: %s
                                                  To: %s
                                                  Subject: %s
                                                  %s
                                                  """ % (sent_from, ", ".join(to), subject, body)
                    server = smtplib.SMTP_SSL('sg1-ss16.a2hosting.com', 465)
                    server.ehlo()
                    server.login(gmail_user, gmail_pass)
                    server.sendmail(sent_from, to, message)
                    server.close()
                    return render_to_response('response/complete_regiatration.html')
            else:
                infor['match'] = "The password is not match"

    except Exception as e:
        print(e)
    return render(request, 'Home/Account/signup_business.html',
                {'infor': infor})


def AccountManagement(request):
    infor = {}
    try:
        if request.method == "POST":
            org_name = request.POST.get('org_name_mng')
            user = request.POST.get('username_mng')
            first_name = request.POST.get('first_name')
            last_name = request.POST.get('last_name')
            name = last_name+" "+first_name
            password = request.POST.get('pass_mng')
            repassword = request.POST.get('repass_mng')
            phone = request.POST.get('phone_mng')
            email = request.POST.get('email_mng')
            addr = request.POST.get('addr_mng')
            web = request.POST.get('web_mng')
            desc = request.POST.get('desc')
            kind = 'manager'
            # print(org_name + " " + user + " " + email)
            if password == repassword:
                authUser = models.ZUser.objects.filter(Q(username=user) | Q(email=email))
                # print("ok")
                if authUser.count() > 0:
                    infor['exist'] = "This User Name or E-mail was taken"
                    # print(infor['exist'])
                else:
                    try:
                        authUser1 = models.ZUser(username=user, phone=phone, adress=addr, email=email, name=name,
                                                 kind=kind, password=password)
                        authUser1.save()
                        # print(authUser1.username)
                        # profile = models.ZProfilebisiness(user_id=authUser1.id, organization_detail=desc)
                        # profile.save()
                    except Exception as e:
                        print(e)
                    current_site = get_current_site(request)
                    # print("a")
                    email_subject = "Activate your block account"
                    message = render_to_string('Home/Account/activateEmail.html', {
                        'user': authUser1,
                        'domain': current_site.domain,
                        'uid': urlsafe_base64_encode(force_bytes(authUser1.pk)).decode(),
                        'token': gen_token.make_token(authUser1)
                    })
                    # print('ok')
                    to_email = email
                    Email = EmailMessage(email_subject, message, to=[to_email])
                    Email.send()
                    # print("sended")
                    # return HttpResponse("Please confirm in your e-mail")
                    return render_to_response('response/complete_regiatration.html')
            else:
                infor['match'] = "The password is not match"
    except Exception as e:
        print(e)
    return render(request, 'Home/Account/signup_management.html')


def activate(request, uidb64, token):
    try:
        # uid = force_text(urlsafe_base64_decode(uidb64))
        uid = urlsafe_base64_decode(uidb64).decode()
        user = models.ZUser.objects.get(pk=uid)
        # print("1")
    except(TypeError, ValueError, OverflowError, models.ZUser.DoesNotExist):
        user = None
    print(gen_token.check_token(user, token))
    print("2")
    if user is not None and gen_token.check_token(user, token):
        user.active = True
        user.save()
        # login(request, user)
        # return HttpResponse("Activate is complete! Thanks for use our services")
        print("aaaaaa")
        return render_to_response('response/totally_complete.html')
    else:
        print(user.username)
        return HttpResponse("Can't activate now, please try again later or contact us")


################ Manager UI Control ###################
def ManagerHomeDetail(request, siteID):
    errorlogin = ''
    if not request.session.session_key:
        return redirect('home')
    if not (siteID == 3):
        errorlogin = 'This account is Manager Account, if you is a manager please login again!! '
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    # siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    notiVerificationmana = ReCalculate.notiVerificationmana(siteID)
    countnoti = noti.filter(state=0).count()
    # print ('hu', notiVerificationmana)
    try:
        data = models.Sites.objects.all()
        facis = []
        equips = []
        coms = []
        for a in data:
            faci = models.Facility.objects.filter(siteid=a.siteid)
            facis.extend(faci)
            for b in faci:
                eq = models.EquipmentMaster.objects.filter(facilityid=b.facilityid)
                equips.extend(eq)
                for c in eq:
                    com = models.ComponentMaster.objects.filter(equipmentid=c.equipmentid)
                    coms.extend(com)
        num_site = len(data)
        num_faci = len(facis)
        num_eq = len(equips)
        num_com = len(coms)

        tank = [12,13,14,15]
        RecommendProposalTank = []
        RecommendProposalNormal = []
        APINormal = []
        APITank = []
        rwComponent = models.ComponentMaster.objects.all()
        rwdamAll = models.RwDamageMechanism.objects.all()
        rwassessment = models.RwAssessment.objects.all()
        datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
        veri = []
        vericontent=[]
        verification=models.Verification.objects.all()
        verificontent=models.VeriContent.objects.all()
        for a in verification:
            obj = {}
            obj['id']=a.id
            obj['proposal']=a.proposal
            obj['date']=a.date
            obj['is_active']=a.Is_active
            obj['manager']=a.manager
            obj['facility']=a.facility
            obj['component']=a.com
            obj['equipment']=a.eq
            obj['link']=a.link
            veri.append(obj)
        for a in verificontent:
            obj ={}
            obj['id']=a.id
            obj['veriID']=a.Verification_id
            obj['content']=a.content
            vericontent.append(obj)
        for a in rwdamAll:
            array = a.id_dm_id
            datarw.append(array)
        for a in rwComponent:
            data = []
            datamax =[]
            if a.componenttypeid_id in tank:
                rwAsessmentT = models.RwAssessment.objects.filter(componentid_id = a.componentid)
                if rwAsessmentT.count() ==1:
                    R1 = models.RwAssessment.objects.get(componentid_id = a.componentid)
                    RecommendProposalTank.append(R1.id)
                elif rwAsessmentT.count() > 1 :
                    for b in rwAsessmentT:
                        if b.assessmentdate:
                            obj={}
                            obj['assessmentdate']= b.assessmentdate.timestamp()
                            obj['IDProposal'] = b.id
                            data.append(obj)
                            datamax.append(b.assessmentdate.timestamp())
                    M = max(datamax)
                    i = datamax.index(M)
                    RecommendProposalTank.append(data[i]['IDProposal'])
            else:
                rwAsessmentN = models.RwAssessment.objects.filter(componentid_id=a.componentid)
                if rwAsessmentN.count() == 1:
                    R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
                    RecommendProposalNormal.append(R1.id)
                elif rwAsessmentN.count() > 1:
                    for b in rwAsessmentN:
                        if b.assessmentdate:
                            obj = {}
                            obj['assessmentdate'] = b.assessmentdate.timestamp()
                            obj['IDProposal'] = b.id
                            data.append(obj)
                            datamax.append(b.assessmentdate.timestamp())
                    M = max(datamax)
                    i = datamax.index(M)
                    RecommendProposalNormal.append(data[i]['IDProposal'])
        for nor in RecommendProposalNormal:
            rwasessmentN = models.RwAssessment.objects.get(id=nor)
            equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
            component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
            equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
            comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
            faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
            site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
            df = models.RwFullPof.objects.filter(id=nor)
            ca = models.RwFullFcof.objects.filter(id=nor)
            if df.count() > 0 and ca.count() > 0:
                df = models.RwFullPof.objects.get(id=nor)
                ca = models.RwFullFcof.objects.get(id=nor)
                obj = {}
                obj['ID'] = nor
                obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                obj['ComponentNumber'] = component.componentnumber
                obj['EquipmentNumber'] = equipmaster.equipmentnumber
                obj['Facility'] = faci.facilityname
                obj['Site'] = site.sitename
                obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                obj['RLI'] = df.rli
                obj['AssessmentName'] = rwasessmentN.proposalname
                obj['AssessmentDate'] = rwasessmentN.assessmentdate
                obj['CommissionDate'] = equipmaster.commissiondate
                obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                obj['EquipmentType'] = equiptype.equipmenttypename
                obj['ComponentType'] = comptype.componenttypename
                if (nor in datarw):
                    rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                    obj['InspectionDueDate'] = rwdam.inspduedate
                else:
                    obj['InspectionDueDate'] = "None"
                APINormal.append(obj)
        for nor in RecommendProposalTank:
            rwasessmentN = models.RwAssessment.objects.get(id=nor)
            equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
            component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
            equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
            comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
            faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
            site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
            df = models.RwFullPof.objects.filter(id=nor)
            ca = models.RwFullFcof.objects.filter(id=nor)
            if df.count() > 0 and ca.count() > 0:
                df = models.RwFullPof.objects.get(id=nor)
                ca = models.RwFullFcof.objects.get(id=nor)
                obj = {}
                obj['ID'] = nor
                obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                obj['ComponentNumber'] = component.componentnumber
                obj['EquipmentNumber'] = equipmaster.equipmentnumber
                obj['Facility'] = faci.facilityname
                obj['Site'] = site.sitename
                obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                obj['RLI'] = df.rli
                obj['AssessmentName'] = rwasessmentN.proposalname
                obj['AssessmentDate'] = rwasessmentN.assessmentdate
                obj['CommissionDate'] = equipmaster.commissiondate
                obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                obj['EquipmentType'] = equiptype.equipmenttypename
                obj['ComponentType'] = comptype.componenttypename
                if (nor in datarw):
                    rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                    obj['InspectionDueDate'] = rwdam.inspduedate
                else:
                    obj['InspectionDueDate'] = "None"
                APITank.append(obj)
    except Exception as e:
        print(e)
    if "_seeall" in request.POST:
        print("nguyenvudat")
        noti = models.ZNotification.objects.filter(id_user=request.session['id'])
        notiveri = models.Verificationsend.objects.filter(id_user=request.session['id'])
        for notifi in noti:
            notifi.state = 1
            notifi.save()
        for notiveri in notiveri:
            notiveri.state = 1
            notiveri.save()
    return render(request, 'ManagerUI/Home_Manager.html',
                  {'page': 'managerHomeDetail', 'siteID': siteID,'APINormal':APINormal,'APITank':APITank,'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count , 'notiVerificationmana':notiVerificationmana,
                   'num_site': num_site, 'num_faci': num_faci, 'num_eq': num_eq, 'num_com': num_com})


# NOTE: page: managerHomeDetail dùng cho baseMN khi so sanh, khác với name: managerhomedetail trong view
# def CalculateFunctionManager(request, siteID):
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     # data = ListNormalProposalFofInpsection(siteID=siteID, facilityID=0, equimentID=0)
#     # dataTank = ListTankProposalForInpsection(siteID=siteID, facilityID=0, equimentID=0)
#     return render(request, 'ManagerUI/Calculate_Function_Manager.html',
#                   {'page': 'calculateFunctionManager', 'siteID': siteID, 'info': request.session, 'noti': noti,
#                    'countnoti': countnoti, 'count': count})
def AdminDetail(request, siteID):
    errorlogin = ''
    if not request.session.session_key:
        return redirect('home')
    # RegisterAccount(request, siteID)
    if not (siteID == 37):
        errorlogin = 'This is Admin account, if you have not administration please login again !!!'
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()

    return render(request, 'Admin/HomeAdmin.html',
                  {'page': 'homeadmin', 'siteID': siteID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'errorlogin':errorlogin})
def HomeFacility(request, siteID):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    print("new",siteID)
    if not request.session.session_key:
        return redirect('home')
    if (siteID == 37 or siteID == 3):
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'], active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()
    # count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
    #                                       Q(Is_see=0)).count()
    tank = [12, 13, 14, 15]
    RecommendProposalTank = []
    RecommendProposalNormal = []
    APINormal = []
    APITank = []
    savedata = {}
    data = models.Sites.objects.filter(siteid=siteID)
    username = models.ZUser.objects.get(id=data[0].userID_id).name
    try:
        equip = models.EquipmentMaster.objects.filter(siteid_id=siteID)
        num_site = 1
        num_faci =  models.Facility.objects.filter(siteid_id=siteID).count()
        num_eq = equip.count()
        num_com = 0
        for a in equip:
            com = models.ComponentMaster.objects.filter(equipmentid_id = a.equipmentid).count()
            num_com = num_com + com
            
        # ---------------- VietNam Map ---------------------

        # faciMap = models.Facility.objects.filter(siteid_id=siteID)
        # savedata["type"] = "FeatureCollection"
        # savedata["features"] = []
        # for a in faciMap:
        #     obj={}
        #     obj["type"] = "Feature"
        #     obj["properties"] = {}
        #     obj["geometry"] = {}
        #     obj_sub = {}
        #     try:
        #         obj_sub["place"] = a.ward + "," + a.district + ","+ a.province
        #     except:
        #         obj_sub["place"] = ""
        #     obj_sub["url"] = "http://127.0.0.1:8000/equipment/display/"+str(a.facilityid)+"/"
        #     obj_sub["type"] = "Point"
        #     d = []
        #     d.append(float(a.lng))
        #     d.append(float(a.lat))
        #     print(d)
        #     try:
        #         obj['properties'].update({"place": a.ward + "," + a.district + ","+ a.province})
        #     except:
        #         obj['properties'].update({"place": ""})
        #     obj['properties'].update({"name": a.facilityname})
        #     obj['properties'].update({"url":"http://127.0.0.1:8000/equipment/display/"+str(a.facilityid)+"/"})
        #     obj['geometry'].update({"type" :"Point"})
        #     obj['geometry'].update({"coordinates": d })
        #     equip_json = models.EquipmentMaster.objects.filter(facilityid_id=a.facilityid)
        #     obj["properties"].update({"equip":str(equip_json.count())})
        #     num_com_json =0
        #     for a in equip_json:
        #         com_json = models.ComponentMaster.objects.filter(equipmentid_id=a.equipmentid).count()
        #         num_com_json = num_com_json + com_json
        #     obj["properties"].update({"comp":str(num_com_json)})
        #     savedata['features'].append(obj)
        # savejson = json.dumps(savedata, indent = 4)
        # with open('static/json/vietnamprovince/facility.js', 'w' ,encoding="utf-8") as outfile:
        #     outfile.write("eqfeed_callback(")
        #     print(str(savedata))
        #     outfile.write(str(savedata))
        #     outfile.write(")")

        # ------------------End Map-------------------------

        rwComponent = models.ComponentMaster.objects.all()
        rwdamAll = models.RwDamageMechanism.objects.all()
        rwassessment = models.RwAssessment.objects.all()
        datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
        for a in rwdamAll:
            array = a.id_dm_id
            datarw.append(array)
        for a in rwComponent:
            # print("let go")
            data = []
            datamax = []
            if a.componenttypeid_id in tank:
                rwAsessmentT = models.RwAssessment.objects.filter(componentid_id=a.componentid)
                if rwAsessmentT.count() == 1:
                    R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
                    RecommendProposalTank.append(R1.id)
                elif rwAsessmentT.count() > 1:
                    for b in rwAsessmentT:
                        if b.assessmentdate:
                            obj = {}
                            obj['assessmentdate'] = b.assessmentdate.timestamp()
                            obj['IDProposal'] = b.id
                            data.append(obj)
                            datamax.append(b.assessmentdate.timestamp())
                    M = max(datamax)
                    i = datamax.index(M)
                    RecommendProposalTank.append(data[i]['IDProposal'])
            else:
                rwAsessmentN = models.RwAssessment.objects.filter(componentid_id=a.componentid)
                if rwAsessmentN.count() == 1:
                    R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
                    RecommendProposalNormal.append(R1.id)
                elif rwAsessmentN.count() > 1:
                    for b in rwAsessmentN:
                        if b.assessmentdate:
                            obj = {}
                            obj['assessmentdate'] = b.assessmentdate.timestamp()
                            obj['IDProposal'] = b.id
                            data.append(obj)
                            datamax.append(b.assessmentdate.timestamp())
                    M = max(datamax)
                    i = datamax.index(M)
                    RecommendProposalNormal.append(data[i]['IDProposal'])
        for nor in RecommendProposalNormal:
            rwasessmentN = models.RwAssessment.objects.get(id=nor)
            equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
            component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
            equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
            comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
            faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
            site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
            df = models.RwFullPof.objects.filter(id=nor)
            ca = models.RwFullFcof.objects.filter(id=nor)
            if site.siteid == siteID:
                if df.count() > 0 and ca.count() > 0:
                    df = models.RwFullPof.objects.get(id=nor)
                    ca = models.RwFullFcof.objects.get(id=nor)
                    obj = {}
                    obj['ID'] = nor
                    obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                    obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                    obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                    obj['ComponentNumber'] = component.componentnumber
                    obj['EquipmentNumber'] = equipmaster.equipmentnumber
                    obj['Facility'] = faci.facilityname
                    obj['Site'] = site.sitename
                    obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                    obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                    obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                    obj['RLI'] = df.rli
                    obj['AssessmentName'] = rwasessmentN.proposalname
                    obj['AssessmentDate'] = rwasessmentN.assessmentdate
                    obj['CommissionDate'] = equipmaster.commissiondate
                    obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                    obj['EquipmentType'] = equiptype.equipmenttypename
                    obj['ComponentType'] = comptype.componenttypename
                    if (nor in datarw):
                        rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                        obj['InspectionDueDate'] = rwdam.inspduedate
                    else:
                        obj['InspectionDueDate'] = "None"
                    APINormal.append(obj)
        for nor in RecommendProposalTank:
            rwasessmentN = models.RwAssessment.objects.get(id=nor)
            equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
            component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
            equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
            comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
            faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
            site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
            df = models.RwFullPof.objects.filter(id=nor)
            ca = models.RwFullFcof.objects.filter(id=nor)
            if site.siteid == siteID:
                if df.count() > 0 and ca.count() > 0:
                    df = models.RwFullPof.objects.get(id=nor)
                    ca = models.RwFullFcof.objects.get(id=nor)
                    obj = {}
                    obj['ID'] = nor
                    obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                    obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                    obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                    obj['ComponentNumber'] = component.componentnumber
                    obj['EquipmentNumber'] = equipmaster.equipmentnumber
                    obj['Facility'] = faci.facilityname
                    obj['Site'] = site.sitename
                    obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                    obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                    obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                    obj['RLI'] = df.rli
                    obj['AssessmentName'] = rwasessmentN.proposalname
                    obj['AssessmentDate'] = rwasessmentN.assessmentdate
                    obj['CommissionDate'] = equipmaster.commissiondate
                    obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                    obj['EquipmentType'] = equiptype.equipmenttypename
                    obj['ComponentType'] = comptype.componenttypename
                    if (nor in datarw):
                        rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                        obj['InspectionDueDate'] = rwdam.inspduedate
                    else:
                        obj['InspectionDueDate'] = "None"
                    APITank.append(obj)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
    siteID = encrypt(str(siteID))
    print(siteID)
    return render(request, 'BaseUI/BaseFacility/HomeFacility.html',
                  {'page': 'homefacility', 'siteID': siteID, 'info': request.session, 'noti': noti,'APINormal':APINormal,'APITank':APITank,
                   'countnoti': countnoti, 'countnoti': countnoti,'notiVerification':notiVerification,'num_site': num_site,
                   'num_faci': num_faci, 'num_eq': num_eq, 'num_com': num_com, 'username':username,'savedata':str(savedata)})
def ToolManager(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'], active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'ManagerUI/Tool_Manager.html',
                  {'page': 'toolManager', 'siteID': siteID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count})


def ManagerHome(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    notiVerificationmana = ReCalculate.notiVerificationmana(siteID)
    countnoti = noti.filter(state=0).count()
    try:
        risk = []

        data = models.Sites.objects.all()
        for a in data:
            dataF = {}
            dataF['ID'] = a.siteid
            dataF['CreatedTime'] = a.create
            dataF['SideName'] = a.sitename
            risk.append(dataF)
        pagiFaci = Paginator(risk, 25)
        pageFaci = request.GET.get('page', 1)
        try:
            users = pagiFaci.page(pageFaci)
        except PageNotAnInteger:
            users = pagiFaci.page(1)
        except EmptyPage:
            users = pageFaci.page(pagiFaci.num_pages)
    except:
        raise Http404
    return render(request, 'ManagerUI/Business_List.html',
                  {'page': 'listManagement', 'obj': users, 'siteID': siteID, 'count': count, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session, 'notiVerificationmana':notiVerificationmana})


def ListFacilitiesMana(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    notiVerificationmana = ReCalculate.notiVerificationmana(siteID)
    countnoti = noti.filter(state=0).count()
    try:
        risk = []
        si = models.Sites.objects.get(siteid=siteID)
        data = models.Facility.objects.filter(siteid=siteID)
        # print(data.site_id)
        # si=models.Sites.objects.get(siteid=data.siteid_id)
        for a in data:
            dataF = {}
            risTarget = models.FacilityRiskTarget.objects.get(facilityid=a.facilityid)
            dataF['ID'] = a.facilityid
            dataF['CreatedTime'] = a.create
            dataF['FacilitiName'] = a.facilityname
            dataF['ManagementFactor'] = a.managementfactor
            dataF['RiskTarget'] = risTarget.risktarget_fc
            risk.append(dataF)

        pagiFaci = Paginator(risk, 25)
        pageFaci = request.GET.get('page', 1)
        try:
            users = pagiFaci.page(pageFaci)
        except PageNotAnInteger:
            users = pagiFaci.page(1)
        except EmptyPage:
            users = pageFaci.page(pagiFaci.num_pages)
        noti = models.ZNotification.objects.filter(link=siteID)
        for notifi in noti:
            if request.session['id'] == notifi.id_user:
                notifi.state = 1
                notifi.save()
    except:
        raise Http404
    return render(request, 'ManagerUI/facility_List.html',
                  {'page': 'listFacility', 'obj': users, 'siteID': siteID, 'count': count, 'si': si, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session, 'notiVerificationmana':notiVerificationmana})


def ListEquipmentMana(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    notiVerificationmana = ReCalculate.notiVerificationmana(siteid)
    countnoti = noti.filter(state=0).count()
    try:
        faci = models.Facility.objects.get(facilityid=facilityID)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        data = models.EquipmentMaster.objects.filter(facilityid=facilityID)
        pagiEquip = Paginator(data, 25)
        pageEquip = request.GET.get('page', 1)
        try:
            obj = pagiEquip.page(pageEquip)
        except PageNotAnInteger:
            obj = pagiEquip.page(1)
        except EmptyPage:
            obj = pageEquip.page(pagiEquip.num_pages)
        noti = models.ZNotification.objects.filter(link=facilityID)
        for notifi in noti:
            if request.session['id'] == notifi.id_user:
                notifi.state = 1
                notifi.save()
    except:
        raise Http404
    return render(request, 'ManagerUI/Equipment_List.html',
                  {'page': 'listEquip', 'obj': obj, 'facilityID': facilityID, 'siteID': faci.siteid_id, 'faci': faci,
                   'si': si, 'count': count, 'noti': noti, 'countnoti': countnoti, 'info': request.session, 'notiVerificationmana':notiVerificationmana})


def ListComponentMana(request, equipmentID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    notiVerificationmana = ReCalculate.notiVerificationmana(siteid)
    countnoti = noti.filter(state=0).count()
    try:
        eq = models.EquipmentMaster.objects.get(equipmentid=equipmentID)
        faci = models.Facility.objects.get(facilityid=eq.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        data = models.ComponentMaster.objects.filter(equipmentid=equipmentID)
        pagiComp = Paginator(data, 25)
        pageComp = request.GET.get('page', 1)
        # print("hihihihihihihihi")
        print(faci.siteid_id)
        try:
            obj = pagiComp.page(pageComp)
        except PageNotAnInteger:
            obj = pagiComp.page(1)
        except EmptyPage:
            obj = pageComp.page(pagiComp.num_pages)
        noti = models.ZNotification.objects.filter(link=equipmentID)
        for notifi in noti:
            if request.session['id'] == notifi.id_user:
                notifi.state = 1
                notifi.save()
    except:
        raise Http404
    return render(request, 'ManagerUI/component_List.html',
                  {'page': 'listComp', 'obj': obj, 'equipmentID': equipmentID, 'facilityID': eq.facilityid_id,
                   'siteID': faci.siteid_id, 'eq': eq, 'faci': faci, 'si': si, 'count': count, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session, 'notiVerificationmana':notiVerificationmana})


def ListManufactureMana(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    notiVerificationmana = ReCalculate.notiVerificationmana(siteID)
    countnoti = noti.filter(state=0).count()
    try:
        data = models.Manufacturer.objects.filter(siteid=siteID)
        pagiManu = Paginator(data, 25)
        pageManu = request.GET.get('page', 1)
        try:
            obj = pagiManu.page(pageManu)
        except PageNotAnInteger:
            obj = pagiManu.page(1)
        except EmptyPage:
            obj = pageManu.page(pagiManu.num_pages)
    except:
        raise Http404
    return render(request, 'ManagerUI/manufacture_List.html',
                  {'page': 'listManu', 'obj': obj, 'siteID': siteID, 'noti': noti, 'countnoti': countnoti,
                   'count': count, 'notiVerificationmana':notiVerificationmana})


def ListProposalMana(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    notiVerificationmana = ReCalculate.notiVerificationmana(siteid)
    countnoti = noti.filter(state=0).count()
    try:
        rwass = models.RwAssessment.objects.filter(componentid=componentID)
        data = []
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        tank = [12,13,14,15]
        # tank = [8, 9, 12, 13, 14, 15]
        for a in rwass:
            df = models.RwFullPof.objects.filter(id=a.id)
            fc = models.RwFullFcof.objects.filter(id=a.id)
            dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
            obj1 = {}
            obj1['id'] = a.id
            obj1['name'] = a.proposalname
            obj1['lastinsp'] = a.assessmentdate.strftime('%Y-%m-%d')
            if df.count() != 0:
                obj1['df'] = round(df[0].totaldfap1, 2)
                obj1['gff'] = df[0].gfftotal
                obj1['fms'] = df[0].fms
            else:
                obj1['df'] = 0
                obj1['gff'] = 0
                obj1['fms'] = 0
            if fc.count() != 0:
                obj1['fc'] = round(fc[0].fcofvalue, 2)
            else:
                obj1['fc'] = 0
            if dm.count() != 0:
                obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
            else:
                obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')
            obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
            data.append(obj1)
        pagidata = Paginator(data, 25)
        pagedata = request.GET.get('page', 1)
        try:
            obj = pagidata.page(pagedata)
        except PageNotAnInteger:
            obj = pagidata.page(1)
        except EmptyPage:
            obj = pagedata.page(pagidata.num_pages)

        if comp.componenttypeid_id in tank:
            istank = 1
        else:
            istank = 0
        if comp.componenttypeid_id == 13:
            isshell = 1
        else:
            isshell = 0
    except:
        raise Http404
    return render(request, 'ManagerUI/proposal_List.html',
                  {'page': 'listProposal', 'obj': obj, 'istank': istank, 'isshell': isshell,
                   'facilityID': equip.facilityid_id, 'componentID': componentID, 'siteID': faci.siteid_id,
                   'equipmentID': comp.equipmentid_id, 'comp': comp, 'equip': equip, 'faci': faci, 'si': si,
                   'count': count, 'noti': noti, 'countnoti': countnoti, 'info': request.session, 'notiVerificationmana':notiVerificationmana})


def ListDesignCodeMana(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    notiVerificationmana = ReCalculate.notiVerificationmana(siteID)
    countnoti = noti.filter(state=0).count()
    try:
        data = models.DesignCode.objects.filter(siteid=siteID)
        pagiDes = Paginator(data, 25)
        pageDes = request.GET.get('page', 1)
        try:
            obj = pagiDes.page(pageDes)
        except PageNotAnInteger:
            obj = pagiDes.page(1)
        except EmptyPage:
            obj = pageDes.page(pagiDes.num_pages)
    except:
        raise Http404
    return render(request, 'ManagerUI/designcode_List.html',
                  {'page': 'listDesign', 'obj': obj, 'siteID': siteID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'notiVerificationmana':notiVerificationmana})


def FullyDamageFactorMana(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        datas = models.Sites.objects.all()
        facis = []
        equips = []
        coms = []
        for a in datas:
            faci = models.Facility.objects.filter(siteid=a.siteid)
            facis.extend(faci)
            for b in faci:
                eq = models.EquipmentMaster.objects.filter(facilityid=b.facilityid)
                equips.extend(eq)
                for c in eq:
                    com = models.ComponentMaster.objects.filter(equipmentid=c.equipmentid)
                    coms.extend(com)
        num_site = len(datas)
        num_faci = len(facis)
        num_eq = len(equips)
        num_com = len(coms)
        thongbao=''
        df = models.RwFullPof.objects.get(id=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        data = {}
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        siteID = equip.siteid_id
        print(siteID)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0
        if component.componenttypeid_id == 8 or component.componenttypeid_id == 14:
            isShell = 1
        else:
            isShell = 0
        data['thinningType'] = df.thinningtype
        data['gfftotal'] = df.gfftotal
        data['fms'] = df.fms
        data['thinningap1'] = roundData.roundDF(df.thinningap1)
        data['thinningap2'] = roundData.roundDF(df.thinningap2)
        data['thinningap3'] = roundData.roundDF(df.thinningap3)
        data['sccap1'] = roundData.roundDF(df.sccap1)
        data['sccap2'] = roundData.roundDF(df.sccap2)
        data['sccap3'] = roundData.roundDF(df.sccap3)
        data['externalap1'] = roundData.roundDF(df.externalap1)
        data['externalap2'] = roundData.roundDF(df.externalap2)
        data['externalap3'] = roundData.roundDF(df.externalap3)
        data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
        data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
        data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
        data['brittleap1'] = roundData.roundDF(df.brittleap1)
        data['brittleap2'] = roundData.roundDF(df.brittleap2)
        data['brittleap3'] = roundData.roundDF(df.brittleap3)
        data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
        data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
        data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
        data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
        data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
        data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
        data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
        data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
        data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)
        data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
        data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
        data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
        data['pofap1'] = roundData.roundPoF(df.pofap1)
        data['pofap2'] = roundData.roundPoF(df.pofap2)
        data['pofap3'] = roundData.roundPoF(df.pofap3)
        data['pofap1category'] = df.pofap1category
        data['pofap2category'] = df.pofap2category
        data['pofap3category'] = df.pofap3category
        if 'verification' in request.POST   :
            df.thinningtype = request.POST.get('thinningType')
            df.save()
            veri = models.Verification(proposal=rwAss.proposalname, date=datetime.now(),Is_active=0, manager=request.session['name'],
                                       facility=equip.facilityid_id, com=component.componentname,
                                       eq=equip.equipmentname, link=rwAss.id, idcom=component.componentid,
                                       idequip=equip.equipmentid)
            veri.save()
            siteID = models.Facility.objects.get(facilityid=equip.facilityid_id).siteid_id
            iduser = models.Sites.objects.get(siteid=siteID).userID_id
            notifi = models.ZNotification(id_user=iduser, subject="You", content=" have a request to re-testing proposal ", object=rwAss.proposalname,
                                          link=equip.facilityid_id, time=datetime.now(), state=0, active_eng=1, active_vi=0)
            notifi.save()
            print('dua tay day nao')
            try:
                obj = SendEmail()
                obj.email_for_request(proposalID, rwAss.componentid_id, component.equipmentid_id, siteID)
            except Exception as e:
                print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                return HttpResponse("Verification has sent sucessfully !")
                print(e)
            thongbao='Verification has sent sucessfully !'
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'ManagerUI/RiskSummaryMana/FullDF.html',
                  {'page': 'damageFactor', 'obj': data, 'assess': rwAss, 'isTank': isTank, 'siteID': siteID,
                   'isShell': isShell, 'proposalID': proposalID, 'count': count, 'noti': noti, 'countnoti': countnoti,'thongbao':thongbao,
                   'info': request.session, 'num_site':num_site, 'num_eq': num_eq, 'num_com':num_com, 'num_faci':num_faci})


def FullyConsequenceMana(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    data = {}
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        datas = models.Sites.objects.all()
        facis = []
        equips = []
        coms = []
        for a in datas:
            faci = models.Facility.objects.filter(siteid=a.siteid)
            facis.extend(faci)
            for b in faci:
                eq = models.EquipmentMaster.objects.filter(facilityid=b.facilityid)
                equips.extend(eq)
                for c in eq:
                    com = models.ComponentMaster.objects.filter(equipmentid=c.equipmentid)
                    coms.extend(com)
        num_site = len(datas)
        num_faci = len(facis)
        num_eq = len(equips)
        num_com = len(coms)
        thongbao=''
        print("go")
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        siteID = equip.siteid_id
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        print(isShell, isBottom)
        if isBottom:
            bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
            data['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
            data['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
            data['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
            data['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
            data['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
            data['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
            data['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
            data['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
            data['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
            data['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
            data['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
            data['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
            data['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
            data['volume_ground_water_leak_d1'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d1)
            data['volume_ground_water_leak_d4'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d4)
            data['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
            data['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
            data['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
            data['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
            data['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
            data['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
            data['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
            data['material_factor'] = bottomConsequences.material_factor
            data['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
            data['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
            data['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
            data['consequencecategory'] = bottomConsequences.consequencecategory
            if 'verification' in request.POST:
                veri = models.Verification(proposal=rwAss.proposalname, date=datetime.now(), Is_active=0,
                                           manager=request.session['name'],
                                           facility=equip.facilityid_id, com=component.componentname,
                                           eq=equip.equipmentname, link=rwAss.id, idcom=component.componentid,
                                           idequip=equip.equipmentid)
                veri.save()
                print('vao day ne')
                try:
                    obj = SendEmail()
                    obj.email_for_request(proposalID, rwAss.componentid_id, component.equipmentid_id, siteID)
                except Exception as e:
                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                    return HttpResponse("Verification has sent sucessfully !")
                    print(e)
                thongbao = 'Verification has sent sucessfully !'
            return render(request, 'ManagerUI/RiskSummaryMana/fullyBottomConsequenceMana.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss, 'count': count,'thongbao':thongbao,
                           'noti': noti, 'countnoti': countnoti, 'info': request.session,'siteID':siteID, 'num_site':num_site, 'num_faci':num_faci, 'num_eq':num_eq, 'num_com':num_com})
        elif isShell:
            shellConsequences = models.RwCaTank.objects.get(id=proposalID)
            data['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
            data['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
            data['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
            data['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
            data['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
            data['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
            data['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
            data['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
            data['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
            data['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
            data['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
            data['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
            data['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
            data['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
            data['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
            data['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
            data['volume_ground_water_leak_d1'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d1)
            data['volume_ground_water_leak_d4'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d4)
            data['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
            data['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
            data['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
            data['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
            data['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
            data['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
            data['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
            data['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
            data['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
            data['consequence'] = roundData.roundMoney(shellConsequences.consequence)
            data['consequencecategory'] = shellConsequences.consequencecategory
            if 'verification' in request.POST:
                veri = models.Verification(proposal=rwAss.proposalname, date=datetime.now(), Is_active=0,
                                           manager=request.session['name'],
                                           facility=equip.facilityid_id, com=component.componentname,
                                           eq=equip.equipmentname, link=rwAss.id, idcom=component.componentid,
                                           idequip=equip.equipmentid)
                veri.save()

                try:
                    obj = SendEmail()
                    obj.email_for_request(proposalID, rwAss.componentid_id, component.equipmentid_id, siteID)
                except Exception as e:
                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                    return HttpResponse("Verification has sent sucessfully !")
                    print(e)
                thongbao = 'Verification has sent sucessfully !'
            return render(request, 'ManagerUI/RiskSummaryMana/fullyShellConsequenceMana.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss, 'count': count,'thongbao':thongbao,
                           'noti': noti, 'countnoti': countnoti, 'info': request.session,'siteID':siteID,'num_site':num_site, 'num_faci':num_faci, 'num_eq':num_eq, 'num_com':num_com})
        else:
            # print(" vào thiết bị thường")
            ca = models.RwCaLevel1.objects.get(id=proposalID)
            inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
            data['production_cost'] = roundData.roundMoney(inputCa.production_cost)
            data['equipment_cost'] = roundData.roundMoney(inputCa.equipment_cost)
            data['personal_density'] = inputCa.personal_density
            data['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
            data['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
            data['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
            data['fc_cmd'] = roundData.roundMoney(ca.fc_cmd)
            data['fc_affa'] = roundData.roundMoney(ca.fc_affa)
            data['fc_prod'] = roundData.roundMoney(ca.fc_prod)
            data['fc_inj'] = roundData.roundMoney(ca.fc_inj)
            data['fc_envi'] = roundData.roundMoney(ca.fc_envi)
            data['fc_total'] = roundData.roundMoney(ca.fc_total)
            data['fcof_category'] = ca.fcof_category
            if 'verification' in request.POST:
                veri = models.Verification(proposal=rwAss.proposalname, date=datetime.now(), Is_active=0,
                                               manager=request.session['name'],
                                               facility=equip.facilityid_id, com=component.componentname,
                                               eq=equip.equipmentname, link=rwAss.id, idcom=component.componentid,
                                               idequip=equip.equipmentid)
                veri.save()

                try:
                    obj = SendEmail()
                    obj.email_for_request(proposalID, rwAss.componentid_id, component.equipmentid_id, siteID)
                except Exception as e:
                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                    return HttpResponse("Verification has sent sucessfully !")
                    print(e)
                thongbao = 'Verification has sent sucessfully !'
            return render(request, 'ManagerUI/RiskSummaryMana/fullyNormalConsequenceMana.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss, 'count': count,'thongbao':thongbao,
                           'noti': noti, 'countnoti': countnoti, 'info': request.session, 'siteID': siteID, 'num_site':num_site, 'num_faci':num_faci, 'num_eq':num_eq, 'num_com':num_com})
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404


def RiskChartMana(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        rwAssessment = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAssessment.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        siteID = equip.siteid_id
        rwFullpof = models.RwFullPof.objects.get(id=proposalID)
        rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
        risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
        chart = models.RwDataChart.objects.get(id=proposalID)
        assessmentDate = rwAssessment.assessmentdate
        dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                     chart.riskage6,
                     chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage9, chart.riskage10, chart.riskage11,
                     chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15]
        dataLabel = [date2Str.date2str(assessmentDate), date2Str.date2str(date2Str.dateFuture(assessmentDate, 1)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 2)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 3)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 4)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 5)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 6)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 7)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 8)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 9)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 10)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 11)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 12)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 13)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 14))]
        dataTarget = [chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget]
        endLabel = date2Str.date2str(date2Str.dateFuture(assessmentDate, 15))
        content = {'page': 'riskChart', 'label': dataLabel, 'data': dataChart, 'target': dataTarget,
                   'endLabel': endLabel, 'proposalname': rwAssessment.proposalname,
                   'proposalID': rwAssessment.id, 'componentID': rwAssessment.componentid_id, 'count': count,
                   'noti': noti, 'countnoti': countnoti, 'info': request.session, 'siteID': siteID}
        return render(request, 'ManagerUI/RiskSummaryMana/riskChartMana.html', content)
    except:
        raise Http404


def RiskMatrixMana(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    rwAss = models.RwAssessment.objects.get(id=proposalID)
    component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
    equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
    siteID = equip.siteid_id
    try:
        locatAPI1 = {}
        locatAPI2 = {}
        locatAPI3 = {}
        locatAPI1['x'] = 0
        locatAPI1['y'] = 500

        locatAPI2['x'] = 0
        locatAPI2['y'] = 500

        locatAPI3['x'] = 0
        locatAPI3['y'] = 500

        df = models.RwFullPof.objects.get(id=proposalID)
        ca = models.RwFullFcof.objects.get(id=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0

        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        Ca = round(ca.fcofvalue, 2)
        DF1 = round(df.totaldfap1, 2)
        DF2 = round(df.totaldfap2, 2)
        DF3 = round(df.totaldfap3, 2)
    except:
        raise Http404
    return render(request, 'ManagerUI/RiskSummaryMana/RiskMatrixMana.html',
                  {'page': 'riskMatrix', 'API1': location.locat(df.totaldfap1, ca.fcofvalue),
                   'API2': location.locat(df.totaldfap2, ca.fcofvalue),
                   'API3': location.locat(df.totaldfap3, ca.fcofvalue), 'DF1': DF1, 'DF2': DF2, 'DF3': DF3, 'ca': Ca,
                   'siteID': siteID,
                   'ass': rwAss, 'isTank': isTank, 'isShell': isShell, 'df': df, 'proposalID': proposalID,
                   'count': count, 'noti': noti, 'countnoti': countnoti, 'info': request.session})


def Inputdata(request, proposalID):
    try:
        Fluid = ["Acid", "AlCl3", "C1-C2", "C13-C16", "C17-C25", "C25+", "C3-C4", "C5", "C6-C8", "C9-C12", "CO", "DEE",
                 "EE", "EEA", "EG", "EO", "H2", "H2S", "HCl", "HF", "Methanol", "Nitric Acid", "NO2", "Phosgene", "PO",
                 "Pyrophoric", "Steam", "Styrene", "TDI", "Water"]
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        componentTypeID = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id).componenttypeid_id
        tank = [12, 13, 14, 15]
        # print(componentTypeID)
        if componentTypeID in tank:
            rwinputca = models.RwInputCaTank.objects.get(id=proposalID)
        else:
            rwinputca = models.RwInputCaLevel1.objects.get(id=proposalID)
        assDate = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        try:
            extDate = rwcoat.externalcoatingdate.strftime('%Y-%m-%d')
        except:
            extDate = datetime.now().strftime('%Y-%m-%d')

        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        data = {}
        if request.method == 'POST':
            data['assessmentname'] = request.POST.get('AssessmentName')
            data['assessmentdate'] = request.POST.get('assessmentdate')
            data['apicomponenttypeid'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            data['equipmentType'] = models.EquipmentType.objects.get(equipmenttypeid=models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            data['riskperiod'] = request.POST.get('RiskAnalysisPeriod')
            if request.POST.get('adminControlUpset'):
                adminControlUpset = 1
            else:
                adminControlUpset = 0

            if request.POST.get('ContainsDeadlegs'):
                containsDeadlegs = 1
            else:
                containsDeadlegs = 0

            if request.POST.get('Highly'):
                HighlyEffe = 1
            else:
                HighlyEffe = 0

            if request.POST.get('CylicOper'):
                cylicOP = 1
            else:
                cylicOP = 0

            if request.POST.get('Downtime'):
                downtime = 1
            else:
                downtime = 0

            if request.POST.get('SteamedOut'):
                steamOut = 1
            else:
                steamOut = 0

            if request.POST.get('HeatTraced'):
                heatTrace = 1
            else:
                heatTrace = 0

            if request.POST.get('PWHT'):
                pwht = 1
            else:
                pwht = 0

            if request.POST.get('InterfaceSoilWater'):
                interfaceSoilWater = 1
            else:
                interfaceSoilWater = 0

            if request.POST.get('PressurisationControlled'):
                pressureControl = 1
            else:
                pressureControl = 0

            if request.POST.get('LOM'):
                linerOnlineMoniter = 1
            else:
                linerOnlineMoniter = 0

            if request.POST.get('EquOper'):
                lowestTemp = 1
            else:
                lowestTemp = 0

            if request.POST.get('PresenceofSulphidesShutdow'):
                presentSulphidesShutdown = 1
            else:
                presentSulphidesShutdown = 0

            if request.POST.get('MFTF'):
                materialExposed = 1
            else:
                materialExposed = 0

            if request.POST.get('PresenceofSulphides'):
                presentSulphide = 1
            else:
                presentSulphide = 0

            data['minTemp'] = request.POST.get('Min')
            data['ExternalEnvironment'] = request.POST.get('ExternalEnvironment')
            data['ThermalHistory'] = request.POST.get('ThermalHistory')
            data['OnlineMonitoring'] = request.POST.get('OnlineMonitoring')
            data['EquipmentVolumn'] = request.POST.get('EquipmentVolume')

            data['normaldiameter'] = request.POST.get('NominalDiameter')
            data['normalthick'] = request.POST.get('NominalThickness')
            data['currentthick'] = request.POST.get('CurrentThickness')
            data['tmin'] = request.POST.get('tmin')
            data['currentrate'] = request.POST.get('CurrentRate')
            data['deltafatt'] = request.POST.get('DeltaFATT')

            if request.POST.get('DFDI'):
                damageDuringInsp = 1
            else:
                damageDuringInsp = 0

            if request.POST.get('ChemicalInjection'):
                chemicalInj = 1
            else:
                chemicalInj = 0

            if request.POST.get('PresenceCracks'):
                crackpresent = 1
            else:
                crackpresent = 0

            if request.POST.get('HFICI'):
                HFICI = 1
            else:
                HFICI = 0

            if request.POST.get('TrampElements'):
                TrampElement = 1
            else:
                TrampElement = 0

            data['MaxBrinell'] = request.POST.get('MBHW')
            data['complex'] = request.POST.get('ComplexityProtrusions')
            data['CylicLoad'] = request.POST.get('CLC')
            data['branchDiameter'] = request.POST.get('BranchDiameter')
            data['joinTypeBranch'] = request.POST.get('JTB')
            data['numberPipe'] = request.POST.get('NFP')
            data['pipeCondition'] = request.POST.get('PipeCondition')
            data['prevFailure'] = request.POST.get('PreviousFailures')

            if request.POST.get('VASD'):
                visibleSharkingProtect = 1
            else:
                visibleSharkingProtect = 0

            data['shakingPipe'] = request.POST.get('ASP')
            data['timeShakingPipe'] = request.POST.get('ATSP')
            data['correctActionMitigate'] = request.POST.get('CAMV')
            # OP condition
            data['maxOT'] = request.POST.get('MaxOT')
            data['maxOP'] = request.POST.get('MaxOP')
            data['minOT'] = request.POST.get('MinOT')
            data['minOP'] = request.POST.get('MinOP')
            data['OpHydroPressure'] = request.POST.get('OHPP')
            data['criticalTemp'] = request.POST.get('CET')
            data['OP1'] = request.POST.get('Operating1')
            data['OP2'] = request.POST.get('Operating2')
            data['OP3'] = request.POST.get('Operating3')
            data['OP4'] = request.POST.get('Operating4')
            data['OP5'] = request.POST.get('Operating5')
            data['OP6'] = request.POST.get('Operating6')
            data['OP7'] = request.POST.get('Operating7')
            data['OP8'] = request.POST.get('Operating8')
            data['OP9'] = request.POST.get('Operating9')
            data['OP10'] = request.POST.get('Operating10')
            # material
            data['material'] = request.POST.get('Material')
            data['maxDesignTemp'] = request.POST.get('MaxDesignTemp')
            data['minDesignTemp'] = request.POST.get('MinDesignTemp')
            data['designPressure'] = request.POST.get('DesignPressure')
            data['tempRef'] = request.POST.get('ReferenceTemperature')
            data['allowStress'] = request.POST.get('ASAT')
            data['BrittleFacture'] = request.POST.get('BFGT')
            data['CA'] = request.POST.get('CorrosionAllowance')
            data['sigmaPhase'] = request.POST.get('SigmaPhase')
            if request.POST.get('CoLAS'):
                cacbonAlloy = 1
            else:
                cacbonAlloy = 0

            if request.POST.get('AusteniticSteel'):
                austeniticStell = 1
            else:
                austeniticStell = 0

            if request.POST.get('SusceptibleTemper'):
                suscepTemp = 1
            else:
                suscepTemp = 0

            if request.POST.get('NickelAlloy'):
                nickelAlloy = 1
            else:
                nickelAlloy = 0

            if request.POST.get('Chromium'):
                chromium = 1
            else:
                chromium = 0

            data['sulfurContent'] = request.POST.get('SulfurContent')
            data['heatTreatment'] = request.POST.get('heatTreatment')

            if request.POST.get('MGTEHTHA'):
                materialHTHA = 1
            else:
                materialHTHA = 0

            data['HTHAMaterialGrade'] = request.POST.get('HTHAMaterialGrade')

            if request.POST.get('MaterialPTA'):
                materialPTA = 1
            else:
                materialPTA = 0

            data['PTAMaterialGrade'] = request.POST.get('PTAMaterialGrade')
            data['materialCostFactor'] = request.POST.get('MaterialCostFactor')
            # Coating, Clading
            if request.POST.get('InternalCoating'):
                InternalCoating = 1
            else:
                InternalCoating = 0

            if request.POST.get('ExternalCoating'):
                ExternalCoating = 1
            else:
                ExternalCoating = 0

            data['ExternalCoatingID'] = request.POST.get('ExternalCoatingID')
            data['ExternalCoatingQuality'] = request.POST.get('ExternalCoatingQuality')

            if request.POST.get('SCWD'):
                supportMaterial = 1
            else:
                supportMaterial = 0

            if request.POST.get('InternalCladding'):
                InternalCladding = 1
            else:
                InternalCladding = 0

            data['CladdingCorrosionRate'] = request.POST.get('CladdingCorrosionRate')

            if request.POST.get('InternalLining'):
                InternalLining = 1
            else:
                InternalLining = 0

            data['InternalLinerType'] = request.POST.get('InternalLinerType')
            data['InternalLinerCondition'] = request.POST.get('InternalLinerCondition')

            if request.POST.get('ExternalInsulation') == "on" or request.POST.get('ExternalInsulation') == 1:
                ExternalInsulation = 1
            else:
                ExternalInsulation = 0

            if request.POST.get('ICC'):
                InsulationCholride = 1
            else:
                InsulationCholride = 0

            data['ExternalInsulationType'] = request.POST.get('ExternalInsulationType')
            data['InsulationCondition'] = request.POST.get('InsulationCondition')
            # Steam
            data['NaOHConcentration'] = request.POST.get('NaOHConcentration')
            data['ReleasePercentToxic'] = request.POST.get('RFPT')
            data['ChlorideIon'] = request.POST.get('ChlorideIon')
            data['CO3'] = request.POST.get('CO3')
            data['H2SContent'] = request.POST.get('H2SContent')
            data['PHWater'] = request.POST.get('PHWater')

            if request.POST.get('EAGTA'):
                exposureAcid = 1
            else:
                exposureAcid = 0

            if request.POST.get('ToxicConstituents'):
                ToxicConstituents = 1
            else:
                ToxicConstituents = 0

            data['ExposureAmine'] = request.POST.get('ExposureAmine')
            data['AminSolution'] = request.POST.get('ASC')

            if request.POST.get('APDO'):
                aquaDuringOP = 1
            else:
                aquaDuringOP = 0

            if request.POST.get('APDSD'):
                aquaDuringShutdown = 1
            else:
                aquaDuringShutdown = 0

            if request.POST.get('EnvironmentCH2S'):
                EnvironmentCH2S = 1
            else:
                EnvironmentCH2S = 0

            if request.POST.get('PHA'):
                presentHF = 1
            else:
                presentHF = 0

            if request.POST.get('PresenceCyanides'):
                presentCyanide = 1
            else:
                presentCyanide = 0

            if request.POST.get('PCH'):
                processHydrogen = 1
            else:
                processHydrogen = 0

            if request.POST.get('ECCAC'):
                environCaustic = 1
            else:
                environCaustic = 0

            if request.POST.get('ESBC'):
                exposedSulfur = 1
            else:
                exposedSulfur = 0

            if request.POST.get('MEFMSCC'):
                materialExposedFluid = 1
            else:
                materialExposedFluid = 0
            # CA
            data['APIFluid'] = request.POST.get('APIFluid')
            data['MassInventory'] = request.POST.get('MassInventory')
            data['Systerm'] = request.POST.get('Systerm')
            data['MassComponent'] = request.POST.get('MassComponent')
            data['EquipmentCost'] = request.POST.get('EquipmentCost')
            data['MittigationSysterm'] = request.POST.get('MittigationSysterm')
            data['ProductionCost'] = request.POST.get('ProductionCost')
            data['ToxicPercent'] = request.POST.get('ToxicPercent')
            data['InjureCost'] = request.POST.get('InjureCost')
            data['ReleaseDuration'] = request.POST.get('ReleaseDuration')
            data['EnvironmentCost'] = request.POST.get('EnvironmentCost')
            data['PersonDensity'] = request.POST.get('PersonDensity')
            data['DetectionType'] = request.POST.get('DetectionType')
            data['IsulationType'] = request.POST.get('IsulationType')

            rwassessment.assessmentdate = data['assessmentdate']
            rwassessment.proposalname = data['assessmentname']
            rwassessment.save()

            rwequipment.adminupsetmanagement = adminControlUpset
            rwequipment.containsdeadlegs = containsDeadlegs
            rwequipment.cyclicoperation = cylicOP
            rwequipment.highlydeadleginsp = HighlyEffe
            rwequipment.downtimeprotectionused = downtime
            rwequipment.externalenvironment = data['ExternalEnvironment']
            rwequipment.heattraced = heatTrace
            rwequipment.interfacesoilwater = interfaceSoilWater
            rwequipment.lineronlinemonitoring = linerOnlineMoniter
            rwequipment.materialexposedtoclext = materialExposed
            rwequipment.minreqtemperaturepressurisation = data['minTemp']
            rwequipment.onlinemonitoring = data['OnlineMonitoring']
            rwequipment.presencesulphideso2 = presentSulphide
            rwequipment.presencesulphideso2shutdown = presentSulphidesShutdown
            rwequipment.pressurisationcontrolled = pressureControl
            rwequipment.pwht = pwht
            rwequipment.steamoutwaterflush = steamOut
            rwequipment.thermalhistory = data['ThermalHistory']
            rwequipment.yearlowestexptemp = lowestTemp
            rwequipment.volume = data['EquipmentVolumn']
            rwequipment.save()

            rwcomponent.nominaldiameter = data['normaldiameter']
            rwcomponent.nominalthickness = data['normalthick']
            rwcomponent.currentthickness = data['currentthick']
            rwcomponent.minreqthickness = data['tmin']
            rwcomponent.currentcorrosionrate = data['currentrate']
            rwcomponent.branchdiameter = data['branchDiameter']
            rwcomponent.branchjointtype = data['joinTypeBranch']
            rwcomponent.brinnelhardness = data['MaxBrinell']
            rwcomponent.deltafatt = data['deltafatt']
            rwcomponent.chemicalinjection = chemicalInj
            rwcomponent.highlyinjectioninsp = HFICI
            rwcomponent.complexityprotrusion = data['complex']
            rwcomponent.correctiveaction = data['correctActionMitigate']
            rwcomponent.crackspresent = crackpresent
            rwcomponent.cyclicloadingwitin15_25m = data['CylicLoad']
            rwcomponent.damagefoundinspection = damageDuringInsp
            rwcomponent.numberpipefittings = data['numberPipe']
            rwcomponent.pipecondition = data['pipeCondition']
            rwcomponent.previousfailures = data['prevFailure']
            rwcomponent.shakingamount = data['shakingPipe']
            rwcomponent.shakingdetected = visibleSharkingProtect
            rwcomponent.shakingtime = data['timeShakingPipe']
            rwcomponent.allowablestress = data['allowStress']
            # rwcomponent.trampelements=TrampElement
            rwcomponent.save()

            rwstream.aminesolution = data['AminSolution']
            rwstream.aqueousoperation = aquaDuringOP
            rwstream.aqueousshutdown = aquaDuringShutdown
            rwstream.toxicconstituent = ToxicConstituents
            rwstream.caustic = environCaustic
            rwstream.chloride = data['ChlorideIon']
            rwstream.co3concentration = data['CO3']
            rwstream.cyanide = presentCyanide
            rwstream.exposedtogasamine = exposureAcid
            rwstream.exposedtosulphur = exposedSulfur
            rwstream.exposuretoamine = data['ExposureAmine']
            rwstream.h2s = EnvironmentCH2S
            rwstream.h2sinwater = data['H2SContent']
            rwstream.hydrogen = processHydrogen
            rwstream.hydrofluoric = presentHF
            rwstream.materialexposedtoclint = materialExposedFluid
            rwstream.maxoperatingpressure = data['maxOP']
            rwstream.maxoperatingtemperature = float(data['maxOT'])
            rwstream.minoperatingpressure = float(data['minOP'])
            rwstream.minoperatingtemperature = data['minOT']
            rwstream.criticalexposuretemperature = data['criticalTemp']
            rwstream.naohconcentration = data['NaOHConcentration']
            rwstream.releasefluidpercenttoxic = float(data['ReleasePercentToxic'])
            rwstream.waterph = float(data['PHWater'])
            rwstream.h2spartialpressure = float(data['OpHydroPressure'])
            rwstream.save()

            rwexcor.minus12tominus8 = data['OP1']
            rwexcor.minus8toplus6 = data['OP2']
            rwexcor.plus6toplus32 = data['OP3']
            rwexcor.plus32toplus71 = data['OP4']
            rwexcor.plus71toplus107 = data['OP5']
            rwexcor.plus107toplus121 = data['OP6']
            rwexcor.plus121toplus135 = data['OP7']
            rwexcor.plus135toplus162 = data['OP8']
            rwexcor.plus162toplus176 = data['OP9']
            rwexcor.morethanplus176 = data['OP10']
            rwexcor.save()

            rwcoat.externalcoating = ExternalCoating
            rwcoat.externalinsulation = ExternalInsulation
            rwcoat.internalcladding = InternalCladding
            rwcoat.internalcoating = InternalCoating
            rwcoat.internallining = InternalLining
            rwcoat.externalcoatingdate = data['ExternalCoatingID']
            rwcoat.externalcoatingquality = data['ExternalCoatingQuality']
            rwcoat.externalinsulationtype = data['ExternalInsulationType']
            rwcoat.insulationcondition = data['InsulationCondition']
            rwcoat.insulationcontainschloride = InsulationCholride
            rwcoat.internallinercondition = data['InternalLinerCondition']
            rwcoat.internallinertype = data['InternalLinerType']
            rwcoat.claddingcorrosionrate = data['CladdingCorrosionRate']
            rwcoat.supportconfignotallowcoatingmaint = supportMaterial
            rwcoat.save()

            rwmaterial.corrosionallowance = data['CA']
            rwmaterial.materialname = data['material']
            rwmaterial.designpressure = data['designPressure']
            rwmaterial.designtemperature = data['maxDesignTemp']
            rwmaterial.mindesigntemperature = data['minDesignTemp']
            rwmaterial.brittlefracturethickness = data['BrittleFacture']
            rwmaterial.sigmaphase = data['sigmaPhase']
            rwmaterial.sulfurcontent = data['sulfurContent']
            rwmaterial.heattreatment = data['heatTreatment']
            rwmaterial.referencetemperature = data['tempRef']
            rwmaterial.ptamaterialcode = data['PTAMaterialGrade']
            rwmaterial.hthamaterialcode = data['HTHAMaterialGrade']
            rwmaterial.ispta = materialPTA
            rwmaterial.ishtha = materialHTHA
            rwmaterial.austenitic = austeniticStell
            rwmaterial.temper = suscepTemp
            rwmaterial.carbonlowalloy = cacbonAlloy
            rwmaterial.nickelbased = nickelAlloy
            rwmaterial.chromemoreequal12 = chromium
            rwmaterial.costfactor = data['materialCostFactor']
            rwmaterial.save()
            if componentTypeID in tank:
                rwinputca.api_fluid = data['APIFluid']
                rwinputca.system = data['Systerm']
                rwinputca.release_duration = data['ReleaseDuration']
                rwinputca.detection_type = data['DetectionType']
                rwinputca.isulation_type = data['IsulationType']
                rwinputca.mitigation_system = data['MittigationSysterm']
                rwinputca.equipment_cost = data['EquipmentCost']
                rwinputca.injure_cost = data['InjureCost']
                rwinputca.evironment_cost = data['EnvironmentCost']
                rwinputca.toxic_percent = data['ToxicPercent']
                rwinputca.personal_density = data['PersonDensity']
                rwinputca.material_cost = data['materialCostFactor']
                rwinputca.production_cost = data['ProductionCost']
                rwinputca.mass_inventory = data['MassInventory']
                rwinputca.mass_component = data['MassComponent']
                rwinputca.stored_pressure = float(data['minOP']) * 6.895
                rwinputca.stored_temp = data['minOT']
                rwinputca.save()

            # Customize code here
            ReCalculate.ReCalculate(proposalID, request)
            return redirect('inputdata', proposalID=proposalID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'BaseUI/BaseManager/Inputdata.html',
                  {'api': Fluid, 'rwAss': rwassessment, 'rwEq': rwequipment,
                   'rwComp': rwcomponent, 'rwStream': rwstream, 'rwExcot': rwexcor,
                   'rwCoat': rwcoat, 'rwMaterial': rwmaterial, 'rwInputCa': rwinputca,
                   'assDate': assDate, 'extDate': extDate,
                   'componentID': rwassessment.componentid_id,
                   'equipmentID': rwassessment.equipmentid_id})


################ yeu cau kiem dinh Manager ############

# def VeriFullyDamageFactorMana(request, proposalID):
#     if not request.session.session_key:
#         return redirect('home')
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     try:
#         # print("go VeriFullyDamageFactorMana")
#         df = models.RwFullPof.objects.get(id=proposalID)
#         rwAss = models.RwAssessment.objects.get(id=proposalID)
#         data = {}
#         component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
#         equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
#         siteID = equip.siteid_id
#         if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
#             isTank = 1
#         else:
#             isTank = 0
#         if component.componenttypeid_id == 13:
#             isShell = 1
#         else:
#             isShell = 0
#         data['thinningType'] = df.thinningtype
#         data['gfftotal'] = df.gfftotal
#         data['fms'] = df.fms
#         data['thinningap1'] = roundData.roundDF(df.thinningap1)
#         data['thinningap2'] = roundData.roundDF(df.thinningap2)
#         data['thinningap3'] = roundData.roundDF(df.thinningap3)
#         data['sccap1'] = roundData.roundDF(df.sccap1)
#         data['sccap2'] = roundData.roundDF(df.sccap2)
#         data['sccap3'] = roundData.roundDF(df.sccap3)
#         data['externalap1'] = roundData.roundDF(df.externalap1)
#         data['externalap2'] = roundData.roundDF(df.externalap2)
#         data['externalap3'] = roundData.roundDF(df.externalap3)
#         data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
#         data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
#         data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
#         data['brittleap1'] = roundData.roundDF(df.brittleap1)
#         data['brittleap2'] = roundData.roundDF(df.brittleap2)
#         data['brittleap3'] = roundData.roundDF(df.brittleap3)
#         data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
#         data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
#         data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
#         data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
#         data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
#         data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
#         data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
#         data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
#         data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)
#         data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
#         data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
#         data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
#         data['pofap1'] = roundData.roundPoF(df.pofap1)
#         data['pofap2'] = roundData.roundPoF(df.pofap2)
#         data['pofap3'] = roundData.roundPoF(df.pofap3)
#         data['pofap1category'] = df.pofap1category
#         data['pofap2category'] = df.pofap2category
#         data['pofap3category'] = df.pofap3category
#         # print("test data")
#         # if request.method == 'POST':
#         #     df.thinningtype = request.POST.get('thinningType')
#         #     df.save()
#         #     ReCalculate.ReCalculate(proposalID)
#         #     return redirect('veridamgeFactorMana', proposalID)
#         if 'Verifica' in request.POST:
#             # print("go verifiaca")
#             veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                        facility=equip.facilityid_id, com=component.componentname,
#                                        eq=equip.equipmentname,link=rwAss.id, idcom=component.componentid, idequip=equip.equipmentid)
#             veri.save()
#             some_var = request.POST.getlist('check')
#             try:
#                 obj = SendEmail()
#                 obj.email_for_request(proposalID,rwAss.componentid_id,component.equipmentid_id,siteID)
#             except Exception as e:
#                 print(e)
#             for some_var in some_var:
#                 vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                 vericontent.save()
#             return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#
#     except Exception as e:
#         print(e)
#         raise Http404
#     return render(request, 'ManagerUI/verification_requirments/FullDFV.html',
#                   {'page': 'damageFactor', 'obj': data, 'assess': rwAss, 'isTank': isTank, 'siteID':siteID,
#                    'isShell': isShell, 'proposalID': proposalID, 'count': count, 'noti': noti, 'countnoti': countnoti,
#                    'info': request.session})
#
#
# def VeriFullyConsequenceMana(request, proposalID):
#     if not request.session.session_key:
#         return redirect('home')
#     data = {}
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     try:
#         # print(" vào VeriFullyConsequenceMana")
#         rwAss = models.RwAssessment.objects.get(id=proposalID)
#         component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
#         equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
#         siteID = equip.siteid_id
#         if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
#             isBottom = 1
#         else:
#             isBottom = 0
#         if component.componenttypeid_id == 13 :
#             isShell = 1
#         else:
#             isShell = 0
#         if isBottom:
#             bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
#             data['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
#             data['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
#             data['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
#             data['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
#             data['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
#             data['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
#             data['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
#             data['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
#             data['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
#             data['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
#             data['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
#             data['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
#             data['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
#             data['volume_ground_water_leak_d1'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d1)
#             data['volume_ground_water_leak_d4'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d4)
#             data['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
#             data['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
#             data['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
#             data['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
#             data['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
#             data['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
#             data['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
#             data['material_factor'] = bottomConsequences.material_factor
#             data['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
#             data['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
#             data['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
#             data['consequencecategory'] = bottomConsequences.consequencecategory
#             if 'Verifica' in request.POST:
#                 veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                            facility=equip.facilityid_id, com=component.componentname,
#                                            eq=equip.equipmentname)
#                 veri.save()
#                 some_var = request.POST.getlist('check')
#                 for some_var in some_var:
#                     # print(some_var)
#                     vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                     vericontent.save()
#                 return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#             return render(request, 'ManagerUI/verification_requirments/fullyBottomConsequenVerification.html',
#                           {'page': 'fullyConse', 'data': data, 'proposalID': proposalID,'siteID':siteID, 'ass': rwAss, 'count': count,
#                            'noti': noti, 'countnoti': countnoti, 'info': request.session})
#         elif isShell:
#             shellConsequences = models.RwCaTank.objects.get(id=proposalID)
#             data['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
#             data['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
#             data['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
#             data['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
#             data['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
#             data['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
#             data['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
#             data['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
#             data['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
#             data['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
#             data['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
#             data['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
#             data['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
#             data['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
#             data['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
#             data['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
#             data['volume_ground_water_leak_d1'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d1)
#             data['volume_ground_water_leak_d4'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d4)
#             data['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
#             data['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
#             data['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
#             data['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
#             data['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
#             data['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
#             data['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
#             data['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
#             data['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
#             data['consequence'] = roundData.roundMoney(shellConsequences.consequence)
#             data['consequencecategory'] = shellConsequences.consequencecategory
#             if 'Verifica' in request.POST:
#                 veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                            facility=equip.facilityid_id, com=component.componentname,
#                                            eq=equip.equipmentname, idcom = component.componentid, idequip = equip.equipmentid)
#                 veri.save()
#                 some_var = request.POST.getlist('check')
#                 for some_var in some_var:
#                     # print(some_var)
#                     vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                     vericontent.save()
#                 return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#             return render(request, 'ManagerUI/verification_requirments/fullyShellConsequenceVerification.html',
#                           {'page': 'fullyConse', 'data': data, 'proposalID': proposalID,'siteID':siteID,'ass': rwAss, 'count': count,
#                            'noti': noti, 'countnoti': countnoti, 'info': request.session})
#         else:
#             print("vào lại loại thường")
#             ca = models.RwCaLevel1.objects.get(id=proposalID)
#             inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
#             data['production_cost'] = roundData.roundMoney(inputCa.production_cost)
#             data['equipment_cost'] = roundData.roundMoney(inputCa.equipment_cost)
#             data['personal_density'] = inputCa.personal_density
#             data['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
#             data['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
#             data['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
#             data['fc_cmd'] = roundData.roundMoney(ca.fc_cmd)
#             data['fc_affa'] = roundData.roundMoney(ca.fc_affa)
#             data['fc_prod'] = roundData.roundMoney(ca.fc_prod)
#             data['fc_inj'] = roundData.roundMoney(ca.fc_inj)
#             data['fc_envi'] = roundData.roundMoney(ca.fc_envi)
#             data['fc_total'] = roundData.roundMoney(ca.fc_total)
#             data['fcof_category'] = ca.fcof_category
#             # print("đưa dữ liệu vào mảng")
#             if 'Verifica' in request.POST:
#                 veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                            facility=equip.facilityid_id, com=component.componentname,
#                                            eq=equip.equipmentname, idcom = component.componentid, idequip= equip.equipmentid)
#                 veri.save()
#                 some_var = request.POST.getlist('check')
#                 for some_var in some_var:
#                     # print(some_var)
#                     vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                     vericontent.save()
#                 return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#             return render(request, 'ManagerUI/verification_requirments/fullyNormalConsequenceVericification.html',
#                           {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'siteID':siteID,'ass': rwAss, 'count': count,
#                            'noti': noti, 'countnoti': countnoti, 'info': request.session})
#     except Exception as e:
#         print(e)
#         raise Http404

# def VeriFullyDamageFactorMana(request, proposalID):
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     try:
#         # print("go VeriFullyDamageFactorMana")
#         df = models.RwFullPof.objects.get(id=proposalID)
#         rwAss = models.RwAssessment.objects.get(id=proposalID)
#         data = {}
#         component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
#         equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
#         siteID = equip.siteid_id
#         if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
#             isTank = 1
#         else:
#             isTank = 0
#         if component.componenttypeid_id == 13:
#             isShell = 1
#         else:
#             isShell = 0
#         data['thinningType'] = df.thinningtype
#         data['gfftotal'] = df.gfftotal
#         data['fms'] = df.fms
#         data['thinningap1'] = roundData.roundDF(df.thinningap1)
#         data['thinningap2'] = roundData.roundDF(df.thinningap2)
#         data['thinningap3'] = roundData.roundDF(df.thinningap3)
#         data['sccap1'] = roundData.roundDF(df.sccap1)
#         data['sccap2'] = roundData.roundDF(df.sccap2)
#         data['sccap3'] = roundData.roundDF(df.sccap3)
#         data['externalap1'] = roundData.roundDF(df.externalap1)
#         data['externalap2'] = roundData.roundDF(df.externalap2)
#         data['externalap3'] = roundData.roundDF(df.externalap3)
#         data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
#         data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
#         data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
#         data['brittleap1'] = roundData.roundDF(df.brittleap1)
#         data['brittleap2'] = roundData.roundDF(df.brittleap2)
#         data['brittleap3'] = roundData.roundDF(df.brittleap3)
#         data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
#         data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
#         data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
#         data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
#         data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
#         data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
#         data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
#         data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
#         data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)
#         data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
#         data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
#         data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
#         data['pofap1'] = roundData.roundPoF(df.pofap1)
#         data['pofap2'] = roundData.roundPoF(df.pofap2)
#         data['pofap3'] = roundData.roundPoF(df.pofap3)
#         data['pofap1category'] = df.pofap1category
#         data['pofap2category'] = df.pofap2category
#         data['pofap3category'] = df.pofap3category
#         # print("test data")
#         # if request.method == 'POST':
#         #     df.thinningtype = request.POST.get('thinningType')
#         #     df.save()
#         #     ReCalculate.ReCalculate(proposalID)
#         #     return redirect('veridamgeFactorMana', proposalID)
#         if 'Verifica' in request.POST:
#             # print("go verifiaca")
#             veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                        facility=equip.facilityid_id, com=component.componentname,
#                                        eq=equip.equipmentname,link=rwAss.id, idcom=component.componentid, idequip=equip.equipmentid)
#             veri.save()
#             some_var = request.POST.getlist('check')
#             try:
#                 obj = SendEmail()
#                 obj.email_for_request(proposalID,rwAss.componentid_id,component.equipmentid_id,siteID)
#             except Exception as e:
#                 print(e)
#             for some_var in some_var:
#                 vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                 vericontent.save()
#             return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#
#     except Exception as e:
#         print(e)
#         raise Http404
#     return render(request, 'ManagerUI/verification_requirments/FullDFV.html',
#                   {'page': 'damageFactor', 'obj': data, 'assess': rwAss, 'isTank': isTank, 'siteID':siteID,
#                    'isShell': isShell, 'proposalID': proposalID, 'count': count, 'noti': noti, 'countnoti': countnoti,
#                    'info': request.session})


# def VeriFullyConsequenceMana(request, proposalID):
#     data = {}
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     try:
#         # print(" vào VeriFullyConsequenceMana")
#         rwAss = models.RwAssessment.objects.get(id=proposalID)
#         component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
#         equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
#         siteID = equip.siteid_id
#         if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
#             isBottom = 1
#         else:
#             isBottom = 0
#         if component.componenttypeid_id == 13 :
#             isShell = 1
#         else:
#             isShell = 0
#         if isBottom:
#             bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
#             data['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
#             data['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
#             data['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
#             data['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
#             data['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
#             data['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
#             data['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
#             data['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
#             data['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
#             data['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
#             data['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
#             data['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
#             data['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
#             data['volume_ground_water_leak_d1'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d1)
#             data['volume_ground_water_leak_d4'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d4)
#             data['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
#             data['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
#             data['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
#             data['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
#             data['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
#             data['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
#             data['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
#             data['material_factor'] = bottomConsequences.material_factor
#             data['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
#             data['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
#             data['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
#             data['consequencecategory'] = bottomConsequences.consequencecategory
#             if 'Verifica' in request.POST:
#                 veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                            facility=equip.facilityid_id, com=component.componentname,
#                                            eq=equip.equipmentname)
#                 veri.save()
#                 some_var = request.POST.getlist('check')
#                 for some_var in some_var:
#                     # print(some_var)
#                     vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                     vericontent.save()
#                 return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#             return render(request, 'ManagerUI/verification_requirments/fullyBottomConsequenVerification.html',
#                           {'page': 'fullyConse', 'data': data, 'proposalID': proposalID,'siteID':siteID, 'ass': rwAss, 'count': count,
#                            'noti': noti, 'countnoti': countnoti, 'info': request.session})
#         elif isShell:
#             shellConsequences = models.RwCaTank.objects.get(id=proposalID)
#             data['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
#             data['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
#             data['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
#             data['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
#             data['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
#             data['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
#             data['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
#             data['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
#             data['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
#             data['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
#             data['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
#             data['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
#             data['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
#             data['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
#             data['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
#             data['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
#             data['volume_ground_water_leak_d1'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d1)
#             data['volume_ground_water_leak_d4'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d4)
#             data['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
#             data['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
#             data['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
#             data['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
#             data['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
#             data['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
#             data['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
#             data['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
#             data['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
#             data['consequence'] = roundData.roundMoney(shellConsequences.consequence)
#             data['consequencecategory'] = shellConsequences.consequencecategory
#             if 'Verifica' in request.POST:
#                 veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                            facility=equip.facilityid_id, com=component.componentname,
#                                            eq=equip.equipmentname, idcom = component.componentid, idequip = equip.equipmentid)
#                 veri.save()
#                 some_var = request.POST.getlist('check')
#                 for some_var in some_var:
#                     # print(some_var)
#                     vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                     vericontent.save()
#                 return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#             return render(request, 'ManagerUI/verification_requirments/fullyShellConsequenceVerification.html',
#                           {'page': 'fullyConse', 'data': data, 'proposalID': proposalID,'siteID':siteID,'ass': rwAss, 'count': count,
#                            'noti': noti, 'countnoti': countnoti, 'info': request.session})
#         else:
#             print("vào lại loại thường")
#             ca = models.RwCaLevel1.objects.get(id=proposalID)
#             inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
#             data['production_cost'] = roundData.roundMoney(inputCa.production_cost)
#             data['equipment_cost'] = roundData.roundMoney(inputCa.equipment_cost)
#             data['personal_density'] = inputCa.personal_density
#             data['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
#             data['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
#             data['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
#             data['fc_cmd'] = roundData.roundMoney(ca.fc_cmd)
#             data['fc_affa'] = roundData.roundMoney(ca.fc_affa)
#             data['fc_prod'] = roundData.roundMoney(ca.fc_prod)
#             data['fc_inj'] = roundData.roundMoney(ca.fc_inj)
#             data['fc_envi'] = roundData.roundMoney(ca.fc_envi)
#             data['fc_total'] = roundData.roundMoney(ca.fc_total)
#             data['fcof_category'] = ca.fcof_category
#             # print("đưa dữ liệu vào mảng")
#             if 'Verifica' in request.POST:
#                 veri = models.Verification(proposal=rwAss.proposalname, Is_active=0, manager=request.session['name'],
#                                            facility=equip.facilityid_id, com=component.componentname,
#                                            eq=equip.equipmentname, idcom = component.componentid, idequip= equip.equipmentid)
#                 veri.save()
#                 some_var = request.POST.getlist('check')
#                 for some_var in some_var:
#                     # print(some_var)
#                     vericontent = models.VeriContent(Verification_id=veri.id, content=some_var)
#                     vericontent.save()
#                 return HttpResponse("Bạn đã yêu cầu kiểm định thành công")
#             return render(request, 'ManagerUI/verification_requirments/fullyNormalConsequenceVericification.html',
#                           {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'siteID':siteID,'ass': rwAss, 'count': count,
#                            'noti': noti, 'countnoti': countnoti, 'info': request.session})
#     except Exception as e:
#         print(e)
#         raise Http404



def VerificationHome(request, faciid):
    try:
        siteID = models.Facility.objects.get(facilityid=faciid).siteid_id
        # print(siteID)
        faci = models.Facility.objects.filter(facilityid=faciid)
        # faciid = models.Facility.objects.get(facilityid=faciid)
        # idequip = models.EquipmentMaster.objects.filter(facilityid_id=faciid)
        # idcom = models.ComponentMaster.objects.get()
        print('hhihii', faciid)
        rwass = models.RwAssessment.objects.all()

        data = []
        array = []
        baocao=[]

        # proposal = models.RwAssessment.objects.filter(componentid_id=)
        for a in faci:
            veri = models.Verification.objects.filter(facility=a.facilityid)
            ct = models.VeriContent.objects.all()
            for verifi in veri:
                cont = models.VeriContent.objects.filter(Verification=verifi.id)
                array.append(cont)
                # for con in cont:
                    # print(con.Verification.id)
        idequip = models.EquipmentMaster.objects.filter(facilityid_id=faciid)
        for a in idequip:
            idcom = models.ComponentMaster.objects.filter(equipmentid=a.equipmentid)
            for b in idcom:
                idproposal = models.RwAssessment.objects.filter(componentid=b.componentid)
                # rwass = models.RwAssessment.objects.filter(id=idproposal)
                for c in faci:
                    veri = models.Verification.objects.filter(facility=c.facilityid)
                    for d in veri:
                        print('b.componentid',b.componentid)
                        print('d.idcom',d.idcom)
                        if(b.componentid != d.idcom):
                            for e in idproposal:
                                obj = {}
                                obj['ID'] = e.id
                                obj['Name'] = e.proposalname
                                try:
                                    obj['pof1'] = models.RwFullPof.objects.get(id=e.id).pofap1category
                                    obj['pof2'] = models.RwFullPof.objects.get(id=e.id).pofap2category
                                    obj['pof3'] = models.RwFullPof.objects.get(id=e.id).pofap3category
                                except:
                                    obj['pof1'] = 5
                                    obj['pof2'] = 5
                                    obj['pof3'] = 5
                                try:
                                    obj['cof'] = models.RwFullFcof.objects.get(id=e.id).fcofcategory
                                except:
                                    obj['cof'] = "E"
                                data.append(obj)
                        # print('hihi')
        if '_check' in request.POST:
            veriCheck_ID = request.POST.get('_check')
            return redirect('VerificationCheck', verifiID=veriCheck_ID)
        if '_view' in request.POST:
            veriview_ID = request.POST.get('_view')
            # print('proposalid',veriview_ID)
            return redirect('damgeFactor',proposalID=veriview_ID)
        if '_delete' in request.POST:
            veridelete_ID = request.POST.get('_delete')
            # veri.delete()
            return redirect('Verificationdelete', verifiID=veridelete_ID)
        if '_selectpro' in request.POST:
            veriselect_ID = request.POST.get('_selectpro')
            print(veriselect_ID)
            return redirect('proposaldetail', faciid=faciid, reportid=veriselect_ID)
        verisend = models.Verificationsend.objects.all()
        if (verisend.count() != 0):
            veri = models.Verification.objects.filter(facility=faciid)
            verisen = models.Verificationsend.objects.filter(facility=faciid)
            for x in verisen:
                datahis = {}
                print("co chuyen gi dang xay ra o day vay", x.id_rep)
                report_sent = models.Report_verification.objects.get(idreportsent= x.id_rep)
                datahis['id_rep'] = x.id_rep
                datahis['date'] = report_sent.date
                datahis['damage_factor'] = report_sent.damage_factor
                datahis['pof'] = report_sent.pof
                datahis['cof'] = report_sent.cof
                datahis['risk'] = report_sent.risk
                datahis['inspdudate'] = report_sent.inspdudate
                datahis['lastdudate'] = report_sent.lastdudate
                baocao.append(datahis)
        return render(request, 'ManagerUI/verification_requirments/VerificationContent.html',
                      {'veri': veri, 'faci': faci,'siteID':siteID ,'cont': cont, 'ct': ct, 'arr': array, 'data':data, 'baocao':baocao})
    except Exception as e:
        print('cai quan que gi v',e)
        return render(request, 'ManagerUI/verification_requirments/VerificationHome.html')

def Verificationdelete(request, verifiID):
    veri = models.Verification.objects.get(id=verifiID)
    veri.delete()
    return HttpResponse("Da Xoa")
def VerificationNumberFacilities(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    faci = models.Facility.objects.filter(siteid=siteid)
    faciid=models.Facility.objects.filter(siteid_id=siteid)
    counts=[]
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    # can bo sung cach dem
    for i in faci:
        veri=models.Verification.objects.filter(facility=i.facilityid)
        facilityname = {}
        facilityname['name']=i
        facilityname['count']=veri.count()
        # facilityname.append(i.facilityid)
        counts.append(facilityname)
        # print('facilitynamebefore', facilityname)
        # for i in veri:
            # for j in facilityname:
            #     if i.facility == j:
            #         count=veri.count()
            # print('count', count)
    return render(request, 'ManagerUI/verification_requirments/VerificationNumberFacilities.html', {'faci': faci , 'counts':counts,'countnoti': countnoti,'notiVerification':notiVerification})


def VerificationCheck(request, verifiID):
    veri = models.Verification.objects.get(id=verifiID)
    veri.Is_active = 1
    veri.save()
    return HttpResponse("Da Xem")


################ Citizen UI control ###################
def citizen_home(request):
    try:
        risk = []
        noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
        countnoti = noti.filter(state=0).count()
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
        com = models.Zbusiness.objects.all()
        for c in com:
            dataF = {}
            dataF['id'] = c.id
            dataF['namecompany'] = c.namecompany
            dataF['compainfor'] = c.compainfor
            us = models.ZUser.objects.get(id=c.userID_id)
            dataF['phone'] = us.phone
            dataF['email'] = us.email
            dataF['name'] = us.name
            dataF['add'] = us.adress
            si = models.Sites.objects.get(sitename=dataF['namecompany'])
            dataF['siteID'] = si.siteid
            risk.append(dataF)
    except Exception as e:
        print(e)
    return render(request, 'CitizenUI/CitizenHome.html',
                  {'info': request.session, 'count': count, 'risk': risk, 'noti': noti, 'countnoti': countnoti})


def ListfacilityCitizen(request, siteID):
    try:
        risk = []
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
        noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
        countnoti = noti.filter(state=0).count()
        site = models.Sites.objects.get(siteid=siteID)
        faci = models.Facility.objects.filter(siteid=siteID)
        si = models.Zbusiness.objects.get(namecompany=site.sitename)
        name = models.ZUser.objects.get(id=site.userID_id)
    except Exception as e:
        print(e)
    return render(request, 'CitizenUI/infor_facility.html',
                  {'page': 'inforCompany', 'info': request.session, 'site': site, 'faci': faci, 'si': si,
                   'count': count, 'name': name, 'noti': noti, 'countnoti': countnoti})


def ListProposalCitizen(request, facilityID, siteID):
    try:
        data = []
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
        noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
        countnoti = noti.filter(state=0).count()
        site = models.Sites.objects.get(siteid=siteID)
        faci = models.Facility.objects.filter(siteid=siteID)
        eq = models.EquipmentMaster.objects.filter(facilityid=facilityID)
        for eq in eq:
            com = models.ComponentMaster.objects.filter(equipmentid=eq.equipmentid)
            for com in com:
                # print(com.componentid)

                rwass = models.RwAssessment.objects.filter(componentid=com.componentid)
                comp = models.ComponentMaster.objects.get(componentid=com.componentid)
                equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
                tank = [12,13,14,15]
                # tank = [8, 9, 12, 13, 14, 15]
                for a in rwass:
                    df = models.RwFullPof.objects.filter(id=a.id)
                    fc = models.RwFullFcof.objects.filter(id=a.id)
                    dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
                    obj1 = {}
                    obj1['id'] = a.id
                    obj1['name'] = a.proposalname
                    obj1['lastinsp'] = a.assessmentdate.strftime('%Y-%m-%d')
                    if df.count() != 0:
                        obj1['df'] = round(df[0].totaldfap1, 2)
                        obj1['gff'] = df[0].gfftotal
                        obj1['fms'] = df[0].fms
                    else:
                        obj1['df'] = 0
                        obj1['gff'] = 0
                        obj1['fms'] = 0
                    if fc.count() != 0:
                        obj1['fc'] = round(fc[0].fcofvalue, 2)
                    else:
                        obj1['fc'] = 0
                    if dm.count() != 0:
                        obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
                    else:
                        obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                        # obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')
                        try:
                            obj1['lastinsp'] = a.commisstiondate.date().strftime('%Y-%m-%d')
                        except:
                            obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')
                    obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
                    data.append(obj1)
                pagidata = Paginator(data, 25)
                pagedata = request.GET.get('page', 1)
                try:
                    obj = pagidata.page(pagedata)
                except PageNotAnInteger:
                    obj = pagidata.page(1)
                except EmptyPage:
                    obj = pagedata.page(pagidata.num_pages)

                if comp.componenttypeid_id in tank:
                    istank = 1
                else:
                    istank = 0
                if comp.componenttypeid_id == 13:
                    isshell = 1
                else:
                    isshell = 0
    except Exception as e:
        print(e)
    return render(request, 'CitizenUI/ListProposalCitizen.html',
                  {'page': 'listProposal', 'info': request.session, 'site': site, 'faci': faci, 'obj': obj,
                   'noti': noti, 'countnoti': countnoti, 'count': count})


def RiskMatrixCitizen(request, proposalID):
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        locatAPI1 = {}
        locatAPI2 = {}
        locatAPI3 = {}
        locatAPI1['x'] = 0
        locatAPI1['y'] = 500

        locatAPI2['x'] = 0
        locatAPI2['y'] = 500

        locatAPI3['x'] = 0
        locatAPI3['y'] = 500

        df = models.RwFullPof.objects.get(id=proposalID)
        ca = models.RwFullFcof.objects.get(id=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0

        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        Ca = round(ca.fcofvalue, 2)
        DF1 = round(df.totaldfap1, 2)
        DF2 = round(df.totaldfap2, 2)
        DF3 = round(df.totaldfap3, 2)
    except:
        raise Http404
    return render(request, 'CitizenUI/risk_summary_Citizen/riskMatrix_Citizen.html',
                  {'page': 'riskMatrix', 'API1': location.locat(df.totaldfap1, ca.fcofvalue),
                   'API2': location.locat(df.totaldfap2, ca.fcofvalue),
                   'API3': location.locat(df.totaldfap3, ca.fcofvalue), 'DF1': DF1, 'DF2': DF2, 'DF3': DF3, 'ca': Ca,
                   'ass': rwAss, 'isTank': isTank, 'isShell': isShell, 'df': df, 'proposalID': proposalID,
                   'info': request.session,
                   'component': component, 'equip': equip, 'faci': faci, 'si': si, 'noti': noti, 'countnoti': countnoti,
                   'count': count})


def FullyDamageFactorCitizen(request, proposalID):
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        df = models.RwFullPof.objects.get(id=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        data = {}
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        data['thinningType'] = df.thinningtype
        data['gfftotal'] = df.gfftotal
        data['fms'] = df.fms
        data['thinningap1'] = roundData.roundDF(df.thinningap1)
        data['thinningap2'] = roundData.roundDF(df.thinningap2)
        data['thinningap3'] = roundData.roundDF(df.thinningap3)
        data['sccap1'] = roundData.roundDF(df.sccap1)
        data['sccap2'] = roundData.roundDF(df.sccap2)
        data['sccap3'] = roundData.roundDF(df.sccap3)
        data['externalap1'] = roundData.roundDF(df.externalap1)
        data['externalap2'] = roundData.roundDF(df.externalap2)
        data['externalap3'] = roundData.roundDF(df.externalap3)
        data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
        data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
        data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
        data['brittleap1'] = roundData.roundDF(df.brittleap1)
        data['brittleap2'] = roundData.roundDF(df.brittleap2)
        data['brittleap3'] = roundData.roundDF(df.brittleap3)
        data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
        data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
        data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
        data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
        data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
        data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
        data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
        data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
        data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)
        data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
        data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
        data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
        data['pofap1'] = roundData.roundPoF(df.pofap1)
        data['pofap2'] = roundData.roundPoF(df.pofap2)
        data['pofap3'] = roundData.roundPoF(df.pofap3)
        data['pofap1category'] = df.pofap1category
        data['pofap2category'] = df.pofap2category
        data['pofap3category'] = df.pofap3category
        if request.method == 'POST':
            df.thinningtype = request.POST.get('thinningType')
            df.save()
            ReCalculate.ReCalculate(proposalID, request)
            return redirect('damgeFactor', proposalID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'CitizenUI/risk_summary_Citizen/dfFull_Citizen.html',
                  {'page': 'damageFactor', 'obj': data, 'assess': rwAss, 'isTank': isTank,
                   'isShell': isShell, 'proposalID': proposalID, 'info': request.session,
                   'component': component, 'equip': equip, 'faci': faci, 'si': si, 'noti': noti, 'countnoti': countnoti,
                   'count': count})


def FullyConsequenceCitizen(request, proposalID):
    data = {}
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        if isBottom:
            bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
            data['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
            data['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
            data['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
            data['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
            data['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
            data['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
            data['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
            data['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
            data['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
            data['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
            data['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
            data['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
            data['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
            data['volume_ground_water_leak_d1'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d1)
            data['volume_ground_water_leak_d4'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d4)
            data['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
            data['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
            data['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
            data['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
            data['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
            data['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
            data['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
            data['material_factor'] = bottomConsequences.material_factor
            data['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
            data['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
            data['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
            data['consequencecategory'] = bottomConsequences.consequencecategory
            return render(request, 'CitizenUI/risk_summary_Citizen/fullyBottomConsequence_Citizen.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss,
                           'info': request.session, 'component': component,
                           'equip': equip, 'faci': faci, 'si': si, 'noti': noti, 'countnoti': countnoti,
                           'count': count})
        elif isShell:
            shellConsequences = models.RwCaTank.objects.get(id=proposalID)
            data['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
            data['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
            data['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
            data['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
            data['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
            data['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
            data['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
            data['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
            data['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
            data['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
            data['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
            data['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
            data['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
            data['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
            data['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
            data['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
            data['volume_ground_water_leak_d1'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d1)
            data['volume_ground_water_leak_d4'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d4)
            data['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
            data['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
            data['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
            data['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
            data['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
            data['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
            data['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
            data['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
            data['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
            data['consequence'] = roundData.roundMoney(shellConsequences.consequence)
            data['consequencecategory'] = shellConsequences.consequencecategory
            return render(request, 'CitizenUI/risk_summary_Citizen/fullyShellConsequence_Citizen.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss,
                           'info': request.session,
                           'component': component, 'equip': equip, 'faci': faci, 'si': si, 'noti': noti,
                           'countnoti': countnoti, 'count': count})
        else:
            ca = models.RwCaLevel1.objects.get(id=proposalID)
            inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
            data['production_cost'] = roundData.roundMoney(inputCa.production_cost)
            data['equipment_cost'] = roundData.roundMoney(inputCa.equipment_cost)
            data['personal_density'] = inputCa.personal_density
            data['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
            data['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
            data['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
            data['fc_cmd'] = roundData.roundMoney(ca.fc_cmd)
            data['fc_affa'] = roundData.roundMoney(ca.fc_affa)
            data['fc_prod'] = roundData.roundMoney(ca.fc_prod)
            data['fc_inj'] = roundData.roundMoney(ca.fc_inj)
            data['fc_envi'] = roundData.roundMoney(ca.fc_envi)
            data['fc_total'] = roundData.roundMoney(ca.fc_total)
            data['fcof_category'] = ca.fcof_category
            return render(request, 'CitizenUI/risk_summary_Citizen/fullyNormalConsequence_Citizen.html',
                          {'page': 'fullyConse', 'data': data, 'proposalID': proposalID, 'ass': rwAss,
                           'info': request.session,
                           'component': component, 'equip': equip, 'faci': faci, 'si': si, 'noti': noti,
                           'countnoti': countnoti, 'count': count})
    except:
        raise Http404


def RiskChartCitizen(request, proposalID):
    try:
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
        noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
        countnoti = noti.filter(state=0).count()
        rwAssessment = models.RwAssessment.objects.get(id=proposalID)
        component = models.ComponentMaster.objects.get(componentid=rwAssessment.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        rwFullpof = models.RwFullPof.objects.get(id=proposalID)
        rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
        risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
        chart = models.RwDataChart.objects.get(id=proposalID)
        assessmentDate = rwAssessment.assessmentdate
        dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                     chart.riskage6,
                     chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage9, chart.riskage10, chart.riskage11,
                     chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15]
        dataLabel = [date2Str.date2str(assessmentDate), date2Str.date2str(date2Str.dateFuture(assessmentDate, 1)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 2)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 3)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 4)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 5)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 6)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 7)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 8)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 9)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 10)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 11)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 12)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 13)),
                     date2Str.date2str(date2Str.dateFuture(assessmentDate, 14))]
        dataTarget = [chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget]
        endLabel = date2Str.date2str(date2Str.dateFuture(assessmentDate, 15))
        content = {'page': 'riskChart', 'label': dataLabel, 'data': dataChart, 'target': dataTarget,
                   'endLabel': endLabel, 'proposalname': rwAssessment.proposalname,
                   'proposalID': rwAssessment.id, 'componentID': rwAssessment.componentid_id, 'info': request.session,
                   'component': component, 'equip': equip, 'faci': faci, 'si': si, 'noti': noti, 'countnoti': countnoti,
                   'count': count}
        return render(request, 'CitizenUI/risk_summary_Citizen/riskChart_Citizen.html', content)
    except:
        raise Http404


###########connect thingsboard _____ sensor, gateway #############
def NewScada(request,componentID):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    comp = models.ComponentMaster.objects.get(componentid=componentID)
    equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
    faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
    site = models.Sites.objects.get(siteid=faci.siteid_id)

    scada_data = models.ZScada.objects.filter(Componentid=componentID)
    data = {}
    notify = {}
    if (scada_data.count() == 0):
        print("bang 0")
        if '_create' in request.POST:
            data['ScadaName'] = request.POST.get('ScadaName')
            data['filename'] = request.POST.get('filename')
            print(data['filename'])
            try:
                gc = gsp.service_account(filename='media//my-project-rbi-192cc68f784c.json')
                print('3')
                worksheet = gc.open(data['filename']).sheet1
                rows = worksheet.get_all_values()
                print(rows)
                pd.DataFrame.from_records(rows)

                a = models.ZScada(ScadaName=data['ScadaName'], FileName=data['filename'], SiteID_id=faci.siteid_id,
                                   Equipmentid_id=equip.equipmentid, Componentid_id=comp.componentid,
                                   Facilityid_id=faci.facilityid)
                a.save()
                notify['suscess'] = " Connection have been created successfully !"
            except Exception as e:
                print(e)
                notify['error'] = " Something is not right. Please check your file name and share name's file to 'cuong-270@my-project-rbicuong.iam.gserviceaccount.com' account!"

    else:
        list = []
        listData = []
        notify
        t=30
        if '_edit' in request.POST:
            scada_data_load = models.ZScada.objects.filter(Componentid=componentID)[0]
            ScadaName = request.POST.get('ScadaName')
            Filename = request.POST.get('filename')
            try:
                gc = gsp.service_account(filename='media//my-project-rbi-192cc68f784c.json')
                print('3')
                worksheet = gc.open(Filename).sheet1
                notify['suscess'] = " Connection have been created successfully !"
                scada_data_load.ScadaName = ScadaName
                scada_data_load.FileName = Filename
                scada_data_load.save()
            except Exception as e:
                print(e)
                notify['error'] = " Something is not right. Please check your file name and share name's file to 'cuong-270@my-project-rbicuong.iam.gserviceaccount.com' account!"
        if '_load' in request.POST:
            print("cuong")
        scada_data_load = models.ZScada.objects.filter(Componentid=componentID)[0]
        print(scada_data_load.FileName)
        gc = gsp.service_account(filename='media//my-project-rbi-192cc68f784c.json')
        print('3')
        worksheet1 = gc.open(scada_data_load.FileName).sheet1

        rows = worksheet1.get_all_values()
        for a in rows[0]:
            print(a)
            list.append(a)
        del rows[0]
        for a in rows:
            listData.append(a)
        pd.DataFrame.from_records(rows)
        return render(request, 'FacilityUI/proposal/LoadDataScada.html',
              {'page': 'loadscada', 'comp': comp, 'equip': equip, 'faci': faci,'t':t,'scada_data_load':scada_data_load,
                'componentID': componentID,'notify':notify,'rows':rows,'th':list,'listData':listData,
               'equipmentID': comp.equipmentid_id, 'info': request.session, 'noti': noti,
               'countnoti': countnoti, 'count': count})
    return render(request, 'FacilityUI/proposal/ScadaConnection.html',
                  {'page': 'scada', 'comp': comp, 'equip': equip, 'faci': faci,
                   'componentID': componentID, 'notify': notify,
                   'equipmentID': comp.equipmentid_id, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count})
def NewSensor(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    try:
        noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
        countnoti = noti.filter(state=0).count()
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        site = models.Sites.objects.get(siteid=faci.siteid_id)
        sensordata = models.ZSensor.objects.filter(Componentid=componentID)
        data = {}
        string = ''
        obj = {}
        value = {}
        t = 5
        ti_me=datetime.now()
        if (sensordata.count() == 0):
            if request.method == 'POST':
                # print(site.siteid)
                gateway = models.ZGateWay.objects.filter(siteid=site.siteid)
                if not gateway.count():
                    gateway = models.ZGateWay(Name="GATEWAY", siteid_id=site.siteid)
                    gateway.save()
                gateway = models.ZGateWay.objects.filter(siteid=site.siteid)[0].idgateway
                # print("2")
                data['sensorName'] = request.POST.get('sensorName')
                data['accessToken'] = request.POST.get('accessToken')
                a = models.ZSensor(Name=data['sensorName'], Token=data['accessToken'], Gatewayid_id=gateway,
                                   Equipmentid_id=equip.equipmentid, Componentid_id=comp.componentid,
                                   Facilityid_id=faci.facilityid)
                a.save()
            return render(request, 'FacilityUI/proposal/NewSensor.html',
                          {'comp': comp, 'equip': equip, 'faci': faci, 'page': 'newsensor', 'componentID': componentID,
                           'equipmentID': comp.equipmentid_id, 'info': request.session, 'noti': noti,
                           'countnoti': countnoti, 'count': count})
        else:
            packagedata = models.PackageSensor.objects.filter(idsensor=sensordata[0].idsensor)
            #obj={}
            if '_delete' in request.POST:
                for pac in packagedata:
                    if request.POST.get('%d' % pac.idpackage):
                        pac.delete()
                return redirect('newsensor', componentID=componentID)
            if '_new' in request.POST:
                # print("okok")
                try:
                    # print("1")
                    # thingsboard = subscribe_thingsboard.Subscribe_thingsboard(componentID)
                    # thingsboard.SUBTHINGSBOARD()
                    # print("1")
                    ACCESS_TOKEN = models.ZSensor.objects.filter(Componentid=componentID)[0].Token
                    # print(ACCESS_TOKEN)
                    # print("check------------")
                    headers = {
                        'Content-Type': 'application/json',
                        'X-Authorization': 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlbmwubGFiNDExQGdtYWlsLmNvbSIsInNjb3BlcyI6WyJURU5BTlRfQURNSU4iXSwidXNlcklkIjoiNzlkYjhhZTAtNmEyNy0xMWU4LTk2NjUtMTMyMDYzOTIxYjExIiwiZmlyc3ROYW1lIjoibGFiIiwibGFzdE5hbWUiOiI0MTEiLCJlbmFibGVkIjp0cnVlLCJwcml2YWN5UG9saWN5QWNjZXB0ZWQiOnRydWUsImlzUHVibGljIjpmYWxzZSwidGVuYW50SWQiOiI3OWQ2MGNhMC02YTI3LTExZTgtOTY2NS0xMzIwNjM5MjFiMTEiLCJjdXN0b21lcklkIjoiMTM4MTQwMDAtMWRkMi0xMWIyLTgwODAtODA4MDgwODA4MDgwIiwiaXNzIjoidGhpbmdzYm9hcmQuaW8iLCJpYXQiOjE2MjI5NjA4NTQsImV4cCI6MTYyNDc2MDg1NH0.-MucRxhTgkalcVpk6eJubuh7FztgqsKZKDHTOnTwEkoqBgm5j28H2YmKZuzO8XXAnM6TH-O8cNSgxoa5iQSOdA',
                    }
                    response = requests.get(
                        'http://demo.thingsboard.io/api/plugins/telemetry/DEVICE/' + ACCESS_TOKEN + '/values/timeseries?keys=',
                        headers=headers)
                    # print(response.json())
                    datajson = response.json()
                    print("hihi",datajson)
                    string = str(
                        'Temperature' + ', ' + datajson['Temperature'][0]['value'] + ', ' +
                        'Dust' + ', ' + datajson['Dust'][0]['value'] + ', ' +
                        'Cladding Thickness' + ', ' + datajson['Cladding Thickness'][0]['value'] + ', ' +
                        'Diameter' + ', ' + datajson['Diameter'][0]['value'])
                    sensor = models.ZSensor.objects.filter(Componentid=componentID)[0].idsensor
                    # print(sensor)
                    package = models.PackageSensor(idsensor_id=sensor, package=response.json(), content=string)
                    package.save()
                    print('cai con cac', string)
                    x = string.split(", ")
                    print(x)

                except Exception as e:
                    print(e)
                    print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
                    print("connect error")
                return redirect('newsensor', componentID=componentID)
            # hihi = models.PackageSensor.objects.latest('idpackage')

            # lastid=int(str(hihi)[22:-1])
            # print("huan hoa hong", lastid)
            # string=models.PackageSensor.objects.get(idpackage=lastid).content
            # print('cai con cac', string)
            ACCESS_TOKEN = models.ZSensor.objects.filter(Componentid=componentID)[0].Token
            # print(ACCESS_TOKEN)
            # print("check------------")
            try:
                headers = {
                    'Content-Type': 'application/json',
                    'X-Authorization': 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlbmwubGFiNDExQGdtYWlsLmNvbSIsInNjb3BlcyI6WyJURU5BTlRfQURNSU4iXSwidXNlcklkIjoiNzlkYjhhZTAtNmEyNy0xMWU4LTk2NjUtMTMyMDYzOTIxYjExIiwiZmlyc3ROYW1lIjoibGFiIiwibGFzdE5hbWUiOiI0MTEiLCJlbmFibGVkIjp0cnVlLCJwcml2YWN5UG9saWN5QWNjZXB0ZWQiOnRydWUsImlzUHVibGljIjpmYWxzZSwidGVuYW50SWQiOiI3OWQ2MGNhMC02YTI3LTExZTgtOTY2NS0xMzIwNjM5MjFiMTEiLCJjdXN0b21lcklkIjoiMTM4MTQwMDAtMWRkMi0xMWIyLTgwODAtODA4MDgwODA4MDgwIiwiaXNzIjoidGhpbmdzYm9hcmQuaW8iLCJpYXQiOjE2MjI5NjA4NTQsImV4cCI6MTYyNDc2MDg1NH0.-MucRxhTgkalcVpk6eJubuh7FztgqsKZKDHTOnTwEkoqBgm5j28H2YmKZuzO8XXAnM6TH-O8cNSgxoa5iQSOdA',
                }
                response = requests.get(
                    'http://demo.thingsboard.io/api/plugins/telemetry/DEVICE/' + ACCESS_TOKEN + '/values/timeseries?keys=',
                    headers=headers)
            except:
                return HttpResponse("Your token is expired, pleases refresh it to countinue connect sensor !")
            #print(response.json())
            datajson=response.json()
            print('khanh sky ', datajson)
            string = str(
                    'Temperature' + ', ' + datajson['Temperature'][0]['value'] + ', ' +
                    'Dust' + ', ' + datajson['Dust'][0]['value'] + ', ' +
                    'Cladding Thickness' + ', ' + datajson['Cladding Thickness'][0]['value'] + ', ' +
                    'Diameter' + ', ' + datajson['Diameter'][0]['value'])
            x = string.split(", ")
            obj['temp'] = x[0]
            obj['dust'] = x[2]
            obj['cthickness'] = x[4]
            obj['diameter'] = x[6]

            value['temp'] = x[1]
            value['dust'] = x[3]
            value['cthickness'] = x[5]
            value['diameter'] = x[7]
            print(obj)
            print(value)
            if '_viewchart' in request.POST:
                return redirect('sensorchart', componentID)
            return render(request, 'FacilityUI/proposal/SensorConnect.html',
                          {'sensorName': sensordata[0].Name, 'comp': comp, 'equip': equip, 'faci': faci,
                           'page': 'newsensor', 'componentID': componentID,
                           'equipmentID': comp.equipmentid_id, 'info': request.session, 'noti': noti,
                           'countnoti': countnoti, 'count': count, 'packagedata': packagedata, 'obj':obj, 'value':value, 't':t, 'time':ti_me})
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404


import json


def DataChart(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    # comp = models.ComponentMaster.objects.get(componentid=componentID)
    # equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
    # faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
    # site = models.Sites.objects.get(siteid=faci.siteid_id)
    sensordata = models.ZSensor.objects.filter(Componentid=componentID)
    packagedata = models.PackageSensor.objects.filter(idsensor=sensordata[0].idsensor)
    Dust = []
    temp = []
    cthickness = []
    diameter = []
    datetimes = []
    try:
        # ACCESS_TOKEN = models.ZSensor.objects.filter(Componentid=componentID)[0].Token
        # print(ACCESS_TOKEN)
        # headers = {
        #     'Content-Type': 'application/json',
        #     'X-Authorization': 'Bearer eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJlbmwuYzk0MTFAZ21haWwuY29tIiwic2NvcGVzIjpbIkNVU1RPTUVSX1VTRVIiXSwidXNlcklkIjoiOGM4MDYxYzAtYTc3Yi0xMWU4LWE4OTEtZTMwZDRkZGNiNGI2IiwiZmlyc3ROYW1lIjoiRW1iZWRkZWQgTmV0d29ya2luZyBMYWJvcmF0b3J5IiwiZW5hYmxlZCI6dHJ1ZSwicHJpdmFjeVBvbGljeUFjY2VwdGVkIjpmYWxzZSwiaXNQdWJsaWMiOmZhbHNlLCJ0ZW5hbnRJZCI6Ijc5ZDYwY2EwLTZhMjctMTFlOC05NjY1LTEzMjA2MzkyMWIxMSIsImN1c3RvbWVySWQiOiJiNmI2ZmM5MC1hNmJmLTExZTgtYTg5MS1lMzBkNGRkY2I0YjYiLCJpc3MiOiJ0aGluZ3Nib2FyZC5pbyIsImlhdCI6MTYwNzMzOTMwOCwiZXhwIjoxNjA5MTM5MzA4fQ.oJK9-ZP-L_rojMKYDX0DmqhX4opac1V6xJTgV4P-b0-8UO0agipEvCdfjDumS-gdw4uPLtA9HnAawA5Ivb5hDA',
        # }
        # response = requests.get(
        #     'http://demo.thingsboard.io/api/plugins/telemetry/DEVICE/' + ACCESS_TOKEN + '/values/timeseries?keys=',
        #     headers=headers)
        # print(response.json())
        # data = response.json()
        for da in packagedata:
            x=da.package
            data=eval(x)
            print(data)
            # print('hamlolphanhphach',data)
            Dust.append(data['Dust'][0]['value'])
            temp.append(data['Temperature'][0]['value'])
            cthickness.append(data['Cladding Thickness'][0]['value'])
            diameter.append(data['Diameter'][0]['value'])
            datetimes.append(packagedata.datetimes)
            # print('hihihaha', MaxOP)
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
    return render(request, 'FacilityUI/proposal/SensorChart.html',
                  {'sensorName': sensordata[0].Name, 'page': 'newsensor', 'componentID': componentID,
                   'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'temp': temp, 'Dust': Dust,
                   'cthickness': cthickness,'diameter':diameter, 'datetimes': datetimes})


# Đạt 18/08/2020
def ReportProposal(request, componentID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        rwass = models.RwAssessment.objects.filter(componentid=componentID)
        data = []
        comp = models.ComponentMaster.objects.get(componentid=componentID)
        equip = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id)
        faci = models.Facility.objects.get(facilityid=equip.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        tank = [12,13,14,15]
        # tank = [8, 9, 12, 13, 14, 15]
        for a in rwass:
            df = models.RwFullPof.objects.filter(id=a.id)
            fc = models.RwFullFcof.objects.filter(id=a.id)
            dm = models.RwDamageMechanism.objects.filter(id_dm=a.id)
            obj1 = {}
            obj1['id'] = a.id
            obj1['name'] = a.proposalname
            obj1['lastinsp'] = a.assessmentdate.strftime('%Y-%m-%d')
            if df.count() != 0:
                obj1['df'] = round(df[0].totaldfap1, 2)
                obj1['gff'] = df[0].gfftotal
                obj1['fms'] = df[0].fms
            else:
                obj1['df'] = 0
                obj1['gff'] = 0
                obj1['fms'] = 0
            if fc.count() != 0:
                obj1['fc'] = round(fc[0].fcofvalue, 2)
            else:
                obj1['fc'] = 0
            if dm.count() != 0:
                obj1['duedate'] = dm[0].inspduedate.date().strftime('%Y-%m-%d')
            else:
                obj1['duedate'] = (a.assessmentdate.date() + relativedelta(years=15)).strftime('%Y-%m-%d')
                obj1['lastinsp'] = equip.commissiondate.date().strftime('%Y-%m-%d')
            obj1['risk'] = round(obj1['df'] * obj1['gff'] * obj1['fms'] * obj1['fc'], 2)
            data.append(obj1)
        pagidata = Paginator(data, 25)
        pagedata = request.GET.get('page', 1)
        try:
            obj = pagidata.page(pagedata)
        except PageNotAnInteger:
            obj = pagidata.page(1)
        except EmptyPage:
            obj = pagedata.page(pagidata.num_pages)

        if comp.componenttypeid_id in tank:
            istank = 1
        else:
            istank = 0
        if comp.componenttypeid_id == 13:
            isshell = 1
        else:
            isshell = 0
    except:
        raise Http404
    return render(request, 'ManagerUI/Report_Proposal.html',
                  {'page': 'reportproposal', 'obj': obj, 'istank': istank, 'isshell': isshell,
                   'componentID': componentID,
                   'equipmentID': comp.equipmentid_id, 'comp': comp, 'equip': equip, 'faci': faci, 'si': si,
                   'count': count, 'noti': noti, 'countnoti': countnoti, 'info': request.session})


def base_report(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    try:
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
    except:
        Http404
    return render(request, 'BaseUI/BaseWeb/basedat.html', {'siteID': siteID, 'count': count})


# def mitigation(request):
#     noti = models.ZNotification.objects.all().filter(id_user=request.session['id'])
#     countnoti = noti.filter(state=0).count()
#     count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
#                                           Q(Is_see=0)).count()
#     return render(request, 'FacilityUI/risk_summary/mitigation.html', {'page': 'mitigation'})

def ReportMana(request):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    # print(siteID)
    try:
        risk = []
        data = models.Sites.objects.all()
        for a in data:
            dataF = {}
            dataF['ID'] = a.siteid
            dataF['CreatedTime'] = a.create
            dataF['SiteName'] = a.sitename
            risk.append(dataF)
        pagiFaci = Paginator(risk, 25)
        pageFaci = request.GET.get('page', 1)
        try:
            users = pagiFaci.page(pageFaci)
        except PageNotAnInteger:
            users = pagiFaci.page(1)
        except EmptyPage:
            users = pageFaci.page(pagiFaci.num_pages)
        list = []
        # print("hjxhjx")
        if '_viewdetail' in request.POST:
            # print("ccacscsa")
            for a in data:
                if (request.POST.get('%d' % a.siteid)):
                    dataA = {}
                    dataA['ID'] = a.siteid
                    dataA['Name'] = a.sitename
                    list.append(dataA)
                    # print(list)
            return redirect('facilitiesEdit', a.siteid)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'ManagerUI/Report_Mana.html',
                  {'page': 'reportmana', 'obj': users, 'list': list, 'data': dataF, 'count': count, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session})


def ReportFacilities(request, siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        risk = []
        si = models.Sites.objects.get(siteid=siteID)
        data = models.Facility.objects.filter(siteid=siteID)
        for a in data:
            dataF = {}
            risTarget = models.FacilityRiskTarget.objects.get(facilityid=a.facilityid)
            dataF['ID'] = a.facilityid
            dataF['CreatedTime'] = a.create
            dataF['FacilitiName'] = a.facilityname
            dataF['ManagementFactor'] = a.managementfactor
            dataF['RiskTarget'] = risTarget.risktarget_fc
            risk.append(dataF)

        pagiFaci = Paginator(risk, 25)
        pageFaci = request.GET.get('page', 1)
        try:
            users = pagiFaci.page(pageFaci)
        except PageNotAnInteger:
            users = pagiFaci.page(1)
        except EmptyPage:
            users = pageFaci.page(pagiFaci.num_pages)
    except:
        raise Http404
    return render(request, 'ManagerUI/Report_Facilities.html',
                  {'page': 'reportfacilities', 'obj': users, 'siteID': siteID, 'count': count, 'si': si, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session})


def ReportEquipment(request, facilityID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        faci = models.Facility.objects.get(facilityid=facilityID)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        data = models.EquipmentMaster.objects.filter(facilityid=facilityID)
        pagiEquip = Paginator(data, 25)
        pageEquip = request.GET.get('page', 1)
        try:
            obj = pagiEquip.page(pageEquip)
        except PageNotAnInteger:
            obj = pagiEquip.page(1)
        except EmptyPage:
            obj = pageEquip.page(pagiEquip.num_pages)
    except:
        raise Http404
    return render(request, 'ManagerUI/Report_Equipment.html',
                  {'page': 'reportequipment', 'obj': obj, 'facilityID': facilityID, 'faci': faci, 'si': si,
                   'count': count, 'noti': noti, 'countnoti': countnoti, 'info': request.session})


def ReportComponent(request, equipmentID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        eq = models.EquipmentMaster.objects.get(equipmentid=equipmentID)
        faci = models.Facility.objects.get(facilityid=eq.facilityid_id)
        si = models.Sites.objects.get(siteid=faci.siteid_id)
        data = models.ComponentMaster.objects.filter(equipmentid=equipmentID)
        pagiComp = Paginator(data, 25)
        pageComp = request.GET.get('page', 1)
        try:
            obj = pagiComp.page(pageComp)
        except PageNotAnInteger:
            obj = pagiComp.page(1)
        except EmptyPage:
            obj = pageComp.page(pagiComp.num_pages)
    except:
        raise Http404
    return render(request, 'ManagerUI/Report_Component.html',
                  {'page': 'reportcomponent', 'obj': obj, 'equipmentID': equipmentID, 'facilityID': eq.facilityid_id,
                   'eq': eq, 'faci': faci, 'si': si, 'count': count, 'noti': noti, 'countnoti': countnoti,
                   'info': request.session})
def Mitigation(request,siteID):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    return render(request, 'ManagerUI/Mitigation.html',
                  {'page': 'mitigation','siteID': siteID, 'count': count, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session})

def MitigationSite(request,siteID):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    print(siteID)
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()

    # countnoti = noti.filter(state=0).count()
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()
    # tank = [8, 9, 12, 13, 14, 15]
    tank = [12,13,14,15]
    RecommendProposalTank = []
    RecommendProposalNormal = []
    APINormal = []
    APITank = []
    rwComponent = models.ComponentMaster.objects.all()
    rwdamAll = models.RwDamageMechanism.objects.all()
    rwassessment = models.RwAssessment.objects.all()
    datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
    for a in rwdamAll:
        array = a.id_dm_id
        datarw.append(array)
    for a in rwComponent:
        # print("let go")
        data = []
        datamax = []
        if a.componenttypeid_id in tank:
            rwAsessmentT = models.RwAssessment.objects.filter(componentid_id=a.componentid)
            if rwAsessmentT.count() == 1:
                R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
                RecommendProposalTank.append(R1.id)
            elif rwAsessmentT.count() > 1:
                for b in rwAsessmentT:
                    if b.assessmentdate:
                        obj = {}
                        obj['assessmentdate'] = b.assessmentdate.timestamp()
                        obj['IDProposal'] = b.id
                        data.append(obj)
                        datamax.append(b.assessmentdate.timestamp())
                M = max(datamax)
                i = datamax.index(M)
                RecommendProposalTank.append(data[i]['IDProposal'])
        else:
            rwAsessmentN = models.RwAssessment.objects.filter(componentid_id=a.componentid)
            if rwAsessmentN.count() == 1:
                R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
                RecommendProposalNormal.append(R1.id)
            elif rwAsessmentN.count() > 1:
                for b in rwAsessmentN:
                    if b.assessmentdate:
                        obj = {}
                        obj['assessmentdate'] = b.assessmentdate.timestamp()
                        obj['IDProposal'] = b.id
                        data.append(obj)
                        datamax.append(b.assessmentdate.timestamp())
                M = max(datamax)
                i = datamax.index(M)
                RecommendProposalNormal.append(data[i]['IDProposal'])
    count = 1
    for nor in RecommendProposalNormal:
        rwasessmentN = models.RwAssessment.objects.get(id=nor)
        equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
        component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
        equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
        comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
        faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
        site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
        df = models.RwFullPof.objects.filter(id=nor)
        ca = models.RwFullFcof.objects.filter(id=nor)
        if site.siteid == siteID:
            if df.count() > 0 and ca.count() > 0:
                df = models.RwFullPof.objects.get(id=nor)
                ca = models.RwFullFcof.objects.get(id=nor)
                obj = {}
                obj['Count'] = count
                obj['ID'] = nor
                obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                obj['ComponentNumber'] = component.componentnumber
                obj['EquipmentNumber'] = equipmaster.equipmentnumber
                obj['Facility'] = faci.facilityname
                obj['Site'] = site.sitename
                obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                obj['RLI'] = df.rli
                obj['AssessmentName'] = rwasessmentN.proposalname
                obj['AssessmentDate'] = rwasessmentN.assessmentdate
                obj['CommissionDate'] = equipmaster.commissiondate
                obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                obj['EquipmentType'] = equiptype.equipmenttypename
                obj['ComponentType'] = comptype.componenttypename
                if (nor in datarw):
                    rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                    obj['InspectionDueDate'] = rwdam.inspduedate
                else:
                    obj['InspectionDueDate'] = "None"
                APINormal.append(obj)
                count = count + 1
    countT = 1
    for nor in RecommendProposalTank:
        rwasessmentN = models.RwAssessment.objects.get(id=nor)
        equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
        component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
        equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
        comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
        faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
        site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
        df = models.RwFullPof.objects.filter(id=nor)
        ca = models.RwFullFcof.objects.filter(id=nor)
        if site.siteid == siteID:
            if df.count() > 0 and ca.count() > 0:
                df = models.RwFullPof.objects.get(id=nor)
                ca = models.RwFullFcof.objects.get(id=nor)
                obj = {}
                obj['Count'] = countT
                obj['ID'] = nor
                obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
                obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
                obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
                obj['ComponentNumber'] = component.componentnumber
                obj['EquipmentNumber'] = equipmaster.equipmentnumber
                obj['Facility'] = faci.facilityname
                obj['Site'] = site.sitename
                obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
                obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
                obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
                obj['RLI'] = df.rli
                obj['AssessmentName'] = rwasessmentN.proposalname
                obj['AssessmentDate'] = rwasessmentN.assessmentdate
                obj['CommissionDate'] = equipmaster.commissiondate
                obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
                obj['EquipmentType'] = equiptype.equipmenttypename
                obj['ComponentType'] = comptype.componenttypename
                if (nor in datarw):
                    rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                    obj['InspectionDueDate'] = rwdam.inspduedate
                else:
                    obj['InspectionDueDate'] = "None"
                APITank.append(obj)
                countT = countT + 1
    try:
        # if 'analysis' in request.POST:
        #         #     print("gogo")
        if '_detail' in request.POST:
            for a in rwassessment:
                if request.POST.get('%d' % a.id):
                    return redirect('damgeFactor', proposalID=a.id)
        if '_refresh' in request.POST:
            return redirect('mitigationSite', siteID=siteID)
        if '_mitigation' in request.POST:
            for a in rwassessment:
                if request.POST.get('%d' % a.id):
                    return redirect('mitigationdetail', x1=siteID,x2=a.id)

    except Exception as e:
        print(e)
    siteID = encrypt(str(siteID))
    return render(request, 'FacilityUI/mitigation/mitigationSite.html',
                  {'page': 'mitigation','siteID':siteID,'APINormal':APINormal,'APITank':APITank, 'count': count, 'noti': noti,
                   'countnoti': countnoti, 'info': request.session, 'countnoti': countnoti,'notiVerification':notiVerification})
def MitigationDetailV2(request,x1,x2):
    try:

        a = models.RwAssessment.objects.get(id = x2)
        proposalID = a.id
        medthod = []
        valueMethod = []
        selection = []
        nameParameter = []
        pof_change = []
        cof_change = []
        value_change = []
        arr_pof_now = []
        arr_cof_now = []
        value_now = []
        comp = models.ComponentMaster.objects.get(componentid=a.componentid_id)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        EquipmentType = models.EquipmentType.objects.get(
            equipmenttypeid=models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
        rwstream = models.RwStream.objects.get(id=proposalID)
        pof_now = round(models.RwFullPof.objects.get(id=proposalID).pofap1,3)
        if (EquipmentType == 'Tank'):
            cof_value_now = round(models.RwCaTank.objects.get(id=proposalID).consequence,3)
            risk = round(models.RwFullPof.objects.get(id=proposalID).pofap1 * models.RwCaTank.objects.get(
                id=proposalID).consequence,3)
        else:
            cof_value_now = round(models.RwFullFcof.objects.get(id=proposalID).fcofvalue,3)
            risk = round(models.RwFullPof.objects.get(id=proposalID).pofap1 * models.RwFullFcof.objects.get(
                id=proposalID).fcofvalue,3)
        obj = mitigation.AllDamageFactor(proposalID)
        if obj['dataNominalThicknessY2'][0] < risk:
            valueMethod.append(obj['dataNominalThicknessY2'][0])
            pof_change.append(obj['dataNominalThicknessY1'][0])
            selection.append('Reduction')
            nameParameter.append('Nominal Thickness')
            value_change.append(obj['dataNominalThicknessX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.nominalthickness)
        elif risk > obj['dataNominalThicknessY2'][
            len(obj['dataNominalThicknessY2']) - 1]:
            valueMethod.append(obj['dataNominalThicknessY2'][len(obj['dataNominalThicknessY2']) - 1])
            pof_change.append(obj['dataNominalThicknessY1'][len(obj['dataNominalThicknessY1']) - 1])
            selection.append('Increase')
            nameParameter.append('Nominal Thickness (mm)')
            value_change.append(obj['dataNominalThicknessX'][len(obj['dataNominalThicknessX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.nominalthickness)

        if obj['dataCurentThicknessY2'][0] < risk:
            valueMethod.append(obj['dataCurentThicknessY2'][0])
            pof_change.append(obj['dataCurentThicknessY1'][0])
            selection.append('Reduction')
            nameParameter.append('Minimum Measured Thickness (mm)')
            value_change.append(obj['dataCurentThicknessX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.currentthickness)


        elif risk > obj['dataCurentThicknessY2'][
            len(obj['dataCurentThicknessY2']) - 1]:
            valueMethod.append(obj['dataCurentThicknessY2'][len(obj['dataCurentThicknessY2']) - 1])
            pof_change.append(obj['dataCurentThicknessY1'][len(obj['dataCurentThicknessY1']) - 1])
            selection.append('Increase')
            nameParameter.append('Minimum Measured Thickness (mm)')
            value_change.append(obj['dataCurentThicknessX'][len(obj['dataCurentThicknessX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.currentthickness)


        if obj['dataCorrosionRateY2'][0] < risk:
            valueMethod.append(obj['dataCorrosionRateY2'][0])
            pof_change.append(obj['dataCorrosionRateY1'][0])
            selection.append('Reduction')
            nameParameter.append('Current Corrosion Rate (mm/yr)')
            value_change.append(obj['dataCorrosionRateX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.currentcorrosionrate)


        elif risk > obj['dataCorrosionRateY2'][
            len(obj['dataCorrosionRateY2']) - 1]:
            valueMethod.append(obj['dataCorrosionRateY2'][len(obj['dataCorrosionRateY2']) - 1])
            pof_change.append(obj['dataCorrosionRateY1'][len(obj['dataCorrosionRateY1']) - 1])
            selection.append('Increase')
            nameParameter.append('Current Corrosion Rate (mm/yr)')
            value_change.append(obj['dataCorrosionRateX'][len(obj['dataCorrosionRateX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.currentcorrosionrate)

        if obj['dataMinimunRequiredThicknessY2'][0] < risk:
            valueMethod.append(obj['dataMinimunRequiredThicknessY2'][0])
            pof_change.append(obj['dataMinimunRequiredThicknessY1'][0])
            selection.append('Reduction')
            nameParameter.append('Minimum Required Thickness (mm)')
            value_change.append(obj['dataMinimunRequiredThicknessX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.minreqthickness)


        elif risk > obj['dataMinimunRequiredThicknessY2'][
            len(obj['dataMinimunRequiredThicknessY2']) - 1]:
            valueMethod.append(
                obj['dataMinimunRequiredThicknessY2'][len(obj['dataMinimunRequiredThicknessY2']) - 1])
            pof_change.append(
                obj['dataMinimunRequiredThicknessY1'][len(obj['dataMinimunRequiredThicknessY1']) - 1])
            selection.append('Increase')
            nameParameter.append('Minimum Required Thickness (mm)')
            value_change.append(obj['dataMinimunRequiredThicknessX'][len(obj['dataMinimunRequiredThicknessX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwcomponent.minreqthickness)

        if obj['dataCO3Y2'][0] < risk:
            valueMethod.append(obj['dataCO3Y2'][0])
            pof_change.append(obj['dataCO3Y1'][0])
            selection.append('Reduction')
            nameParameter.append('CO3 Concentration in Water (ppm)')
            value_change.append(obj['dataCO3X'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.co3concentration)


        elif risk > obj['dataCO3Y2'][
            len(obj['dataCO3Y2']) - 1]:
            valueMethod.append(obj['dataCO3Y2'][len(obj['dataCO3Y2']) - 1])
            pof_change.append(obj['dataCO3Y1'][len(obj['dataCO3Y1']) - 1])
            selection.append('Increase')
            nameParameter.append('CO3 Concentration in Water (ppm)')
            value_change.append(obj['dataCO3X'][len(obj['dataCO3X']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.co3concentration)

        if obj['dataphY2'][0] < risk:
            valueMethod.append(obj['dataphY2'][0])
            pof_change.append(obj['dataphY1'][0])
            selection.append('Reduction')
            nameParameter.append('pH of Water')
            value_change.append(obj['dataphX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.waterph)


        elif risk > obj['dataphY2'][
            len(obj['dataphY2']) - 1]:
            valueMethod.append(obj['dataphY2'][len(obj['dataphY2']) - 1])
            pof_change.append(obj['dataphY1'][len(obj['dataphY1']) - 1])
            selection.append('Increase')
            nameParameter.append('pH of Water')
            value_change.append(obj['dataphX'][len(obj['dataphX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.waterph)

        if obj['dataMAX_OP_TEMPY2'][0] < risk:
            valueMethod.append(obj['dataMAX_OP_TEMPY2'][0])
            pof_change.append(obj['dataMAX_OP_TEMPY1'][0])
            selection.append('Reduction')
            nameParameter.append('Maximum Operating Temperature (Celsius)')
            value_change.append(obj['dataMAX_OP_TEMPX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.maxoperatingtemperature)


        elif risk > obj['dataMAX_OP_TEMPY2'][
            len(obj['dataMAX_OP_TEMPY2']) - 1]:
            valueMethod.append(obj['dataMAX_OP_TEMPY2'][len(obj['dataMAX_OP_TEMPY2']) - 1])
            pof_change.append(obj['dataMAX_OP_TEMPY1'][len(obj['dataMAX_OP_TEMPY1']) - 1])
            selection.append('Increase')
            nameParameter.append('Maximum Operating Temperature (Celsius)')
            value_change.append(obj['dataMAX_OP_TEMPX'][len(obj['dataMAX_OP_TEMPX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.maxoperatingtemperature)

        if obj['dataNaOHConcentrationY2'][0] < risk:
            valueMethod.append(obj['dataNaOHConcentrationY2'][0])
            pof_change.append(obj['dataNaOHConcentrationY1'][0])
            selection.append('Reduction')
            nameParameter.append('NaOH Concentration (%)')
            value_change.append(obj['dataNaOHConcentrationX'][0])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.naohconcentration)


        elif risk > obj['dataNaOHConcentrationY2'][
            len(obj['dataNaOHConcentrationY2']) - 1]:
            valueMethod.append(obj['dataNaOHConcentrationY2'][len(obj['dataNaOHConcentrationY2']) - 1])
            pof_change.append(obj['dataNaOHConcentrationY1'][len(obj['dataNaOHConcentrationY1']) - 1])
            selection.append('Increase')
            nameParameter.append('NaOH Concentration (%)')
            value_change.append(obj['dataNaOHConcentrationX'][len(obj['dataNaOHConcentrationX']) - 1])
            cof_change.append(cof_value_now)
            arr_pof_now.append(pof_now)
            arr_cof_now.append(cof_value_now)
            value_now.append(rwstream.naohconcentration)

        # if obj['dataCRACK_PRESENTY2'][0] < risk:
        #     valueMethod.append(obj['dataCRACK_PRESENTY2'][0])
        #     pof_change.append(obj['dataCRACK_PRESENTY1'][0])
        #     selection.append('Reduction')
        #     nameParameter.append('Presence of Cracks')
        #     value_change.append(obj['dataCRACK_PRESENTX'][0])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(bool(rwcomponent.crackspresent))


        # elif risk > obj['dataCRACK_PRESENTY2'][
        #     len(obj['dataCRACK_PRESENTY2']) - 1]:
        #     valueMethod.append(obj['dataCRACK_PRESENTY2'][len(obj['dataCRACK_PRESENTY2']) - 1])
        #     pof_change.append(obj['dataCRACK_PRESENTY1'][len(obj['dataCRACK_PRESENTY1']) - 1])
        #     selection.append('Increase')
        #     nameParameter.append('Presence of Cracks')
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_change.append(obj['dataCRACK_PRESENTX'][len(obj['dataCRACK_PRESENTX']) - 1])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(bool(rwcomponent.crackspresent))

        # if obj['dataHEAT_TRACEY2'][0] < risk:
        #     valueMethod.append(obj['dataHEAT_TRACEY2'][0])
        #     pof_change.append(obj['dataHEAT_TRACEY1'][0])
        #     selection.append('Reduction')
        #     nameParameter.append('Heat Traced')
        #     value_change.append(obj['dataHEAT_TRACEX'][0])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(bool(rwequipment.heattraced))


        # elif risk > obj['dataHEAT_TRACEY2'][
        #     len(obj['dataHEAT_TRACEY2']) - 1]:
        #     valueMethod.append(obj['dataHEAT_TRACEY2'][len(obj['dataHEAT_TRACEY2']) - 1])
        #     pof_change.append(obj['dataHEAT_TRACEY1'][len(obj['dataHEAT_TRACEY1']) - 1])
        #     selection.append('Increase')
        #     nameParameter.append('Heat Traced')
        #     value_change.append(obj['dataHEAT_TRACEX'][len(obj['dataHEAT_TRACEX']) - 1])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(bool(rwequipment.heattraced))

        # if obj['dataAMINE_SOLUTIONY2'][0] < risk:
        #     valueMethod.append(obj['dataAMINE_SOLUTIONY2'][0])
        #     pof_change.append(obj['dataAMINE_SOLUTIONY1'][0])
        #     selection.append('Reduction')
        #     nameParameter.append('Amine Solution Composition')
        #     value_change.append(obj['dataAMINE_SOLUTIONX'][0])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(rwstream.aminesolution)


        # elif risk > obj['dataAMINE_SOLUTIONY2'][
        #     len(obj['dataAMINE_SOLUTIONY2']) - 1]:
        #     valueMethod.append(obj['dataAMINE_SOLUTIONY2'][len(obj['dataAMINE_SOLUTIONY2']) - 1])
        #     pof_change.append(obj['dataAMINE_SOLUTIONY1'][len(obj['dataAMINE_SOLUTIONY1']) - 1])
        #     selection.append('Increase')
        #     nameParameter.append('Amine Solution Composition')
        #     value_change.append(obj['dataAMINE_SOLUTIONX'][len(obj['dataAMINE_SOLUTIONX']) - 1])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(rwstream.aminesolution)

        # if obj['dataAMINE_EXPOSEDY2'][0] < risk:
        #     valueMethod.append(obj['dataAMINE_EXPOSEDY2'][0])
        #     pof_change.append(obj['dataAMINE_EXPOSEDY1'][0])
        #     selection.append('Reduction')
        #     nameParameter.append('Exposure to Anime')
        #     value_change.append(obj['dataAMINE_EXPOSEDX'][0])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(bool(rwstream.exposedtogasamine))


        # elif risk > obj['dataAMINE_EXPOSEDY2'][
        #     len(obj['dataAMINE_EXPOSEDY2']) - 1]:
        #     valueMethod.append(obj['dataAMINE_EXPOSEDY2'][len(obj['dataAMINE_EXPOSEDY2']) - 1])
        #     pof_change.append(obj['dataAMINE_EXPOSEDY1'][len(obj['dataAMINE_EXPOSEDY1']) - 1])
        #     selection.append('Increase')
        #     nameParameter.append('Exposure to Anime')
        #     value_change.append(obj['dataAMINE_EXPOSEDX'][len(obj['dataAMINE_EXPOSEDX']) - 1])
        #     cof_change.append(cof_value_now)
        #     arr_pof_now.append(pof_now)
        #     arr_cof_now.append(cof_value_now)
        #     value_now.append(bool(rwstream.exposedtogasamine))
        objPoF = obj
        # cof
        if comp.componenttypeid_id == 12 or comp.componenttypeid_id == 13 or comp.componenttypeid_id == 14 or comp.componenttypeid_id == 15:
            if comp.componenttypeid_id == 13:  # shell
                obj = mitigation.FinancialShellCoF(proposalID)
                kind = 0
                rwFullCofTank = models.RWFullCofTank.objects.filter(id=proposalID)

                if obj['data_PROCESS_UNIT_Y1'][0] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.equipcost)
                    valueMethod.append(obj['data_PROCESS_UNIT_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append('Process unit replacement costs for component ($/m^2)')
                    value_change.append(obj['data_PROCESS_UNIT_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_PROCESS_UNIT_Y1'][len(obj['data_PROCESS_UNIT_Y1']) - 1] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.equipcost)
                    valueMethod.append(obj['data_PROCESS_UNIT_Y1'][len(obj['data_PROCESS_UNIT_Y1']) - 1])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][len(obj['data_PROCESS_UNIT_Y1']) - 1])
                    selection.append('Increase')
                    nameParameter.append('Process unit replacement costs for component ($/m^2)')
                    value_change.append(obj['data_PROCESS_UNIT_X'][len(obj['data_PROCESS_UNIT_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                if obj['data_OUTAGE_MULTIPLIER_Y1'][0] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.equipoutagemultiplier)
                    valueMethod.append(obj['data_OUTAGE_MULTIPLIER_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append('Equipment Outtage Multiplier')
                    value_change.append(obj['data_OUTAGE_MULTIPLIER_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_OUTAGE_MULTIPLIER_Y1'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.equipoutagemultiplier)
                    valueMethod.append(
                        obj['data_OUTAGE_MULTIPLIER_Y1'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1])
                    pof_change.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                    cof_change.append(
                        obj['data_PROCESS_UNIT_Y0'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1])
                    selection.append('Increase')
                    nameParameter.append('Equipment Outtage Multiplier')
                    value_change.append(
                        obj['data_OUTAGE_MULTIPLIER_X'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                if obj['data_PRODUCTION_COST_Y1'][0] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.prodcost)
                    valueMethod.append(obj['data_PRODUCTION_COST_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append('Loss of Production Cost, $/day')
                    value_change.append(obj['data_PRODUCTION_COST_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_PRODUCTION_COST_Y1'][len(obj['data_PRODUCTION_COST_Y1']) - 1] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.prodcost)
                    valueMethod.append(
                        obj['data_PRODUCTION_COST_Y1'][len(obj['data_PRODUCTION_COST_Y1']) - 1])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][len(obj['data_PRODUCTION_COST_Y1']) - 1])
                    selection.append('Increase')
                    nameParameter.append('Loss of Production Cost, $/day')
                    value_change.append(
                        obj['data_PRODUCTION_COST_X'][len(obj['data_PRODUCTION_COST_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                if obj['data_PERONAL_DENSITY_Y1'][0] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.popdens)
                    valueMethod.append(obj['data_PERONAL_DENSITY_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append(
                        'The unit Population Density of Personnel or Employees, personal/m')
                    value_change.append(obj['data_PERONAL_DENSITY_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_PERONAL_DENSITY_Y1'][len(obj['data_PERONAL_DENSITY_Y1']) - 1] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.popdens)
                    valueMethod.append(
                        obj['data_PERONAL_DENSITY_Y1'][len(obj['data_PERONAL_DENSITY_Y1']) - 1])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_PROCESS_UNIT_Y0'][len(obj['data_PERONAL_DENSITY_Y1']) - 1])
                    selection.append('Increase')
                    nameParameter.append(
                        'The unit Population Density of Personnel or Employees, personal/m')
                    value_change.append(
                        obj['data_PERONAL_DENSITY_X'][len(obj['data_PERONAL_DENSITY_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                if obj['data_INJURE_COST_Y1'][0] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.injcost)
                    valueMethod.append(obj['data_INJURE_COST_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_INJURE_COST_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append(
                        'The cost associated with serious injury of fatality of personnel, $')
                    value_change.append(obj['data_INJURE_COST_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_INJURE_COST_Y1'][len(obj['data_INJURE_COST_Y1']) - 1] < risk:
                    if rwFullCofTank.count() == 0:
                        value_now.append(0)
                    else:
                        rwFullCofTank = models.RWFullCofTank.objects.get(id=proposalID)
                        value_now.append(rwFullCofTank.injcost)
                    valueMethod.append(obj['data_INJURE_COST_Y1'][len(obj['data_INJURE_COST_Y1']) - 1])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_INJURE_COST_Y0'][len(obj['data_INJURE_COST_Y1']) - 1])
                    selection.append('Increase')
                    nameParameter.append(
                        'The cost associated with serious injury of fatality of personnel, $')
                    value_change.append(obj['data_INJURE_COST_X'][len(obj['data_INJURE_COST_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)


            else:
                kind = 1
                rwinputca = models.RwInputCaTank.objects.get(id=proposalID)
                rwcomponent = models.RwComponent.objects.get(id=proposalID)

                value_now.append(rwcomponent.nominaldiameter)
                obj = mitigation.FinancialTankBottomCoF(proposalID)
                if obj['data_COST_LOSS_Y1'][0] < risk:
                    value_now.append(rwinputca.productioncost)
                    valueMethod.append(obj['data_COST_LOSS_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_COST_LOSS_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append('Cost of Production loss')
                    value_change.append(obj['data_COST_LOSS_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_COST_LOSS_Y1'][len(obj['data_COST_LOSS_Y1']) - 1] < risk:
                    value_now.append(rwinputca.productioncost)
                    valueMethod.append(obj['data_COST_LOSS_Y1'][[len(obj['data_COST_LOSS_Y1']) - 1]])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_COST_LOSS_Y0'][[len(obj['data_COST_LOSS_Y1']) - 1]])
                    selection.append('Increase')
                    nameParameter.append('Cost of Production loss')
                    value_change.append(obj['data_COST_LOSS_X'][len(obj['data_COST_LOSS_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                if obj['data_Nominal_Diameter_Y1'][0] < risk:
                    value_now.append(rwcomponent.nominaldiameter)
                    valueMethod.append(obj['data_Nominal_Diameter_Y1'][0])
                    pof_change.append(pof_now)
                    cof_change.append(obj['data_Nominal_Diameter_Y0'][0])
                    selection.append('Reduction')
                    nameParameter.append('Nominal Diameter (mm)')
                    value_change.append(obj['data_Nominal_Diameter_X'][0])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)
                elif obj['data_Nominal_Diameter_Y1'][len(obj['data_Nominal_Diameter_Y1']) - 1] < risk:
                    value_now.append(rwcomponent.nominaldiameter)
                    valueMethod.append(
                        obj['data_Nominal_Diameter_Y1'][len(obj['data_Nominal_Diameter_Y1']) - 1])
                    pof_change.append(pof_now)
                    cof_change.append(
                        obj['data_Nominal_Diameter_Y0'][len(obj['data_Nominal_Diameter_Y1']) - 1])
                    selection.append('Increase')
                    nameParameter.append('Nominal Diameter (mm)')
                    value_change.append(
                        obj['data_Nominal_Diameter_X'][len(obj['data_Nominal_Diameter_Y1']) - 1])
                    arr_pof_now.append(pof_now)
                    arr_cof_now.append(cof_value_now)


        else:
            kind = 2
            rwinputca = models.RwInputCaLevel1.objects.get(id=proposalID)

            obj = mitigation.FinancialNomalCoF(proposalID)
            if obj['data_PROCESS_UNIT_Y1'][0] < risk:
                value_now.append(rwinputca.process_unit)
                valueMethod.append(obj['data_PROCESS_UNIT_Y1'][0])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                selection.append('Reduction')
                nameParameter.append('Process unit replacement costs for component ($/m^2)')
                value_change.append(obj['data_PROCESS_UNIT_X'][0])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            elif obj['data_PROCESS_UNIT_Y1'][len(obj['data_PROCESS_UNIT_Y1']) - 1] < risk:
                value_now.append(rwinputca.process_unit)
                valueMethod.append(obj['data_PROCESS_UNIT_Y1'][len(obj['data_PROCESS_UNIT_Y1']) - 1])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][len(obj['data_PROCESS_UNIT_Y1']) - 1])
                selection.append('Increase')
                nameParameter.append('Process unit replacement costs for component ($/m^2)')
                value_change.append(obj['data_PROCESS_UNIT_X'][len(obj['data_PROCESS_UNIT_Y1']) - 1])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            if obj['data_OUTAGE_MULTIPLIER_Y1'][0] < risk:
                value_now.append(rwinputca.outage_multiplier)
                valueMethod.append(obj['data_OUTAGE_MULTIPLIER_Y1'][0])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                selection.append('Reduction')
                nameParameter.append('Equipment Outtage Multiplier')
                value_change.append(obj['data_OUTAGE_MULTIPLIER_X'][0])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            elif obj['data_OUTAGE_MULTIPLIER_Y1'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1] < risk:
                value_now.append(rwinputca.outage_multiplier)
                valueMethod.append(
                    obj['data_OUTAGE_MULTIPLIER_Y1'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                selection.append('Increase')
                nameParameter.append('Equipment Outtage Multiplier')
                value_change.append(
                    obj['data_OUTAGE_MULTIPLIER_X'][len(obj['data_OUTAGE_MULTIPLIER_Y1']) - 1])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            if obj['data_PRODUCTION_COST_Y1'][0] < risk:
                value_now.append(rwinputca.production_cost)
                valueMethod.append(obj['data_PRODUCTION_COST_Y1'][0])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                selection.append('Reduction')
                nameParameter.append('Loss of Production Cost, $/day')
                value_change.append(obj['data_PRODUCTION_COST_X'][0])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            elif obj['data_PRODUCTION_COST_Y1'][len(obj['data_PRODUCTION_COST_Y1']) - 1] < risk:
                value_now.append(rwinputca.production_cost)
                valueMethod.append(obj['data_PRODUCTION_COST_Y1'][len(obj['data_PRODUCTION_COST_Y1']) - 1])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][len(obj['data_PRODUCTION_COST_Y1']) - 1])
                selection.append('Increase')
                nameParameter.append('Loss of Production Cost, $/day')
                value_change.append(obj['data_PRODUCTION_COST_X'][len(obj['data_PRODUCTION_COST_Y1']) - 1])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            if obj['data_PERONAL_DENSITY_Y1'][0] < risk:
                value_now.append(rwinputca.personal_density)
                valueMethod.append(obj['data_PERONAL_DENSITY_Y1'][0])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][0])
                selection.append('Reduction')
                nameParameter.append('The unit Population Density of Personnel or Employees, personal/m')
                value_change.append(obj['data_PERONAL_DENSITY_X'][0])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            elif obj['data_PERONAL_DENSITY_Y1'][len(obj['data_PERONAL_DENSITY_Y1']) - 1] < risk:
                value_now.append(rwinputca.personal_density)
                valueMethod.append(obj['data_PERONAL_DENSITY_Y1'][len(obj['data_PERONAL_DENSITY_Y1']) - 1])
                pof_change.append(pof_now)
                cof_change.append(obj['data_PROCESS_UNIT_Y0'][[len(obj['data_PERONAL_DENSITY_Y1']) - 1]])
                selection.append('Increase')
                nameParameter.append('The unit Population Density of Personnel or Employees, personal/m')
                value_change.append(obj['data_PERONAL_DENSITY_X'][len(obj['data_PERONAL_DENSITY_Y1']) - 1])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            if obj['data_INJURE_COST_Y1'][0] < risk:
                value_now.append(rwinputca.injure_cost)
                valueMethod.append(obj['data_INJURE_COST_Y1'][0])
                pof_change.append(pof_now)
                cof_change.append(obj['data_INJURE_COST_Y0'][0])
                selection.append('Reduction')
                nameParameter.append('The cost associated with serious injury of fatality of personnel, $')
                value_change.append(obj['data_INJURE_COST_X'][0])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            elif obj['data_INJURE_COST_Y1'][len(obj['data_INJURE_COST_Y1']) - 1] < risk:
                value_now.append(rwinputca.injure_cost)
                valueMethod.append(obj['data_INJURE_COST_Y1'][len(obj['data_INJURE_COST_Y1']) - 1])
                pof_change.append(pof_now)
                cof_change.append(obj['data_INJURE_COST_Y0'][len(obj['data_INJURE_COST_Y1']) - 1])
                selection.append('Increase')
                nameParameter.append('The cost associated with serious injury of fatality of personnel, $')
                value_change.append(obj['data_INJURE_COST_X'][len(obj['data_INJURE_COST_Y1']) - 1])
                pof_change.append(pof_now)
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
            if obj['data_EVIRONMENT_COST_Y1'][0] < risk:
                value_now.append(rwinputca.evironment_cost)
                valueMethod.append(obj['data_EVIRONMENT_COST_Y1'][0])
                pof_change.append(pof_now)
                cof_change.append(obj['data_EVIRONMENT_COST_Y0'][0])
                selection.append('Increase')
                nameParameter.append('Environmental clean up Costs, $/Barrel')
                value_change.append(obj['data_EVIRONMENT_COST_X'][0])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)

            elif obj['data_EVIRONMENT_COST_Y1'][len(obj['data_EVIRONMENT_COST_Y1']) - 1] < risk:
                value_now.append(rwinputca.evironment_cost)
                valueMethod.append(obj['data_EVIRONMENT_COST_Y1'][len(obj['data_EVIRONMENT_COST_Y1']) - 1])
                pof_change.append(pof_now)

                cof_change.append(obj['data_EVIRONMENT_COST_Y0'][len(obj['data_EVIRONMENT_COST_Y1']) - 1])
                selection.append('Reduction')
                nameParameter.append('Environmental clean up Costs, $/Barrel')
                value_change.append(obj['data_EVIRONMENT_COST_X'][len(obj['data_EVIRONMENT_COST_Y1']) - 1])
                arr_pof_now.append(pof_now)
                arr_cof_now.append(cof_value_now)
        objCoF = obj

        # sap xep valueMethod- gia tri risk khi thay doi cac input Pof
        for i in range(0, len(valueMethod)):
            for j in range(i + 1, len(valueMethod)):
                if valueMethod[i] > valueMethod[j]:
                    temp = valueMethod[i]
                    valueMethod[i] = valueMethod[j]
                    valueMethod[j] = temp

                    temp = selection[i]
                    selection[i] = selection[j]
                    selection[j] = temp

                    temp = nameParameter[i]
                    nameParameter[i] = nameParameter[j]
                    nameParameter[j] = temp

                    temp = pof_change[i]
                    pof_change[i] = pof_change[j]
                    pof_change[j] = temp

                    temp = cof_change[i]
                    cof_change[i] = cof_change[j]
                    cof_change[j] = temp

                    temp = value_change[i]
                    value_change[i] = value_change[j]
                    value_change[j] = temp

                    temp = value_now[i]
                    value_now[i] = value_now[j]
                    value_now[j] = temp

                    temp = arr_pof_now[i]
                    arr_pof_now[i] = arr_pof_now[j]
                    arr_pof_now[j] = temp

                    temp = arr_cof_now[i]
                    arr_cof_now[i] = arr_cof_now[j]
                    arr_cof_now[j] = temp
        models.Mitigation.objects.filter(id_proposal_id=proposalID).delete()
        data = []
        for i in range(0, len(valueMethod)):
            b = {}
            b['risk_change'] = valueMethod[i]
            b['selection'] = selection[i]
            b['nameParameter'] = nameParameter[i]
            b['priority'] = i+1
            b['value_now'] = value_now[i]
            b['pof_now'] = arr_pof_now[i]
            b['cof_now'] = arr_cof_now[i]
            b['risk_now'] = risk
            b['value_change'] = value_change[i]
            b['pof_change'] = pof_change[i]
            b['cof_change'] = cof_change[i]

            miti = models.Mitigation(id_proposal_id=proposalID, risk_change=valueMethod[i], selection=selection[i],
                                     nameParameter=nameParameter[i], priority=i, value_now=value_now[i],
                                     pof_now=arr_pof_now[i],
                                     cof_now=arr_cof_now[i], risk_now=risk, value_change=value_change[i],
                                     pof_change=pof_change[i],
                                     cof_change=cof_change[i])
            miti.save()
            data.append(b)

        # return redirect('damageDetailmitigation', siteID=siteID,proposalID=a.id)
        return render(request, 'FacilityUI/mitigation/damageMechanism.html',
                      {'page': 'damageDetailmitigation', 'siteID': x1, 'data': data, 'objPoF': objPoF,
                       'objCoF': objCoF, 'kind': kind})
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        print(e)

def MitigationDetail(request, siteID,proposalID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    # rwdamage= models.RwDamageMechanism.objects.get(id_dm_id=proposalID)
    # dmitem = models.DMItems.objects.get(dmitemid=rwdamage.dmitemid_id)
    # if '_temCacAmine' in request.POST:
    #     return redirect('anime',proposalID=proposalID,const=0)
    # if'_temCacAlkaline' in request.POST:
    #     return redirect('alkaline', proposalID=proposalID, const=0)
    # if '_temCaustic' in request.POST:
    #     return redirect('caustic', proposalID=proposalID, const=0)
    print("go go ")
    if 'analysis' in request.POST:
        x=request.POST.get('size')
        if x=='thinning':
            medthod=[]
            obj_thin=mitigation.ShowThining(proposalID)
            if obj_thin['dataNominalThicknessY1'][0]!=obj_thin['dataNominalThicknessY1'][len(obj_thin['dataNominalThicknessY1'])-1]:
                medthod.append('0')
            if obj_thin['dataCurentThicknessY1'][0]!=obj_thin['dataCurentThicknessY1'][len(obj_thin['dataCurentThicknessY1'])-1]:
                medthod.append('1')
            if obj_thin['dataCorrosionRateY1'][0]!=obj_thin['dataCorrosionRateY1'][len(obj_thin['dataCorrosionRateY1'])-1]:
                medthod.append('2')
            if obj_thin['dataMinimunRequiredThicknessY1'][0]!=obj_thin['dataMinimunRequiredThicknessY1'][len(obj_thin['dataMinimunRequiredThicknessY1'])-1]:
                medthod.append('3')

            return render(request, 'FacilityUI/mitigation/mitigationThinning.html',{'objThin':obj_thin,'medthod':medthod,'siteID':siteID, 'count': count,
                   'noti': noti,
                   'countnoti': countnoti, 'info': request.session})
        elif x=='alkaline':
            medthod = []
            obj_thin = mitigation.showAlkaline(proposalID)
            if obj_thin['dataCO3Y1'][0] != obj_thin['dataCO3Y1'][
                        len(obj_thin['dataCO3Y1']) - 1]:
                medthod.append('0')
            if obj_thin['dataphY1'][0] != obj_thin['dataphY1'][
                        len(obj_thin['dataphY1']) - 1]:
                medthod.append('1')


            return render(request, 'FacilityUI/mitigation/mitigationAlkaline.html',
                          {'obj': obj_thin, 'medthod': medthod, 'siteID': siteID, 'count': count,
                           'noti': noti,
                           'countnoti': countnoti, 'info': request.session})
        elif x=='caustic':
            medthod = []
            obj = mitigation.showCaustic(proposalID)
            if obj['dataMAX_OP_TEMPY1'][0] != obj['dataMAX_OP_TEMPY1'][
                        len(obj['dataMAX_OP_TEMPY1']) - 1]:
                medthod.append('0')
            if obj['dataNaOHConcentrationY1'][0] != obj['dataNaOHConcentrationY1'][
                        len(obj['dataNaOHConcentrationY1']) - 1]:
                medthod.append('1')
            if obj['dataCRACK_PRESENTY1'][0] != obj['dataCRACK_PRESENTY1'][
                        len(obj['dataCRACK_PRESENTY1']) - 1]:
                medthod.append('2')
            if obj['dataHEAT_TRACEY1'][0] != obj['dataHEAT_TRACEY1'][
                        len(obj['dataHEAT_TRACEY1']) - 1]:
                medthod.append('3')
            return render(request, 'FacilityUI/mitigation/mitigationCaustic.html',
                          {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                           'noti': noti,
                           'countnoti': countnoti, 'info': request.session})
        elif x=='amine':

            medthod = []
            obj = mitigation.showAnime(proposalID)
            if obj['dataMAX_OP_TEMPY1'][0] != obj['dataMAX_OP_TEMPY1'][
                        len(obj['dataMAX_OP_TEMPY1']) - 1]:
                medthod.append('0')
            if obj['dataAMINE_SOLUTIONY1'][0] != obj['dataAMINE_SOLUTIONY1'][
                        len(obj['dataAMINE_SOLUTIONY1']) - 1]:
                medthod.append('1')
            if obj['dataAMINE_EXPOSEDY1'][0] != obj['dataAMINE_EXPOSEDY1'][
                        len(obj['dataAMINE_EXPOSEDY1']) - 1]:
                medthod.append('2')
            return render(request, 'FacilityUI/mitigation/mitigationAmine.html',
                          {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                           'noti': noti,
                           'countnoti': countnoti, 'info': request.session})
        elif x=='pascc':
            medthod = []
            obj = mitigation.showPASCC(proposalID)
            if obj['dataMAX_OP_TEMPY1'][0] != obj['dataMAX_OP_TEMPY1'][
                        len(obj['dataMAX_OP_TEMPY1']) - 1]:
                medthod.append('0')

            return render(request, 'FacilityUI/mitigation/mitigationPASCC.html',
                          {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                           'noti': noti,
                           'countnoti': countnoti, 'info': request.session})
        elif x=='all':
            medthod = []
            obj = mitigation.AllDamageFactor(proposalID)
            if obj['dataNominalThicknessY1'][0] != obj['dataNominalThicknessY1'][
                        len(obj['dataNominalThicknessY1']) - 1]:
                medthod.append('0')
            if obj['dataCurentThicknessY1'][0] != obj['dataCurentThicknessY1'][
                        len(obj['dataCurentThicknessY1']) - 1]:
                medthod.append('1')
            if obj['dataCorrosionRateY1'][0] != obj['dataCorrosionRateY1'][
                        len(obj['dataCorrosionRateY1']) - 1]:
                medthod.append('2')
            if obj['dataMinimunRequiredThicknessY1'][0] != obj['dataMinimunRequiredThicknessY1'][
                        len(obj['dataMinimunRequiredThicknessY1']) - 1]:
                medthod.append('3')
            if obj['dataCO3Y1'][0] != obj['dataCO3Y1'][
                        len(obj['dataCO3Y1']) - 1]:
                medthod.append('4')
            if obj['dataphY1'][0] != obj['dataphY1'][
                        len(obj['dataphY1']) - 1]:
                medthod.append('5')
            if obj['dataMAX_OP_TEMPY1'][0] != obj['dataMAX_OP_TEMPY1'][
                        len(obj['dataMAX_OP_TEMPY1']) - 1]:
                medthod.append('6')
            if obj['dataNaOHConcentrationY1'][0] != obj['dataNaOHConcentrationY1'][
                        len(obj['dataNaOHConcentrationY1']) - 1]:
                medthod.append('7')
            if obj['dataCRACK_PRESENTY1'][0] != obj['dataCRACK_PRESENTY1'][
                        len(obj['dataCRACK_PRESENTY1']) - 1]:
                medthod.append('8')
            if obj['dataHEAT_TRACEY1'][0] != obj['dataHEAT_TRACEY1'][
                        len(obj['dataHEAT_TRACEY1']) - 1]:
                medthod.append('9')
            if obj['dataAMINE_SOLUTIONY1'][0] != obj['dataAMINE_SOLUTIONY1'][
                        len(obj['dataAMINE_SOLUTIONY1']) - 1]:
                medthod.append('10')
            if obj['dataAMINE_EXPOSEDY1'][0] != obj['dataAMINE_EXPOSEDY1'][
                        len(obj['dataAMINE_EXPOSEDY1']) - 1]:
                medthod.append('11')

            return render(request, 'FacilityUI/mitigation/mitigationDamageAll.html',
                          {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                           'noti': noti,
                           'countnoti': countnoti, 'info': request.session})
        elif x=='financial':
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            medthod = []
            if comp.componenttypeid_id == 9 or comp.componenttypeid_id == 12 or comp.componenttypeid_id == 13 or comp.componenttypeid_id == 15:
                if comp.componenttypeid_id == 13:#shell
                    obj = mitigation.FinancialShellCoF(proposalID)

                    if obj['data_PROCESS_UNIT_Y0'][0] != obj['data_PROCESS_UNIT_Y0'][
                                len(obj['data_PROCESS_UNIT_Y0']) - 1]:
                        medthod.append('0')
                    if obj['data_OUTAGE_MULTIPLIER_Y0'][0] != obj['data_OUTAGE_MULTIPLIER_Y0'][
                                len(obj['data_OUTAGE_MULTIPLIER_Y0']) - 1]:
                        medthod.append('1')
                    if obj['data_PRODUCTION_COST_Y0'][0] != obj['data_PRODUCTION_COST_Y0'][
                                len(obj['data_PRODUCTION_COST_Y0']) - 1]:
                        medthod.append('2')
                    if obj['data_PERONAL_DENSITY_Y0'][0] != obj['data_PERONAL_DENSITY_Y0'][
                                len(obj['data_PERONAL_DENSITY_Y0']) - 1]:
                        medthod.append('3')
                    if obj['data_INJURE_COST_Y0'][0] != obj['data_INJURE_COST_Y0'][
                                len(obj['data_INJURE_COST_Y0']) - 1]:
                        medthod.append('4')

                    return render(request, 'FacilityUI/mitigation/mitigation_financial_shell.html',
                              {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                               'noti': noti,
                               'countnoti': countnoti, 'info': request.session})
                else:
                    obj = mitigation.FinancialTankBottomCoF(proposalID)
                    if obj['data_COST_LOSS_Y0'][0] != obj['data_COST_LOSS_Y0'][
                                len(obj['data_COST_LOSS_Y0']) - 1]:
                        medthod.append('0')
                    if obj['data_Nominal_Diameter_Y0'][0] != obj['data_Nominal_Diameter_Y0'][
                                len(obj['data_Nominal_Diameter_Y0']) - 1]:
                        medthod.append('1')
                    return render(request, 'FacilityUI/mitigation/mitigation_financial_tank_bottom.html',
                                  {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                                   'noti': noti,
                                   'countnoti': countnoti, 'info': request.session})

            else:

                obj = mitigation.FinancialNomalCoF(proposalID)
                if obj['data_PROCESS_UNIT_Y0'][0] != obj['data_PROCESS_UNIT_Y0'][
                            len(obj['data_PROCESS_UNIT_Y0']) - 1]:
                    medthod.append('0')
                if obj['data_OUTAGE_MULTIPLIER_Y0'][0] != obj['data_OUTAGE_MULTIPLIER_Y0'][
                            len(obj['data_OUTAGE_MULTIPLIER_Y0']) - 1]:
                    medthod.append('1')
                if obj['data_PRODUCTION_COST_Y0'][0] != obj['data_PRODUCTION_COST_Y0'][
                            len(obj['data_PRODUCTION_COST_Y0']) - 1]:
                    medthod.append('2')
                if obj['data_PERONAL_DENSITY_Y0'][0] != obj['data_PERONAL_DENSITY_Y0'][
                            len(obj['data_PERONAL_DENSITY_Y0']) - 1]:
                    medthod.append('3')
                if obj['data_INJURE_COST_Y0'][0] != obj['data_INJURE_COST_Y0'][
                            len(obj['data_INJURE_COST_Y0']) - 1]:
                    medthod.append('4')
                if obj['data_EVIRONMENT_COST_Y0'][0] != obj['data_EVIRONMENT_COST_Y0'][
                            len(obj['data_EVIRONMENT_COST_Y0']) - 1]:
                    medthod.append('5')
            return render(request, 'FacilityUI/mitigation/mitigation_financial_processunit.html',
                          {'obj': obj, 'medthod': medthod, 'siteID': siteID, 'count': count,
                           'noti': noti,
                           'countnoti': countnoti, 'info': request.session})
    return render(request, 'FacilityUI/mitigation/damageMechanism.html',
                  {'page': 'damageDetailmitigation','siteID':siteID, 'count': count,
                   'noti': noti,
                   'countnoti': countnoti, 'info': request.session})
def FullyDamageFactor(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        fc=models.RwFullFcof.objects.get(id = proposalID).fcofvalue
        df = models.RwFullPof.objects.get(id= proposalID)
        rwAss = models.RwAssessment.objects.get(id= proposalID)
        data={}
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 13 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isTank = 1
        else:
            isTank = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0

        data['gfftotal'] = df.gfftotal
        data['fms'] = df.fms
        data['thinningap1'] = roundData.roundDF(df.thinningap1)
        data['thinningap2'] = roundData.roundDF(df.thinningap2)
        data['thinningap3'] = roundData.roundDF(df.thinningap3)
        data['sccap1'] = roundData.roundDF(df.sccap1)
        data['sccap2'] = roundData.roundDF(df.sccap2)
        data['sccap3'] = roundData.roundDF(df.sccap3)
        data['externalap1'] = roundData.roundDF(df.externalap1)
        data['externalap2'] = roundData.roundDF(df.externalap2)
        data['externalap3'] = roundData.roundDF(df.externalap3)
        data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
        data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
        data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
        data['brittleap1'] = roundData.roundDF(df.brittleap1)
        data['brittleap2'] = roundData.roundDF(df.brittleap2)
        data['brittleap3'] = roundData.roundDF(df.brittleap3)
        data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
        data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
        data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
        data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
        data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
        data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
        data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
        data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
        data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)

        if '_btnGoverningStress' in request.POST:
            return redirect('GoverningStressCorrosionCracking', proposalID=proposalID)
        if '_btnThinning' in request.POST:
            return redirect('choseThining', proposalID=proposalID)
        if '_btnGoverningExternal' in request.POST:
            return redirect('chooseGoverningExternal', proposalID=proposalID)
        if '_btnHTHA' in request.POST:
            return redirect('HTHA', proposalID=proposalID)
        if '_btnGoverningBrittle' in request.POST:
            return redirect('chooseGoverningBrittle', proposalID=proposalID)
        if request.method == 'POST':
            thinningtype = request.POST.get('thinningType')
            perfomance.save_rw_full_pof(proposalID,thinningtype)
            data['notify'] = " Save data successfully !"
            # df.save()
            # ReCalculate.ReCalculate(proposalID, request)
            # return redirect('damgeFactor', proposalID)
        data['thinningType'] = df.thinningtype
        data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
        data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
        data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
        data['pofap1'] = roundData.roundPoF(df.pofap1)
        data['pofap2'] = roundData.roundPoF(df.pofap2)
        data['pofap3'] = roundData.roundPoF(df.pofap3)
        data['pofap1category'] = df.pofap1category
        data['pofap2category'] = df.pofap2category
        data['pofap3category'] = df.pofap3category
        data['emmuapofap1'] = ReCalculate.emmua159compare(roundData.roundPoF(df.pofap1))
        data['emmuapofap2'] = ReCalculate.emmua159compare(roundData.roundPoF(df.pofap2))
        data['emmuapofap3'] = ReCalculate.emmua159compare(roundData.roundPoF(df.pofap3))
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/dfFull.html',
                  {'page':'damageFactor', 'obj':data, 'assess': rwAss, 'isTank': isTank,
                   'isShell': isShell, 'proposalID':proposalID,'info':request.session,
                   'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid, 'fc':fc})
def CorrosionControl(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    objnew = {}
    obj = {}
    listdata=[]
    isBottom = 0
    isShell = 0
    check = 0
    info=''
    try:
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid = rwAss.equipmentid_id)
        corrosionControl = models.CorrosionControl.objects.filter(id = proposalID)
        # print("check component type id", component.componenttypeid_id)
        if corrosionControl.count() == 0:
            check = 0
        else:
            check = 1
            i = 0
            for a in corrosionControl:
                list = {}
                list['stt'] = i
                list['corrosionid'] = a.corrosionid
                list['equipmentnumber'] = equip.equipmentnumber
                list['componentnumber'] = comp.componentnumber
                list['assessmentdate'] = a.assessmentdate.strftime('%Y-%m-%d')
                list['commissiondate'] = a.commissiondate.strftime('%Y-%m-%d')
                if a.internalcladding ==1:
                    list['internalcladding'] = "True"
                else:
                    list['internalcladding'] = "False"
                list['claddingthickness'] = a.claddingthickness
                list['minimummesuredthickness'] = a.minimummesuredthickness
                list['normialthickness'] = a.normialthickness
                list['claddingcorrosionrate'] = a.claddingcorrosionrate
                list['age0'] = a.age0
                list['age3'] = a.age3
                list['age6'] = a.age6
                listdata.append(list)
        if comp.componenttypeid_id == 12 or comp.componenttypeid_id == 14 or comp.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if comp.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        obj['AssessmentName'] = rwAss.proposalname
        obj['ComponentNumber'] = comp.componentnumber
        obj['EquipmentNumber'] = equip.equipmentnumber
        obj['InternalCladding'] = bool(rwcoat.internalcladding)
        obj['NomalThick'] = rwcomponent.nominalthickness
        obj['CladdingThickness'] = rwcoat.claddingthickness
        obj['CladdingCorrosionRate'] = rwcoat.claddingcorrosionrate
        obj['CurrentThick'] = rwcomponent.currentthickness
        obj['ComponentNumber'] = str(comp.componentnumber)
        obj['APIComponentType'] = models.ApiComponentType.objects.get(apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        obj['AssesmentDate'] = rwAss.assessmentdate
        obj['AssesmentDateShow'] = rwAss.assessmentdate.strftime('%Y-%m-%d')
        if rwAss.commisstiondate:
            obj['Commissiondate'] = rwAss.commisstiondate
            obj['CommissiondateShow'] = rwAss.commisstiondate.strftime('%Y-%m-%d')
        else:
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).commissiondate
            obj['Commissiondate'] = COMPONENT_INSTALL_DATE
            obj['CommissiondateShow'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        corrosion = corrosion_rate.corrosion_with_internalcladding(obj['InternalCladding'],obj['NomalThick'],obj['CladdingThickness'],
                                                                   obj['CladdingCorrosionRate'],obj['CurrentThick'],obj['ComponentNumber'],
                                                                   obj['APIComponentType'],obj['AssesmentDate'],obj['Commissiondate'])
        obj['agerc0'] = corrosion.agerc(0)
        obj['agerc3'] = corrosion.agerc(3)
        obj['agerc6'] = corrosion.agerc(6)
        if 'try' in request.POST:
            objnew['InternalCladding'] = request.POST.get('InternalCladding')
            objnew['NomalThick'] = request.POST.get('NomalThick')
            objnew['CladdingThickness'] = request.POST.get('CladdingThickness')
            objnew['CladdingCorrosionRate'] = request.POST.get('CladdingCorrosionRate')
            objnew['CurrentThick'] = request.POST.get('CurrentThick')
            objnew['ComponentNumber'] = request.POST.get('ComponentNumber')
            objnew['APIComponentType'] = request.POST.get('APIComponentType')
            ass = datetime.strptime(request.POST.get('AssesmentDate'), '%Y-%m-%d')
            comm = datetime.strptime(request.POST.get('Commissiondate'), '%Y-%m-%d')
            print("ass",ass)
            print("comm",comm)
            objnew['AssesmentDate'] = ass
            objnew['AssesmentDateShow'] = ass.strftime('%Y-%m-%d')
            objnew['Commissiondate'] = comm
            objnew['CommissiondateShow'] = comm.strftime('%Y-%m-%d')
            corrosionNew = corrosion_rate.corrosion_with_internalcladding(objnew['InternalCladding'], float(objnew['NomalThick']),
                                                                       float(objnew['CladdingThickness']),
                                                                       float(objnew['CladdingCorrosionRate']),
                                                                       float(objnew['CurrentThick']), objnew['ComponentNumber'],
                                                                       objnew['APIComponentType'], ass,
                                                                       comm)
            objnew['agerc0'] = corrosionNew.agerc(0)
            objnew['agerc3'] = corrosionNew.agerc(3)
            objnew['agerc6'] = corrosionNew.agerc(6)
            print(objnew)
        if 'save' in request.POST:
            objnew['InternalCladding'] = request.POST.get('InternalCladding')
            objnew['NomalThick'] = request.POST.get('NomalThick')
            objnew['CladdingThickness'] = request.POST.get('CladdingThickness')
            objnew['CladdingCorrosionRate'] = request.POST.get('CladdingCorrosionRate')
            objnew['CurrentThick'] = request.POST.get('CurrentThick')
            objnew['ComponentNumber'] = request.POST.get('ComponentNumber')
            objnew['APIComponentType'] = request.POST.get('APIComponentType')
            ass = datetime.strptime(request.POST.get('AssesmentDate'), '%Y-%m-%d')
            comm = datetime.strptime(request.POST.get('Commissiondate'), '%Y-%m-%d')
            print("ass", ass)
            print("comm", comm)
            objnew['AssesmentDate'] = ass
            objnew['AssesmentDateShow'] = ass.strftime('%Y-%m-%d')
            objnew['Commissiondate'] = comm
            objnew['CommissiondateShow'] = comm.strftime('%Y-%m-%d')
            corrosionNew = corrosion_rate.corrosion_with_internalcladding(objnew['InternalCladding'],
                                                                          float(objnew['NomalThick']),
                                                                          float(objnew['CladdingThickness']),
                                                                          float(objnew['CladdingCorrosionRate']),
                                                                          float(objnew['CurrentThick']),
                                                                          objnew['ComponentNumber'],
                                                                          objnew['APIComponentType'], ass,
                                                                          comm)
            objnew['agerc0'] = corrosionNew.agerc(0)
            objnew['agerc3'] = corrosionNew.agerc(3)
            objnew['agerc6'] = corrosionNew.agerc(6)
            if objnew['InternalCladding'] == 'True':
                inte = 1
            else:
                inte = 0
            corrosionControl = models.CorrosionControl(id_id=proposalID,assessmentdate=ass,commissiondate = comm,internalcladding = inte,
                                                       claddingthickness =objnew['CladdingThickness'],minimummesuredthickness=objnew['CurrentThick'],
                                                       normialthickness= objnew['NomalThick'],claddingcorrosionrate=objnew['CladdingCorrosionRate'],
                                                       age0=objnew['agerc0'],age3=objnew['agerc3'],age6=objnew['agerc6'])
            corrosionControl.save()
            info = "Save successfully !"
        if "select" in request.POST:
            print("cuong selected")
            for a in corrosionControl:
                if (request.POST.get('%d' % a.corrosionid)):
                    if a.internalcladding:
                        objnew['InternalCladding'] = "True"
                    else:
                        objnew['InternalCladding'] = "False"
                    objnew['NomalThick'] = a.normialthickness
                    objnew['CladdingThickness'] = a.claddingthickness
                    objnew['CladdingCorrosionRate'] = a.claddingcorrosionrate
                    objnew['CurrentThick'] = a.minimummesuredthickness
                    objnew['ComponentNumber'] = comp.componentnumber
                    objnew['APIComponentType'] = request.POST.get('APIComponentType')
                    ass = datetime.strptime(request.POST.get('AssesmentDate'), '%Y-%m-%d')
                    comm = datetime.strptime(request.POST.get('Commissiondate'), '%Y-%m-%d')
                    objnew['AssesmentDate'] = a.assessmentdate.strftime('%Y-%m-%d')
                    objnew['AssesmentDateShow'] = a.assessmentdate.strftime('%Y-%m-%d')
                    objnew['Commissiondate'] = a.commissiondate.strftime('%Y-%m-%d')
                    objnew['CommissiondateShow'] = a.commissiondate.strftime('%Y-%m-%d')
                    corrosionNew = corrosion_rate.corrosion_with_internalcladding(objnew['InternalCladding'],
                                                                                  float(objnew['NomalThick']),
                                                                                  float(objnew['CladdingThickness']),
                                                                                  float(objnew['CladdingCorrosionRate']),
                                                                                  float(objnew['CurrentThick']),
                                                                                  objnew['ComponentNumber'],
                                                                                  objnew['APIComponentType'], ass,
                                                                                  comm)
                    objnew['agerc0'] = corrosionNew.agerc(0)
                    objnew['agerc3'] = corrosionNew.agerc(3)
                    objnew['agerc6'] = corrosionNew.agerc(6)
            info = "Re-calculate successfully !"
        if "delete" in request.POST:
            print("cuong deleted")
            for a in corrosionControl:
                if (request.POST.get('%d' % a.corrosionid)):
                    a.delete()
                    info = "Deleted successfully !"
    except Exception as e:
        print(e)
    return render(request, 'FacilityUI/risk_summary/corrosionControl.html',
                  {'page':'corrosionControl', 'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,
                   'siteid':siteid,'assess': rwAss,'proposalID':proposalID,'obj':obj,'objnew':objnew,'isTank':isBottom,'isShell':isShell,
                   'check':check,'listdata':listdata,'info':info})

def showAnime(request,proposalID,const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj={}
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        ComponentNumber = str(comp.componentnumber)
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentName'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname

        obj['AMINE_EXPOSED'] = bool(rwstream.exposedtogasamine)
        obj['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['AMINE_SOLUTION'] = rwstream.aminesolution


        obj['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
        obj['HEAT_TRACE'] = bool(rwequipment.heattraced)
        obj['STEAM_OUT'] = bool(rwequipment.steamoutwaterflush)


        obj['AMINE_INSP_EFF']='E'
        obj['AMINE_INSP_NUM']=0
        obj['PWHT'] = bool(rwequipment.pwht)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['ComponentNumber'] = str(comp.componentnumber)
        obj2 = {}
        obj2['HEAT_TRACE'] = False
        obj2['STEAM_OUT'] = False
        obj2['MAX_OP_TEMP'] = 30
        if rwassessment.commisstiondate:
            anime=Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'],obj['CARBON_ALLOY'],obj['CRACK_PRESENT'],obj['AMINE_SOLUTION'],obj['MAX_OP_TEMP'],obj['HEAT_TRACE'],obj['STEAM_OUT'],obj['AMINE_INSP_EFF'],obj['AMINE_INSP_NUM'],obj['PWHT'],rwassessment.assessmentdate,rwassessment.commisstiondate,obj['ComponentNumber'])
        else:
            anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                           obj['AMINE_SOLUTION'], obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                           obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'], obj['PWHT'],
                                           rwassessment.assessmentdate, COMPONENT_INSTALL_DATE, obj['ComponentNumber'])
        obj['Susceptibility'] = anime.getSusceptibility_Amine()
        obj['Severity'] = anime.SVI_AMINE()
        obj['age1'] = anime.GET_AGE()
        obj['age2'] = anime.GET_AGE()+3
        obj['age3'] = anime.GET_AGE()+6
        obj['base1']=anime.DFB_AMINE_API(0)
        obj['base2']=anime.DFB_AMINE_API(3)
        obj['base3']=anime.DFB_AMINE_API(6)
        obj['amine1'] = anime.DF_AMINE_API(0)
        obj['amine2'] = anime.DF_AMINE_API(3)
        obj['amine3'] = anime.DF_AMINE_API(6)
        if rwassessment.commisstiondate:
            animeTem=Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'],obj['CARBON_ALLOY'],obj['CRACK_PRESENT'],obj['AMINE_SOLUTION'],obj2['MAX_OP_TEMP'],obj2['HEAT_TRACE'],obj2['STEAM_OUT'],obj['AMINE_INSP_EFF'],obj['AMINE_INSP_NUM'],obj['PWHT'],rwassessment.assessmentdate,rwassessment.commisstiondate,obj['ComponentNumber'])
        else:
            animeTem = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                              obj['AMINE_SOLUTION'], obj2['MAX_OP_TEMP'], obj2['HEAT_TRACE'],
                                              obj2['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                              obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                              obj['ComponentNumber'])
        obj2['Susceptibility'] = animeTem.getSusceptibility_Amine()
        obj2['Severity'] = animeTem.SVI_AMINE()
        obj2['age1'] = animeTem.GET_AGE()
        obj2['age2'] = animeTem.GET_AGE() + 3
        obj2['age3'] = animeTem.GET_AGE() + 6
        obj2['base1'] = animeTem.DFB_AMINE_API(0)
        obj2['base2'] = animeTem.DFB_AMINE_API(3)
        obj2['base3'] = animeTem.DFB_AMINE_API(6)
        obj2['amine1'] = animeTem.DF_AMINE_API(0)
        obj2['amine2'] = animeTem.DF_AMINE_API(3)
        obj2['amine3'] = animeTem.DF_AMINE_API(6)

        if 'expertHelp' in request.POST:
            EquipmentType = models.EquipmentType.objects.get(
                equipmenttypeid=models.EquipmentMaster.objects.get(
                    equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            if (EquipmentType == 'Tank'):
                dataCoF = models.RwCaTank.objects.get(id=proposalID).consequence
                dataPoF = ReCalculate.calculateHelpTank(proposalID)
            else:
                dataCoF = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
                dataPoF = ReCalculate.calculateHelpNormal(proposalID)
            dataMAX_OP_TEMPX = []
            dataMAX_OP_TEMPY0 = []
            dataMAX_OP_TEMPY1 = []
            dataMAX_OP_TEMPY2 = []
            dataAMINE_SOLUTIONX = []
            dataAMINE_SOLUTIONY0 = []
            dataAMINE_SOLUTIONY1 = []
            dataAMINE_SOLUTIONY2 = []
            # PASCC-PTA
            objPASCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objPASCC['ComponentNumber'] = ComponentNumber
            objPASCC['EquipmentNumber'] = EquipmentName
            objPASCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objPASCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objPASCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objPASCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objPASCC['ExposedSH2OOperation'] = bool(rwequipment.presencesulphideso2)
            objPASCC['ExposedSH2OShutdown'] = bool(rwequipment.presencesulphideso2shutdown)
            objPASCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objPASCC['ThermalHistory'] = rwequipment.thermalhistory
            objPASCC['PTAMaterial'] = rwmaterial.ptamaterialcode
            objPASCC['DOWNTIME_PROTECTED'] = bool(rwequipment.downtimeprotectionused)
            objPASCC['PTA_SUSCEP'] = bool(rwmaterial.ispta)
            objPASCC['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objPASCC['NICKEL_ALLOY'] = bool(rwmaterial.nickelbased)
            objPASCC['EXPOSED_SULFUR'] = bool(rwstream.exposedtosulphur)
            # Df_CLSCC
            objCLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCLSCC['ComponentNumber'] = ComponentNumber
            objCLSCC['EquipmentNumber'] = EquipmentName
            objCLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objCLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCLSCC['ph'] = rwstream.waterph
            objCLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCLSCC['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCLSCC['CHLORIDE_ION_CONTENT'] = rwstream.chloride
            objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'] = bool(rwstream.materialexposedtoclint)
            objCLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            # Df_EXTERNAL_CORROSION
            objExCor = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objExCor['ComponentNumber'] = ComponentNumber
            objExCor['EquipmentNumber'] = EquipmentName
            objExCor['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            objExCor['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objExCor['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objExCor['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objExCor['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objExCor['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objExCor['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objExCor['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objExCor['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objExCor['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objExCor['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objExCor['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objExCor['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objExCor['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objExCor['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objExCor['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objExCor['EXTERNAL_INSP_EFF'] = 'E'
            objExCor['EXTERNAL_INSP_NUM'] = 0
            objExCor['NoINSP_EXTERNAL'] = 0
            objExCor['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objExCor['NomalThick'] = rwcomponent.nominalthickness
            objExCor['CurrentThick'] = rwcomponent.currentthickness
            objExCor['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objExCor['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objExCor['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objExCor['ShapeFactor'] = comptype.shapefactor
            objExCor['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objExCor['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objExCor['AllowableStress'] = rwcomponent.allowablestress
            objExCor['MinThickReq'] = rwcomponent.minreqthickness
            objExCor['StructuralThickness'] = rwcomponent.structuralthickness
            objExCor['Pressure'] = rwmaterial.designpressure
            objExCor['Diametter'] = rwcomponent.nominaldiameter
            objExCor['shape'] = API_COMPONENT_TYPE_NAME = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            # Df_CUI
            objCui = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCui['ComponentNumber'] = ComponentNumber
            objCui['EquipmentNumber'] = EquipmentName
            objCui['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            objCui['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCui['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCui['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCui['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objCui['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objCui['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objCui['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objCui['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objCui['CUI_PERCENT_7'] = rwexcor.plus121toplus135
            objCui['CUI_PERCENT_8'] = rwexcor.plus135toplus162
            objCui['CUI_PERCENT_9'] = rwexcor.plus162toplus176
            objCui['INSULATION_TYPE'] = rwcoat.externalinsulationtype
            objCui['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCui['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCui['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objCui['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objCui['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCui['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objCui['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCui['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCui['CUI_INSP_EFF'] = 'E'
            objCui['CUI_INSP_NUM'] = 0
            objCui['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objCui['NomalThick'] = rwcomponent.nominalthickness
            objCui['CurrentThick'] = rwcomponent.currentthickness
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            # chua thay dung
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objCui['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objCui['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objCui['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objCui['AllowableStress'] = rwcomponent.allowablestress
            objCui['MinThickReq'] = rwcomponent.minreqthickness
            objCui['StructuralThickness'] = rwcomponent.structuralthickness
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['Diametter'] = rwcomponent.nominaldiameter
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['COMPONENT_INSTALL_DATE'] = COMPONENT_INSTALL_DATE
            objCui['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objCui['shape'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            # EXTERNAL CLSCC
            objEXTERN_CLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objEXTERN_CLSCC['ComponentNumber'] = ComponentNumber
            objEXTERN_CLSCC['EquipmentNumber'] = EquipmentName
            objEXTERN_CLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objEXTERN_CLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objEXTERN_CLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objEXTERN_CLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objEXTERN_CLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objEXTERN_CLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objEXTERN_CLSCC['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # CUI_CLSCC
            objCUI_CLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCUI_CLSCC['ComponentNumber'] = ComponentNumber
            objCUI_CLSCC['EquipmentNumber'] = EquipmentName
            objCUI_CLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            objCUI_CLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCUI_CLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCUI_CLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCUI_CLSCC['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCUI_CLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCUI_CLSCC['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCUI_CLSCC['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCUI_CLSCC['INSULATION_CHLORIDE'] = bool(rwcoat.insulationcontainschloride)
            objCUI_CLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objCUI_CLSCC['EXTERNAL_INSULATION'] = bool(rwcoat.externalinsulation)

            objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCUI_CLSCC['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCUI_CLSCC['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            # HTHA
            objHTHA = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHTHA['ComponentNumber'] = ComponentNumber
            objHTHA['EquipmentNumber'] = EquipmentName
            objHTHA['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHTHA['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHTHA['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHTHA['HTHA_PRESSURE'] = rwstream.h2spartialpressure * 0.006895
            objHTHA['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objHTHA['HTHADamageObserved'] = rwcomponent.hthadamage
            objHTHA['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objHTHA['MATERIAL_SUSCEP_HTHA'] = bool(rwmaterial.ishtha)
            objHTHA['HTHA_MATERIAL'] = rwmaterial.hthamaterialcode
            objHTHA['Hydrogen'] = rwstream.hydrogen
            # TEMP_EMBRITTLE
            objTEMP_EMBRITTLE = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objTEMP_EMBRITTLE['ComponentNumber'] = ComponentNumber
            objTEMP_EMBRITTLE['EquipmentNumber'] = EquipmentName
            objTEMP_EMBRITTLE['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objTEMP_EMBRITTLE['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objTEMP_EMBRITTLE['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objTEMP_EMBRITTLE['TEMPER_SUSCEP'] = bool(rwmaterial.temper)
            objTEMP_EMBRITTLE['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objTEMP_EMBRITTLE['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objTEMP_EMBRITTLE['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objTEMP_EMBRITTLE['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            objTEMP_EMBRITTLE['REF_TEMP'] = rwmaterial.referencetemperature
            objTEMP_EMBRITTLE['DELTA_FATT'] = rwcomponent.deltafatt
            objTEMP_EMBRITTLE['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objTEMP_EMBRITTLE['PWHT'] = bool(rwequipment.pwht)
            objTEMP_EMBRITTLE['BRITTLE_THICK'] = rwcomponent.brittlefracturethickness
            objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # Df_885
            obj885 = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            obj885['ComponentNumber'] = ComponentNumber
            obj885['EquipmentNumber'] = EquipmentName
            obj885['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            obj885['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            obj885['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            obj885['CHROMIUM_12'] = bool(rwmaterial.chromemoreequal12)
            obj885['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            obj885['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            obj885['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            obj885['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            obj885['REF_TEMP'] = rwmaterial.referencetemperature
            obj885['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            obj885['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # dfSigma
            objSigma = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objSigma['ComponentNumber'] = ComponentNumber
            objSigma['EquipmentNumber'] = EquipmentName
            objSigma['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objSigma['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objSigma['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objSigma['MIN_TEM'] = rwstream.minoperatingtemperature
            objSigma['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objSigma['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objSigma['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            objSigma['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objSigma['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation

            objSigma['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objSigma['PERCENT_SIGMA'] = rwmaterial.sigmaphase
            # chua thay su dung MIN_DESIGN_TEMP
            objSigma['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # caustic
            objcaustic = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objcaustic['ComponentNumber'] = ComponentNumber
            objcaustic['EquipmentNumber'] = EquipmentName
            objcaustic['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objcaustic['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objcaustic['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objcaustic['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objcaustic['HEAT_TREATMENT'] = rwmaterial.heattreatment
            objcaustic['NaOHConcentration'] = rwstream.naohconcentration
            objcaustic['HEAT_TRACE'] = bool(rwequipment.heattraced)
            objcaustic['STEAM_OUT'] = bool(rwequipment.steamoutwaterflush)
            objcaustic['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objcaustic['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objcaustic['PWHT'] = bool(rwequipment.pwht)





            for i in range(20,0,-2):
                xx=obj['MAX_OP_TEMP']-i;
                dataMAX_OP_TEMPX.append(str(xx));

                anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               obj['AMINE_SOLUTION'], xx, obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                               obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               obj['ComponentNumber'])

                PASCC = Detail_DM_CAL.Df_PTA(objPASCC['CRACK_PRESENT'], objPASCC['ExposedSH2OOperation'],
                                             objPASCC['ExposedSH2OShutdown'],
                                             xx, objPASCC['ThermalHistory'],
                                             objPASCC['PTAMaterial'],
                                             objPASCC['DOWNTIME_PROTECTED'], objPASCC['PTA_SUSCEP'],
                                             objPASCC['CARBON_ALLOY'], objPASCC['NICKEL_ALLOY'],
                                             objPASCC['EXPOSED_SULFUR'], 'E', 0,
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)

                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'], xx,
                                               objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               ComponentNumber)

                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         xx,
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         COMPONENT_INSTALL_DATE,
                                                                         ComponentNumber)

                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], xx,
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                            ComponentNumber)

                EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(objEXTERN_CLSCC['CRACK_PRESENT'], objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                             xx,
                                                             'E', 0,
                                                             objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                             objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                             objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                             ComponentNumber)
                CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(objCUI_CLSCC['CRACK_PRESENT'], objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                       xx,
                                                       objCUI_CLSCC['PIPING_COMPLEXITY'], objCUI_CLSCC['INSULATION_CONDITION'],
                                                       objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                       objCUI_CLSCC['AUSTENITIC_STEEL'], objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                       objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'], objCUI_CLSCC['MIN_OP_TEMP'],
                                                       objCUI_CLSCC['EXTERN_COAT_QUALITY'],

                                                       rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                       ComponentNumber)

                HTHA = Detail_DM_CAL.DF_HTHA(objHTHA['HTHA_PRESSURE'], objHTHA['CRITICAL_TEMP'], objHTHA['HTHADamageObserved'],
                                             xx, objHTHA['MATERIAL_SUSCEP_HTHA'], objHTHA['HTHA_MATERIAL'],
                                             objHTHA['Hydrogen'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)

                TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(objTEMP_EMBRITTLE['TEMPER_SUSCEP'],
                                                                 objTEMP_EMBRITTLE['CARBON_ALLOY'],
                                                                 xx,
                                                                 objTEMP_EMBRITTLE['MIN_OP_TEMP'],
                                                                 objTEMP_EMBRITTLE['PRESSSURE_CONTROL'],
                                                                 objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'],
                                                                 objTEMP_EMBRITTLE['REF_TEMP'],
                                                                 objTEMP_EMBRITTLE['DELTA_FATT'],
                                                                 objTEMP_EMBRITTLE['CRITICAL_TEMP'],
                                                                 objTEMP_EMBRITTLE['PWHT'],
                                                                 objTEMP_EMBRITTLE['BRITTLE_THICK'],
                                                                 objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'],
                                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                                 ComponentNumber)
                df885 = Detail_DM_CAL.Df_885(obj885['CHROMIUM_12'], obj885['MIN_OP_TEMP'], xx,
                                             obj885['PRESSSURE_CONTROL'], obj885['MIN_TEMP_PRESSURE'],
                                             obj885['REF_TEMP'],
                                             obj885['CRITICAL_TEMP'], obj885['MIN_DESIGN_TEMP'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)

                dfSigma = Detail_DM_CAL.Df_SIGMA(objSigma['MIN_TEM'], objSigma['AUSTENITIC_STEEL'], objSigma['MIN_OP_TEMP'],
                                                 xx,
                                                 objSigma['PRESSSURE_CONTROL'], objSigma['MIN_TEMP_PRESSURE'],
                                                 objSigma['CRITICAL_TEMP'],
                                                 objSigma['PERCENT_SIGMA'],
                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                 ComponentNumber)

                caustic = Detail_DM_CAL.Df_Caustic(objcaustic['CRACK_PRESENT'], objcaustic['HEAT_TREATMENT'],
                                                   objcaustic['NaOHConcentration'],
                                                   objcaustic['HEAT_TRACE'], objcaustic['STEAM_OUT'],
                                                   xx,
                                                   objcaustic['CARBON_ALLOY'], 'E', 0, 0, objcaustic['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   COMPONENT_INSTALL_DATE, ComponentNumber)
                # BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
                #                                    objBri['CRITICAL_TEMP'],
                #                                    objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
                #                                    objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
                #                                    objBri['NOMINAL_OPERATING_CONDITIONS'],
                #                                    objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
                #                                    objBri['EQUIPMENT_CIRCUIT_SHOCK'], xx,
                #                                    objBri['CARBON_ALLOY'],
                #                                    objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
                #                                    rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                #                                    ComponentNumber)

                amine0 = anime.DF_AMINE_API(0)
                dataPoFTemp = dataPoF

                dataPoFTemp['amine'] = amine0
                dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
                dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
                dataPoFTemp['htha'] = HTHA.DF_HTHA_API(0)
                dataPoFTemp['embrittle'] = TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
                dataPoFTemp['885'] = df885.DF_885_API(0)
                dataPoFTemp['sigma'] = dfSigma.DF_SIGMA_API(0)
                dataPoFTemp['caustic'] = caustic.DF_CAUSTIC_API(0)
                # dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataMAX_OP_TEMPY0.append(amine0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMAX_OP_TEMPY1.append(temp['PoF'])
                dataMAX_OP_TEMPY2.append(temp['damageTotal'] * dataCoF)

            for i in range(0, 20, 2):
                xx = obj['MAX_OP_TEMP'] + i;
                dataMAX_OP_TEMPX.append(str(xx));
                anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               obj['AMINE_SOLUTION'], xx, obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                               obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               obj['ComponentNumber'])
                PASCC = Detail_DM_CAL.Df_PTA(objPASCC['CRACK_PRESENT'], objPASCC['ExposedSH2OOperation'],
                                             objPASCC['ExposedSH2OShutdown'],
                                             xx, objPASCC['ThermalHistory'],
                                             objPASCC['PTAMaterial'],
                                             objPASCC['DOWNTIME_PROTECTED'], objPASCC['PTA_SUSCEP'],
                                             objPASCC['CARBON_ALLOY'], objPASCC['NICKEL_ALLOY'],
                                             objPASCC['EXPOSED_SULFUR'], 'E', 0,
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'], xx,
                                               objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               ComponentNumber)
                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         xx,
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         COMPONENT_INSTALL_DATE,
                                                                         ComponentNumber)
                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], xx,
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                            ComponentNumber)
                EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(objEXTERN_CLSCC['CRACK_PRESENT'],
                                                             objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                             xx,
                                                             'E', 0,
                                                             objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                             objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                             objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                             ComponentNumber)
                CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(objCUI_CLSCC['CRACK_PRESENT'],
                                                       objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                       xx,
                                                       objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                       objCUI_CLSCC['INSULATION_CONDITION'],
                                                       objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                       objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                       objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                       objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                       objCUI_CLSCC['MIN_OP_TEMP'],
                                                       objCUI_CLSCC['EXTERN_COAT_QUALITY'],

                                                       rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                       ComponentNumber)
                HTHA = Detail_DM_CAL.DF_HTHA(objHTHA['HTHA_PRESSURE'], objHTHA['CRITICAL_TEMP'],
                                             objHTHA['HTHADamageObserved'],
                                             xx, objHTHA['MATERIAL_SUSCEP_HTHA'], objHTHA['HTHA_MATERIAL'],
                                             objHTHA['Hydrogen'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
                TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(objTEMP_EMBRITTLE['TEMPER_SUSCEP'],
                                                                 objTEMP_EMBRITTLE['CARBON_ALLOY'],
                                                                 xx,
                                                                 objTEMP_EMBRITTLE['MIN_OP_TEMP'],
                                                                 objTEMP_EMBRITTLE['PRESSSURE_CONTROL'],
                                                                 objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'],
                                                                 objTEMP_EMBRITTLE['REF_TEMP'],
                                                                 objTEMP_EMBRITTLE['DELTA_FATT'],
                                                                 objTEMP_EMBRITTLE['CRITICAL_TEMP'],
                                                                 objTEMP_EMBRITTLE['PWHT'],
                                                                 objTEMP_EMBRITTLE['BRITTLE_THICK'],
                                                                 objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'],
                                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                                 ComponentNumber)
                df885 = Detail_DM_CAL.Df_885(obj885['CHROMIUM_12'], obj885['MIN_OP_TEMP'], xx,
                                             obj885['PRESSSURE_CONTROL'], obj885['MIN_TEMP_PRESSURE'],
                                             obj885['REF_TEMP'],
                                             obj885['CRITICAL_TEMP'], obj885['MIN_DESIGN_TEMP'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
                dfSigma = Detail_DM_CAL.Df_SIGMA(objSigma['MIN_TEM'], objSigma['AUSTENITIC_STEEL'], objSigma['MIN_OP_TEMP'],
                                                 xx,
                                                 objSigma['PRESSSURE_CONTROL'], objSigma['MIN_TEMP_PRESSURE'],
                                                 objSigma['CRITICAL_TEMP'],
                                                 objSigma['PERCENT_SIGMA'],
                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                 ComponentNumber)
                caustic = Detail_DM_CAL.Df_Caustic(objcaustic['CRACK_PRESENT'], objcaustic['HEAT_TREATMENT'],
                                                   objcaustic['NaOHConcentration'],
                                                   objcaustic['HEAT_TRACE'], objcaustic['STEAM_OUT'],
                                                   xx,
                                                   objcaustic['CARBON_ALLOY'], 'E', 0, 0, objcaustic['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   COMPONENT_INSTALL_DATE, ComponentNumber)
                # BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
                #                                    objBri['CRITICAL_TEMP'],
                #                                    objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
                #                                    objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
                #                                    objBri['NOMINAL_OPERATING_CONDITIONS'],
                #                                    objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
                #                                    objBri['EQUIPMENT_CIRCUIT_SHOCK'], xx,
                #                                    objBri['CARBON_ALLOY'],
                #                                    objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
                #                                    rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                #                                    ComponentNumber)
                amine0 = anime.DF_AMINE_API(0)
                dataPoFTemp = dataPoF

                dataPoFTemp['amine'] = amine0
                dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
                dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
                dataPoFTemp['htha'] = HTHA.DF_HTHA_API(0)
                dataPoFTemp['embrittle'] = TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
                dataPoFTemp['885'] = df885.DF_885_API(0)
                dataPoFTemp['sigma'] = dfSigma.DF_SIGMA_API(0)
                dataPoFTemp['caustic'] = caustic.DF_CAUSTIC_API(0)
                # dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataMAX_OP_TEMPY0.append(amine0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMAX_OP_TEMPY1.append(temp['PoF'])
                dataMAX_OP_TEMPY2.append(temp['damageTotal'] * dataCoF)
            # AMINE_SOLUTION
            xx = 'Diethanolamine DEA'
            dataAMINE_SOLUTIONX.append(xx)
            anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                           xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                           obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                           obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                           obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_SOLUTIONY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_SOLUTIONY1.append(temp['PoF'])
            dataAMINE_SOLUTIONY2.append(temp['damageTotal'] * dataCoF)
            #
            xx = 'Diglycolamine DGA'
            dataAMINE_SOLUTIONX.append(xx)
            anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                           xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                           obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                           obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                           obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_SOLUTIONY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_SOLUTIONY1.append(temp['PoF'])
            dataAMINE_SOLUTIONY2.append(temp['damageTotal'] * dataCoF)
            #
            xx = 'Disopropanolamine DIPA'
            dataAMINE_SOLUTIONX.append(xx)
            anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                           xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                           obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                           obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                           obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_SOLUTIONY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_SOLUTIONY1.append(temp['PoF'])
            dataAMINE_SOLUTIONY2.append(temp['damageTotal'] * dataCoF)
            #
            xx = 'Methyldiethanolamine MDEA'
            dataAMINE_SOLUTIONX.append(xx)
            anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                           xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                           obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                           obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                           obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_SOLUTIONY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_SOLUTIONY1.append(temp['PoF'])
            dataAMINE_SOLUTIONY2.append(temp['damageTotal'] * dataCoF)
            #
            xx = 'Monoethanolamine MEA'
            dataAMINE_SOLUTIONX.append(xx)
            anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                           xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                           obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                           obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                           obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_SOLUTIONY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_SOLUTIONY1.append(temp['PoF'])
            dataAMINE_SOLUTIONY2.append(temp['damageTotal'] * dataCoF)
            #
            xx = 'Sulfinol'
            dataAMINE_SOLUTIONX.append(xx)
            if rwassessment.commisstiondate:
                anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                               obj['PWHT'], rwassessment.assessmentdate, rwassessment.commisstiondate,
                                               obj['ComponentNumber'])
            else:
                anime = Detail_DM_CAL.Df_Amine(obj['AMINE_EXPOSED'], obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               xx, obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                               obj['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_SOLUTIONY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_SOLUTIONY1.append(temp['PoF'])
            dataAMINE_SOLUTIONY2.append(temp['damageTotal'] * dataCoF)
            # AMINE_EXPOSED
            dataAMINE_EXPOSEDX = []
            dataAMINE_EXPOSEDY0 = []
            dataAMINE_EXPOSEDY1 = []
            dataAMINE_EXPOSEDY2 = []
            xx = 'True'
            dataAMINE_EXPOSEDX.append(xx)
            if rwassessment.commisstiondate:
                anime = Detail_DM_CAL.Df_Amine(True, obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               obj['AMINE_SOLUTION'], obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'], obj['PWHT'],
                                               rwassessment.assessmentdate, rwassessment.commisstiondate, obj['ComponentNumber'])
            else:
                anime = Detail_DM_CAL.Df_Amine(True, obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               obj['AMINE_SOLUTION'], obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                               obj['PWHT'],
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_EXPOSEDY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_EXPOSEDY1.append(temp['PoF'])
            dataAMINE_EXPOSEDY2.append(temp['damageTotal'] * dataCoF)
            #
            xx = 'False'


            dataAMINE_EXPOSEDX.append(xx)
            if rwassessment.commisstiondate:
                anime = Detail_DM_CAL.Df_Amine(False, obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               obj['AMINE_SOLUTION'], obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'], obj['PWHT'],
                                               rwassessment.assessmentdate, rwassessment.commisstiondate, obj['ComponentNumber'])
            else:
                anime = Detail_DM_CAL.Df_Amine(False, obj['CARBON_ALLOY'], obj['CRACK_PRESENT'],
                                               obj['AMINE_SOLUTION'], obj['MAX_OP_TEMP'], obj['HEAT_TRACE'],
                                               obj['STEAM_OUT'], obj['AMINE_INSP_EFF'], obj['AMINE_INSP_NUM'],
                                               obj['PWHT'],
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               obj['ComponentNumber'])
            amine0 = anime.DF_AMINE_API(0)
            dataPoFTemp['amine'] = amine0
            dataPoFTemp = dataPoF
            dataAMINE_EXPOSEDY0.append(amine0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataAMINE_EXPOSEDY1.append(temp['PoF'])
            dataAMINE_EXPOSEDY2.append(temp['damageTotal'] * dataCoF)


            return render(request, 'FacilityUI/risk_summary/expertHelpAmine.html', {'dataMAX_OP_TEMPX':dataMAX_OP_TEMPX,'dataMAX_OP_TEMPY0':dataMAX_OP_TEMPY0,'dataMAX_OP_TEMPY1':dataMAX_OP_TEMPY1,'dataMAX_OP_TEMPY2':dataMAX_OP_TEMPY2,'dataAMINE_SOLUTIONX':dataAMINE_SOLUTIONX,'dataAMINE_SOLUTIONY0':dataAMINE_SOLUTIONY0,'dataAMINE_SOLUTIONY1':dataAMINE_SOLUTIONY1,'dataAMINE_SOLUTIONY2':dataAMINE_SOLUTIONY2,'dataAMINE_EXPOSEDX':dataAMINE_SOLUTIONX,'dataAMINE_EXPOSEDY0':dataAMINE_SOLUTIONY0,'dataAMINE_EXPOSEDY1':dataAMINE_SOLUTIONY1,'dataAMINE_EXPOSEDY2':dataAMINE_SOLUTIONY2})
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showAnime.html',
                  {'page': 'anime', 'a':obj, 'b':obj2,'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count,'const':const,'notiVerification':notiVerification,'siteid':siteid})
def ShowGoverningStressCorrosionCracking(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    if '_anime' in request.POST:
        return redirect('anime', proposalID=proposalID,const=0)
    if '_alkaline' in request.POST:
        return redirect('alkaline', proposalID=proposalID,const=0)
    if '_caustic' in request.POST:
        return redirect('caustic',proposalID=proposalID,const=0)
    if '_sulphide' in request.POST:
        return redirect('sulphide',proposalID=proposalID,const=0)
    if '_hicsohich2s' in request.POST:
        return redirect('hicsohich2s',proposalID=proposalID,const=0)
    if '_PASCC' in request.POST:
        return redirect('PASCC', proposalID=proposalID, const=0)
    if '_CLSCC' in request.POST:
        return redirect('CLSCC', proposalID=proposalID, const=0)
    if '_HSCHF' in request.POST:
        return redirect('HSCHF', proposalID=proposalID, const=0)
    if '_HICSOHICHF' in request.POST:
        return redirect('HICSOHICHF', proposalID=proposalID, const=0)
    return render(request, 'FacilityUI/risk_summary/chooseGoverningStressCorrosionCracking.html',
                  {'page':'governingStress','proposalID':proposalID ,'info':request.session,
                   'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def chooseThining(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()

    if '_thin' in request.POST:
            return redirect('thining', proposalID=proposalID)

    if '_lining' in request.POST:
        return redirect('lining', proposalID=proposalID)
    return render(request,'FacilityUI/risk_summary/chooseThining.html',
                  {'page':'chooseThining','proposalID':proposalID,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def showLining(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE

        lining = Detail_DM_CAL.Df_Lining(bool(rwcoat.internallining), rwcoat.internallinertype,
                                         rwcoat.internallinercondition, bool(rwequipment.lineronlinemonitoring),
                                         rwassessment.assessmentdate, commisstiondate, ComponentNumber)
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        if rwassessment.commisstiondate:
            obj['CommissionDate'] = rwassessment.commisstiondate.strftime('%Y-%m-%d')
        else:
            obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['online'] = lining.LINNER_ONLINE
        obj['LinerCondition'] = lining.LINNER_CONDITION
        obj['LinerType'] = lining.LinningType
        obj['FLC'] = lining.Fdl()
        obj['FOM'] = lining.Fom()
        obj['age1'] = lining.GET_AGE()
        obj['age2'] = lining.GET_AGE() + 3
        obj['age3'] = lining.GET_AGE() + 6
        obj['baseValue1'] = lining.DF_LINING_API(0)
        obj['baseValue2'] = lining.DF_LINING_API(3)
        obj['baseValue3'] = lining.DF_LINING_API(6)
        obj['lin1'] = lining.DFB_LINNING_API(0)
        obj['lin2'] = lining.DFB_LINNING_API(3)
        obj['lin3'] = lining.DFB_LINNING_API(6)
        # //Alkaline Carbonate Stress Corrosion Cracking
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        CRACK_PRESENT = bool(rwcomponent.crackspresent)
        # PWHT = bool(rwequipment.pwht)
        PWHT=bool(1)
        CO3_CONTENT=rwstream.co3concentration
        PH = rwstream.waterph
        CARBON_ALLOY = bool(rwmaterial.carbonlowalloy)
        AQUEOUS_OPERATOR = bool(rwstream.aqueousoperation)
        Alkaline=Detail_DM_CAL.Df_Cacbonate(False,PWHT,CO3_CONTENT,PH,CARBON_ALLOY,AQUEOUS_OPERATOR,'E',0, rwassessment.assessmentdate, COMPONENT_INSTALL_DATE, ComponentNumber)
        # print(Alkaline.CRACK_PRESENT)

        # print(Alkaline.DF_CACBONATE_API(36))
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showLining.html',
                  {'page': 'lining', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})
def showAlkaline(request,proposalID,const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        # rwcoat = models.RwCoating.objects.get(id=proposalID)
        # rwequipment = models.RwEquipment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        obj = {}
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname

        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        CRACK_PRESENT = bool(rwcomponent.crackspresent)
        obj['CRACK_PRESENT'] = CRACK_PRESENT

        PWHT = bool(rwequipment.pwht)
        # PWHT=bool(1)
        CO3_CONTENT=rwstream.co3concentration
        PH = rwstream.waterph
        CARBON_ALLOY = bool(rwmaterial.carbonlowalloy)
        obj['CARBON_ALLOY']=bool(rwmaterial.carbonlowalloy)
        obj['PWHT'] = PWHT
        obj['co3'] = CO3_CONTENT
        obj['ph']=PH
        AQUEOUS_OPERATOR = bool(rwstream.aqueousoperation)
        obj['AQUEOUS_OPERATOR'] = bool(rwstream.aqueousoperation)
        Alkaline=Detail_DM_CAL.Df_Cacbonate(obj['CRACK_PRESENT'],obj['PWHT'],obj['co3'],obj['ph'],obj['CARBON_ALLOY'],obj['AQUEOUS_OPERATOR'],'E',0, rwassessment.assessmentdate, commisstiondate, ComponentNumber)
        obj['ALKALINE_INSP_EFF'] = Alkaline.CACBONATE_INSP_EFF
        obj['ALKALINE_INSP_NUM'] = Alkaline.CACBONATE_INSP_NUM


        obj['Susceptibility']=Alkaline.GET_SUSCEPTIBILITY_CARBONATE()

        obj['SVI']=Alkaline.SVI_CARBONATE()
        obj['age1']=Alkaline.GET_AGE()
        obj['age2']=Alkaline.GET_AGE()+3
        obj['age3']=Alkaline.GET_AGE()+6
        obj['base1']=Alkaline.DFB_CACBONATE_API(0)
        obj['base2']=Alkaline.DFB_CACBONATE_API(3)
        obj['base3']=Alkaline.DFB_CACBONATE_API(6)
        obj['CACBONATE1'] = Alkaline.DF_CACBONATE_API(0)
        obj['CACBONATE2'] = Alkaline.DF_CACBONATE_API(3)
        obj['CACBONATE3'] = Alkaline.DF_CACBONATE_API(6)
        obj2={}
        obj2['PWHT']=True
        obj2['CRACK_PRESENT']=False
        obj2['ph'] =4
        obj2['CARBON_ALLOY']=True
        obj2['AQUEOUS_OPERATOR']=True
        Alkaline2=Detail_DM_CAL.Df_Cacbonate(False,bool(1),CO3_CONTENT,obj2['ph'],CARBON_ALLOY,AQUEOUS_OPERATOR,'E',0, rwassessment.assessmentdate, commisstiondate, ComponentNumber)
        obj2['ALKALINE_INSP_EFF'] = Alkaline2.CACBONATE_INSP_EFF
        obj2['ALKALINE_INSP_NUM'] = Alkaline2.CACBONATE_INSP_NUM
        obj2['co3'] = Alkaline2.CO3_CONTENT
        obj2['ph'] = Alkaline2.PH
        obj2['Susceptibility'] = Alkaline2.GET_SUSCEPTIBILITY_CARBONATE()
        obj2['PWHT'] = PWHT
        obj2['SVI'] = Alkaline2.SVI_CARBONATE()
        obj2['age1'] = Alkaline2.GET_AGE()
        obj2['age2'] = Alkaline2.GET_AGE() + 3
        obj2['age3'] = Alkaline2.GET_AGE() + 6
        obj2['base1'] = Alkaline2.DFB_CACBONATE_API(0)
        obj2['base2'] = Alkaline2.DFB_CACBONATE_API(3)
        obj2['base3'] = Alkaline2.DFB_CACBONATE_API(6)
        obj2['CACBONATE1'] = Alkaline2.DF_CACBONATE_API(0)
        obj2['CACBONATE2'] = Alkaline2.DF_CACBONATE_API(3)
        obj2['CACBONATE3'] = Alkaline2.DF_CACBONATE_API(6)
        if 'expertHelp' in request.POST:
            dataCO3X = []
            dataCO3Y0 = []
            dataCO3Y1 = []
            dataCO3Y2 = []
            dataphX = []
            dataphY0 = []
            dataphY1 = []
            dataphY2 = []
            EquipmentType = models.EquipmentType.objects.get(
                equipmenttypeid=models.EquipmentMaster.objects.get(
                    equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            objsulphide = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objsulphide['ComponentNumber'] = ComponentNumber
            objsulphide['EquipmentNumber'] = EquipmentName
            objsulphide['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objsulphide['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objsulphide['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objsulphide['PH'] = rwstream.waterph
            objsulphide['H2SContent'] = rwstream.h2sinwater
            objsulphide['PRESENT_CYANIDE'] = bool(rwstream.cyanide)
            objsulphide['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objsulphide['PWHT'] = bool(rwequipment.pwht)
            objsulphide['BRINNEL_HARDNESS'] = rwcomponent.brinnelhardness
            objsulphide['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objsulphide['AQUEOUS_OPERATOR'] = bool(rwstream.aqueousoperation)
            objsulphide['ENVIRONMENT_H2S_CONTENT'] = bool(rwstream.h2s)
            #
            objHicsohic_H2s = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHicsohic_H2s['ComponentNumber'] = ComponentNumber
            objHicsohic_H2s['EquipmentNumber'] = EquipmentName
            objHicsohic_H2s['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHicsohic_H2s['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHicsohic_H2s['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHicsohic_H2s['PH'] = rwstream.waterph
            objHicsohic_H2s['H2SContent'] = rwstream.h2sinwater
            objHicsohic_H2s['PRESENT_CYANIDE'] = bool(rwstream.cyanide)
            objHicsohic_H2s['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objHicsohic_H2s['PWHT'] = bool(rwequipment.pwht)

            objHicsohic_H2s['SULFUR_CONTENT'] = rwmaterial.sulfurcontent
            objHicsohic_H2s['OnlineMonitoring'] = rwequipment.onlinemonitoring
            objHicsohic_H2s['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objHicsohic_H2s['AQUEOUS_OPERATOR'] = bool(rwstream.aqueousoperation)
            objHicsohic_H2s['ENVIRONMENT_H2S_CONTENT'] = bool(rwstream.h2s)


            #
            #
            objCLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCLSCC['ComponentNumber'] = ComponentNumber
            objCLSCC['EquipmentNumber'] = EquipmentName
            objCLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objCLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCLSCC['ph'] = rwstream.waterph
            objCLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCLSCC['MIN_OP_TEMP']=rwstream.minoperatingtemperature
            objCLSCC['CHLORIDE_ION_CONTENT'] = rwstream.chloride
            objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'] = bool(rwstream.materialexposedtoclint)
            objCLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)




            if (EquipmentType == 'Tank'):
                dataCoF = models.RwCaTank.objects.get(id=proposalID).consequence
                dataPoF = ReCalculate.calculateHelpTank(proposalID)
            else:
                dataCoF = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
                dataPoF = ReCalculate.calculateHelpNormal(proposalID)
            #     thay doi obj['CO3']
            for i in range(20, 0, -2):
                xx = obj['co3'] - i
                if xx>=0:
                    dataCO3X.append(str(xx))

                    Alkaline = Detail_DM_CAL.Df_Cacbonate(obj['CRACK_PRESENT'], obj['PWHT'], xx, obj['ph'],
                                                          obj['CARBON_ALLOY'], obj['AQUEOUS_OPERATOR'], 'E', 0,
                                                          rwassessment.assessmentdate, commisstiondate,
                                                          ComponentNumber)
                    Alkaline0 = Alkaline.DF_CACBONATE_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['cacbonat'] = Alkaline0
                    dataCO3Y0.append(Alkaline0)
                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataCO3Y1.append(temp['PoF'])
                    dataCO3Y2.append(temp['damageTotal'] * dataCoF)
            for i in range(0, 20, 2):
                xx = obj['co3'] + i;
                dataCO3X.append(str(xx));

                Alkaline = Detail_DM_CAL.Df_Cacbonate(obj['CRACK_PRESENT'], obj['PWHT'], xx, obj['ph'],
                                                      obj['CARBON_ALLOY'], obj['AQUEOUS_OPERATOR'], 'E', 0,
                                                      rwassessment.assessmentdate, commisstiondate,
                                                      ComponentNumber)
                Alkaline0 = Alkaline.DF_CACBONATE_API(0)
                dataPoFTemp = dataPoF
                dataPoFTemp['cacbonat'] = Alkaline0
                dataCO3Y0.append(Alkaline0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataCO3Y1.append(temp['PoF'])
                dataCO3Y2.append(temp['damageTotal'] * dataCoF)
                #     thay doi obj['ph']
            for i in range(20, 0, -2):
                xx = obj['ph'] - i
                if xx >= 0:
                    dataphX.append(str(xx))

                    Alkaline = Detail_DM_CAL.Df_Cacbonate(obj['CRACK_PRESENT'], obj['PWHT'], obj['co3'],xx ,
                                                          obj['CARBON_ALLOY'], obj['AQUEOUS_OPERATOR'], 'E', 0,
                                                          rwassessment.assessmentdate, commisstiondate,
                                                          ComponentNumber)
                    sulphide = Detail_DM_CAL.Df_Sulphide(xx, objsulphide['H2SContent'],
                                                         objsulphide['PRESENT_CYANIDE'],
                                                         objsulphide['CRACK_PRESENT'], objsulphide['PWHT'],
                                                         objsulphide['BRINNEL_HARDNESS'],
                                                         objsulphide['CARBON_ALLOY'],
                                                         objsulphide['AQUEOUS_OPERATOR'],
                                                         objsulphide['ENVIRONMENT_H2S_CONTENT'], 'E', 0,
                                                         rwassessment.assessmentdate,
                                                         commisstiondate, ComponentNumber)
                    Hicsohic_H2s = Detail_DM_CAL.Df_Hicsohic_H2s(xx,
                                                                 objHicsohic_H2s['H2SContent'],
                                                                 objHicsohic_H2s['PRESENT_CYANIDE'],
                                                                 objHicsohic_H2s['CRACK_PRESENT'],
                                                                 objHicsohic_H2s['PWHT'],
                                                                 objHicsohic_H2s['SULFUR_CONTENT'],
                                                                 objHicsohic_H2s['OnlineMonitoring'],
                                                                 objHicsohic_H2s['CARBON_ALLOY'],
                                                                 objHicsohic_H2s['AQUEOUS_OPERATOR'],
                                                                 objHicsohic_H2s['ENVIRONMENT_H2S_CONTENT'], 'E',
                                                                 0, rwassessment.assessmentdate,
                                                                 commisstiondate,
                                                                 ComponentNumber)
                    CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'],
                                                   objCLSCC['MAX_OP_TEMP'], objCLSCC['MIN_OP_TEMP'],
                                                   objCLSCC['CHLORIDE_ION_CONTENT'],
                                                   objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                                   objCLSCC['AUSTENITIC_STEEL']
                                                   , 'E', 0,
                                                   rwassessment.assessmentdate, commisstiondate,
                                                   ComponentNumber)
                    Alkaline0 = Alkaline.DF_CACBONATE_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['cacbonat'] = Alkaline0
                    dataPoFTemp['sulphide'] = sulphide.DF_SULPHIDE_API(0)
                    dataPoFTemp['hicsohic_h2s'] = Hicsohic_H2s.DF_HICSOHIC_H2S_API(0)
                    dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                    dataphY0.append(Alkaline0)
                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataphY1.append(temp['PoF'])
                    dataphY2.append(temp['damageTotal'] * dataCoF)
            for i in range(0, 20, 2):
                xx = obj['ph'] + i;
                dataphX.append(str(xx));

                Alkaline = Detail_DM_CAL.Df_Cacbonate(obj['CRACK_PRESENT'], obj['PWHT'], obj['co3'], xx,
                                                      obj['CARBON_ALLOY'], obj['AQUEOUS_OPERATOR'], 'E', 0,
                                                      rwassessment.assessmentdate, commisstiondate,
                                                      ComponentNumber)
                sulphide = Detail_DM_CAL.Df_Sulphide(xx, objsulphide['H2SContent'],
                                                     objsulphide['PRESENT_CYANIDE'],
                                                     objsulphide['CRACK_PRESENT'], objsulphide['PWHT'],
                                                     objsulphide['BRINNEL_HARDNESS'],
                                                     objsulphide['CARBON_ALLOY'],
                                                     objsulphide['AQUEOUS_OPERATOR'],
                                                     objsulphide['ENVIRONMENT_H2S_CONTENT'], 'E', 0,
                                                     rwassessment.assessmentdate,
                                                     commisstiondate, ComponentNumber)
                Hicsohic_H2s = Detail_DM_CAL.Df_Hicsohic_H2s(xx,
                                                             objHicsohic_H2s['H2SContent'],
                                                             objHicsohic_H2s['PRESENT_CYANIDE'],
                                                             objHicsohic_H2s['CRACK_PRESENT'],
                                                             objHicsohic_H2s['PWHT'],
                                                             objHicsohic_H2s['SULFUR_CONTENT'],
                                                             objHicsohic_H2s['OnlineMonitoring'],
                                                             objHicsohic_H2s['CARBON_ALLOY'],
                                                             objHicsohic_H2s['AQUEOUS_OPERATOR'],
                                                             objHicsohic_H2s['ENVIRONMENT_H2S_CONTENT'], 'E',
                                                             0, rwassessment.assessmentdate,
                                                             commisstiondate,
                                                             ComponentNumber)
                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'],
                                               objCLSCC['MAX_OP_TEMP'], objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, commisstiondate,
                                               ComponentNumber)
                Alkaline0 = Alkaline.DF_CACBONATE_API(0)
                dataPoFTemp = dataPoF
                dataPoFTemp['cacbonat'] = Alkaline0
                dataPoFTemp['sulphide'] = sulphide.DF_SULPHIDE_API(0)
                dataPoFTemp['hicsohic_h2s'] = Hicsohic_H2s.DF_HICSOHIC_H2S_API(0)
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataphY0.append(Alkaline0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataphY1.append(temp['PoF'])
                dataphY2.append(temp['damageTotal'] * dataCoF)
            return render(request, 'FacilityUI/risk_summary/expertHelpAlkaline.html',
                          {'page': 'lining', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                           'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,
                           'dataCO3X': dataCO3X, 'dataCO3Y0': dataCO3Y0, 'dataCO3Y1': dataCO3Y1,
                           'dataCO3Y2': dataCO3Y2,'dataphX':dataphX,'dataphY0':dataphY0,'dataphY1':dataphY1,'dataphY2':dataphY2})
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showAlkaline.html',
                  {'page': 'lining', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count,'const':const, 'a': obj,'b':obj2,'notiVerification':notiVerification,'siteid':siteid})
def showCaustic(request,proposalID,const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj={}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
        equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT']=bool(rwcomponent.crackspresent)
        obj['HEAT_TREATMENT']=rwmaterial.heattreatment
        obj['NaOHConcentration']=rwstream.naohconcentration
        obj['HEAT_TRACE']=bool(rwequipment.heattraced)
        obj['STEAM_OUT']=bool(rwequipment.steamoutwaterflush)
        obj['MAX_OP_TEMP']=rwstream.maxoperatingtemperature
        obj['CARBON_ALLOY']=bool(rwmaterial.carbonlowalloy)
        obj['PWHT']=bool(rwequipment.pwht)

        caustic=Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'],obj['HEAT_TREATMENT'],obj['NaOHConcentration'],obj['HEAT_TRACE'], obj['STEAM_OUT'],obj['MAX_OP_TEMP'],obj['CARBON_ALLOY'],'E', 0,0,obj['PWHT'], rwassessment.assessmentdate, commisstiondate, ComponentNumber)
        obj['CAUSTIC_INSP_EFF'] = caustic.CAUSTIC_INSP_EFF
        obj['CACBONATE_INSP_NUM'] = caustic.CACBONATE_INSP_NUM
        obj['CAUSTIC_INSP_NUM'] = caustic.CAUSTIC_INSP_NUM
        obj['plotinArea']=caustic.plotinArea
        obj['Susceptibility']=caustic.getSusceptibility_Caustic
        obj['SVI']=caustic.SVI_CAUSTIC
        obj['age1']=caustic.GET_AGE()
        obj['age2']=caustic.GET_AGE()+3
        obj['age3']=caustic.GET_AGE()+6
        obj['base1']=caustic.DFB_CAUSTIC_API(0)
        obj['base2']=caustic.DFB_CAUSTIC_API(3)
        obj['base3']=caustic.DFB_CAUSTIC_API(6)
        obj['caustic1']=caustic.DF_CAUSTIC_API(0)
        obj['caustic2']=caustic.DF_CAUSTIC_API(3)
        obj['caustic3']=caustic.DF_CAUSTIC_API(6)
        if 'expertHelp' in request.POST:
            EquipmentType = models.EquipmentType.objects.get(
                equipmenttypeid=models.EquipmentMaster.objects.get(
                    equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            if (EquipmentType == 'Tank'):
                dataCoF = models.RwCaTank.objects.get(id=proposalID).consequence
                dataPoF = ReCalculate.calculateHelpTank(proposalID)
            else:
                dataCoF = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
                dataPoF = ReCalculate.calculateHelpNormal(proposalID)
            dataMAX_OP_TEMPX = []
            dataMAX_OP_TEMPY0 = []
            dataMAX_OP_TEMPY1 = []
            dataMAX_OP_TEMPY2 = []
            #
            objHIC_SOHIC_HF = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHIC_SOHIC_HF['ComponentNumber'] = ComponentNumber
            objHIC_SOHIC_HF['EquipmentNumber'] = EquipmentName
            objHIC_SOHIC_HF['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHIC_SOHIC_HF['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHIC_SOHIC_HF['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHIC_SOHIC_HF['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objHIC_SOHIC_HF['HF_PRESENT'] = bool(rwstream.hydrofluoric)
            objHIC_SOHIC_HF['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objHIC_SOHIC_HF['PWHT'] = bool(rwequipment.pwht)
            objHIC_SOHIC_HF['SULFUR_CONTENT'] = rwmaterial.sulfurcontent
            objHIC_SOHIC_HF['OnlineMonitoring'] = rwequipment.onlinemonitoring
            #
            objHSCHF = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHSCHF['ComponentNumber'] = ComponentNumber
            objHSCHF['EquipmentNumber'] = EquipmentName
            objHSCHF['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHSCHF['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHSCHF['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHSCHF['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objHSCHF['HF_PRESENT'] = bool(rwstream.hydrofluoric)
            objHSCHF['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objHSCHF['PWHT'] = bool(rwequipment.pwht)
            objHSCHF['BRINNEL_HARDNESS'] = rwcomponent.brinnelhardness
            #
            objAlkaline = {}
            objAlkaline['ComponentNumber'] = ComponentNumber
            objAlkaline['EquipmentNumber'] = EquipmentName
            objAlkaline['Assessment'] = rwassessment.proposalname
            objAlkaline['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objAlkaline['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            CRACK_PRESENT = bool(rwcomponent.crackspresent)
            obj['CRACK_PRESENT'] = CRACK_PRESENT
            PWHT = bool(rwequipment.pwht)
            # PWHT=bool(1)
            CO3_CONTENT = rwstream.co3concentration
            PH = rwstream.waterph
            CARBON_ALLOY = bool(rwmaterial.carbonlowalloy)
            objAlkaline['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objAlkaline['PWHT'] = PWHT
            objAlkaline['co3'] = CO3_CONTENT
            objAlkaline['ph'] = PH
            objAlkaline['AQUEOUS_OPERATOR'] = bool(rwstream.aqueousoperation)
            #
            objsulphide = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objsulphide['ComponentNumber'] = ComponentNumber
            objsulphide['EquipmentNumber'] = EquipmentName
            objsulphide['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objsulphide['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objsulphide['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objsulphide['PH'] = rwstream.waterph
            objsulphide['H2SContent'] = rwstream.h2sinwater
            objsulphide['PRESENT_CYANIDE'] = bool(rwstream.cyanide)
            objsulphide['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objsulphide['PWHT'] = bool(rwequipment.pwht)
            objsulphide['BRINNEL_HARDNESS'] = rwcomponent.brinnelhardness
            objsulphide['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objsulphide['AQUEOUS_OPERATOR'] = bool(rwstream.aqueousoperation)
            objsulphide['ENVIRONMENT_H2S_CONTENT'] = bool(rwstream.h2s)
            #
            objHicsohic_H2s = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHicsohic_H2s['ComponentNumber'] = ComponentNumber
            objHicsohic_H2s['EquipmentNumber'] = EquipmentName
            objHicsohic_H2s['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHicsohic_H2s['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHicsohic_H2s['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHicsohic_H2s['PH'] = rwstream.waterph
            objHicsohic_H2s['H2SContent'] = rwstream.h2sinwater
            objHicsohic_H2s['PRESENT_CYANIDE'] = bool(rwstream.cyanide)
            objHicsohic_H2s['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objHicsohic_H2s['PWHT'] = bool(rwequipment.pwht)

            objHicsohic_H2s['SULFUR_CONTENT'] = rwmaterial.sulfurcontent
            objHicsohic_H2s['OnlineMonitoring'] = rwequipment.onlinemonitoring
            objHicsohic_H2s['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objHicsohic_H2s['AQUEOUS_OPERATOR'] = bool(rwstream.aqueousoperation)
            objHicsohic_H2s['ENVIRONMENT_H2S_CONTENT'] = bool(rwstream.h2s)

            # PASCC-PTA
            objPASCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objPASCC['ComponentNumber'] = ComponentNumber
            objPASCC['EquipmentNumber'] = EquipmentName
            objPASCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objPASCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objPASCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objPASCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objPASCC['ExposedSH2OOperation'] = bool(rwequipment.presencesulphideso2)
            objPASCC['ExposedSH2OShutdown'] = bool(rwequipment.presencesulphideso2shutdown)
            objPASCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objPASCC['ThermalHistory'] = rwequipment.thermalhistory
            objPASCC['PTAMaterial'] = rwmaterial.ptamaterialcode
            objPASCC['DOWNTIME_PROTECTED'] = bool(rwequipment.downtimeprotectionused)
            objPASCC['PTA_SUSCEP'] = bool(rwmaterial.ispta)
            objPASCC['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objPASCC['NICKEL_ALLOY'] = bool(rwmaterial.nickelbased)
            objPASCC['EXPOSED_SULFUR'] = bool(rwstream.exposedtosulphur)
            # Df_CLSCC
            objCLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCLSCC['ComponentNumber'] = ComponentNumber
            objCLSCC['EquipmentNumber'] = EquipmentName
            objCLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objCLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCLSCC['ph'] = rwstream.waterph
            objCLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCLSCC['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCLSCC['CHLORIDE_ION_CONTENT'] = rwstream.chloride
            objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'] = bool(rwstream.materialexposedtoclint)
            objCLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            # Df_EXTERNAL_CORROSION
            objExCor = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objExCor['ComponentNumber'] = ComponentNumber
            objExCor['EquipmentNumber'] = EquipmentName
            objExCor['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            objExCor['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objExCor['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objExCor['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objExCor['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objExCor['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objExCor['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objExCor['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objExCor['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objExCor['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objExCor['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objExCor['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objExCor['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objExCor['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objExCor['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objExCor['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objExCor['EXTERNAL_INSP_EFF'] = 'E'
            objExCor['EXTERNAL_INSP_NUM'] = 0
            objExCor['NoINSP_EXTERNAL'] = 0
            objExCor['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objExCor['NomalThick'] = rwcomponent.nominalthickness
            objExCor['CurrentThick'] = rwcomponent.currentthickness
            objExCor['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objExCor['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objExCor['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objExCor['ShapeFactor'] = comptype.shapefactor
            objExCor['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objExCor['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objExCor['AllowableStress'] = rwcomponent.allowablestress
            objExCor['MinThickReq'] = rwcomponent.minreqthickness
            objExCor['StructuralThickness'] = rwcomponent.structuralthickness
            objExCor['Pressure'] = rwmaterial.designpressure
            objExCor['Diametter'] = rwcomponent.nominaldiameter
            objExCor['shape'] = API_COMPONENT_TYPE_NAME = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            # Df_CUI
            objCui = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCui['ComponentNumber'] = ComponentNumber
            objCui['EquipmentNumber'] = EquipmentName
            objCui['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            objCui['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCui['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCui['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCui['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objCui['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objCui['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objCui['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objCui['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objCui['CUI_PERCENT_7'] = rwexcor.plus121toplus135
            objCui['CUI_PERCENT_8'] = rwexcor.plus135toplus162
            objCui['CUI_PERCENT_9'] = rwexcor.plus162toplus176
            objCui['INSULATION_TYPE'] = rwcoat.externalinsulationtype
            objCui['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCui['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCui['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objCui['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objCui['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCui['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objCui['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCui['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCui['CUI_INSP_EFF'] = 'E'
            objCui['CUI_INSP_NUM'] = 0
            objCui['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objCui['NomalThick'] = rwcomponent.nominalthickness
            objCui['CurrentThick'] = rwcomponent.currentthickness
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            # chua thay dung
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objCui['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objCui['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objCui['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objCui['AllowableStress'] = rwcomponent.allowablestress
            objCui['MinThickReq'] = rwcomponent.minreqthickness
            objCui['StructuralThickness'] = rwcomponent.structuralthickness
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['Diametter'] = rwcomponent.nominaldiameter
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['COMPONENT_INSTALL_DATE'] = COMPONENT_INSTALL_DATE
            objCui['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objCui['shape'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            # EXTERNAL CLSCC
            objEXTERN_CLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objEXTERN_CLSCC['ComponentNumber'] = ComponentNumber
            objEXTERN_CLSCC['EquipmentNumber'] = EquipmentName
            objEXTERN_CLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objEXTERN_CLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objEXTERN_CLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objEXTERN_CLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objEXTERN_CLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objEXTERN_CLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objEXTERN_CLSCC['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # CUI_CLSCC
            objCUI_CLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCUI_CLSCC['ComponentNumber'] = ComponentNumber
            objCUI_CLSCC['EquipmentNumber'] = EquipmentName
            objCUI_CLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            objCUI_CLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCUI_CLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCUI_CLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCUI_CLSCC['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCUI_CLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCUI_CLSCC['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCUI_CLSCC['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCUI_CLSCC['INSULATION_CHLORIDE'] = bool(rwcoat.insulationcontainschloride)
            objCUI_CLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objCUI_CLSCC['EXTERNAL_INSULATION'] = bool(rwcoat.externalinsulation)

            objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCUI_CLSCC['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCUI_CLSCC['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            # HTHA
            objHTHA = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHTHA['ComponentNumber'] = ComponentNumber
            objHTHA['EquipmentNumber'] = EquipmentName
            objHTHA['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHTHA['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHTHA['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHTHA['HTHA_PRESSURE'] = rwstream.h2spartialpressure * 0.006895
            objHTHA['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objHTHA['HTHADamageObserved'] = rwcomponent.hthadamage
            objHTHA['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objHTHA['MATERIAL_SUSCEP_HTHA'] = bool(rwmaterial.ishtha)
            objHTHA['HTHA_MATERIAL'] = rwmaterial.hthamaterialcode
            objHTHA['Hydrogen'] = rwstream.hydrogen
            # TEMP_EMBRITTLE
            objTEMP_EMBRITTLE = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objTEMP_EMBRITTLE['ComponentNumber'] = ComponentNumber
            objTEMP_EMBRITTLE['EquipmentNumber'] = EquipmentName
            objTEMP_EMBRITTLE['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objTEMP_EMBRITTLE['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objTEMP_EMBRITTLE['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objTEMP_EMBRITTLE['TEMPER_SUSCEP'] = bool(rwmaterial.temper)
            objTEMP_EMBRITTLE['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objTEMP_EMBRITTLE['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objTEMP_EMBRITTLE['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objTEMP_EMBRITTLE['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            objTEMP_EMBRITTLE['REF_TEMP'] = rwmaterial.referencetemperature
            objTEMP_EMBRITTLE['DELTA_FATT'] = rwcomponent.deltafatt
            objTEMP_EMBRITTLE['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objTEMP_EMBRITTLE['PWHT'] = bool(rwequipment.pwht)
            objTEMP_EMBRITTLE['BRITTLE_THICK'] = rwcomponent.brittlefracturethickness

            objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # Df_885
            obj885 = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            obj885['ComponentNumber'] = ComponentNumber
            obj885['EquipmentNumber'] = EquipmentName
            obj885['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            obj885['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            obj885['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            obj885['CHROMIUM_12'] = bool(rwmaterial.chromemoreequal12)
            obj885['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            obj885['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            obj885['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            obj885['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            obj885['REF_TEMP'] = rwmaterial.referencetemperature
            obj885['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            obj885['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # dfSigma
            objSigma = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objSigma['ComponentNumber'] = ComponentNumber
            objSigma['EquipmentNumber'] = EquipmentName
            objSigma['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objSigma['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objSigma['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objSigma['MIN_TEM'] = rwstream.minoperatingtemperature
            objSigma['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objSigma['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objSigma['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            objSigma['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objSigma['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation

            objSigma['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objSigma['PERCENT_SIGMA'] = rwmaterial.sigmaphase
            # chua thay su dung MIN_DESIGN_TEMP
            objSigma['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # Amine
            objAmine = {}
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            ComponentNumber = str(comp.componentnumber)
            objAmine['ComponentNumber'] = ComponentNumber
            objAmine['EquipmentName'] = EquipmentName
            objAmine['Assessment'] = rwassessment.proposalname

            objAmine['AMINE_EXPOSED'] = bool(rwstream.exposedtogasamine)
            objAmine['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objAmine['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objAmine['AMINE_SOLUTION'] = rwstream.aminesolution

            objAmine['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objAmine['HEAT_TRACE'] = bool(rwequipment.heattraced)
            objAmine['STEAM_OUT'] = bool(rwequipment.steamoutwaterflush)

            objAmine['AMINE_INSP_EFF'] = 'E'
            objAmine['AMINE_INSP_NUM'] = 0
            objAmine['PWHT'] = bool(rwequipment.pwht)
            objAmine['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objAmine['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objAmine['ComponentNumber'] = str(comp.componentnumber)
            # MAX_OP_TEMP
            for i in range(20, 0, -2):
                xx = obj['MAX_OP_TEMP'] - i;
                dataMAX_OP_TEMPX.append(str(xx));

                anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'], objAmine['CRACK_PRESENT'],
                                               objAmine['AMINE_SOLUTION'], xx, objAmine['HEAT_TRACE'],
                                               objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'], objAmine['AMINE_INSP_NUM'],
                                               objAmine['PWHT'], rwassessment.assessmentdate, commisstiondate,
                                               objAmine['ComponentNumber'])

                PASCC = Detail_DM_CAL.Df_PTA(objPASCC['CRACK_PRESENT'], objPASCC['ExposedSH2OOperation'],
                                             objPASCC['ExposedSH2OShutdown'],
                                             xx, objPASCC['ThermalHistory'],
                                             objPASCC['PTAMaterial'],
                                             objPASCC['DOWNTIME_PROTECTED'], objPASCC['PTA_SUSCEP'],
                                             objPASCC['CARBON_ALLOY'], objPASCC['NICKEL_ALLOY'],
                                             objPASCC['EXPOSED_SULFUR'], 'E', 0,
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber)

                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'], xx,
                                               objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, commisstiondate,
                                               ComponentNumber)

                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(commisstiondate,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         xx,
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         commisstiondate,
                                                                         ComponentNumber)

                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], xx,
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, commisstiondate,
                                            ComponentNumber)

                EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(objEXTERN_CLSCC['CRACK_PRESENT'],
                                                             objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                             xx,
                                                             'E', 0,
                                                             objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                             objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                             objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                             rwassessment.assessmentdate, commisstiondate,
                                                             ComponentNumber)
                CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(objCUI_CLSCC['CRACK_PRESENT'],
                                                       objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                       xx,
                                                       objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                       objCUI_CLSCC['INSULATION_CONDITION'],
                                                       objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                       objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                       objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                       objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                       objCUI_CLSCC['MIN_OP_TEMP'],
                                                       objCUI_CLSCC['EXTERN_COAT_QUALITY'],

                                                       rwassessment.assessmentdate, commisstiondate,
                                                       ComponentNumber)

                HTHA = Detail_DM_CAL.DF_HTHA(objHTHA['HTHA_PRESSURE'], objHTHA['CRITICAL_TEMP'],
                                             objHTHA['HTHADamageObserved'],
                                             xx, objHTHA['MATERIAL_SUSCEP_HTHA'], objHTHA['HTHA_MATERIAL'],
                                             objHTHA['Hydrogen'],
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber)

                TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(objTEMP_EMBRITTLE['TEMPER_SUSCEP'],
                                                                 objTEMP_EMBRITTLE['CARBON_ALLOY'],
                                                                 xx,
                                                                 objTEMP_EMBRITTLE['MIN_OP_TEMP'],
                                                                 objTEMP_EMBRITTLE['PRESSSURE_CONTROL'],
                                                                 objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'],
                                                                 objTEMP_EMBRITTLE['REF_TEMP'],
                                                                 objTEMP_EMBRITTLE['DELTA_FATT'],
                                                                 objTEMP_EMBRITTLE['CRITICAL_TEMP'],
                                                                 objTEMP_EMBRITTLE['PWHT'],
                                                                 objTEMP_EMBRITTLE['BRITTLE_THICK'],
                                                                 objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'],
                                                                 rwassessment.assessmentdate, commisstiondate,
                                                                 ComponentNumber)
                df885 = Detail_DM_CAL.Df_885(obj885['CHROMIUM_12'], obj885['MIN_OP_TEMP'], xx,
                                             obj885['PRESSSURE_CONTROL'], obj885['MIN_TEMP_PRESSURE'],
                                             obj885['REF_TEMP'],
                                             obj885['CRITICAL_TEMP'], obj885['MIN_DESIGN_TEMP'],
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber)

                dfSigma = Detail_DM_CAL.Df_SIGMA(objSigma['MIN_TEM'], objSigma['AUSTENITIC_STEEL'],
                                                 objSigma['MIN_OP_TEMP'],
                                                 xx,
                                                 objSigma['PRESSSURE_CONTROL'], objSigma['MIN_TEMP_PRESSURE'],
                                                 objSigma['CRITICAL_TEMP'],
                                                 objSigma['PERCENT_SIGMA'],
                                                 rwassessment.assessmentdate, commisstiondate,
                                                 ComponentNumber)

                caustic = Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'], obj['HEAT_TREATMENT'],
                                                   obj['NaOHConcentration'],
                                                   obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                                   xx,
                                                   obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   commisstiondate, ComponentNumber)
                caustic0 = caustic.DF_CAUSTIC_API(0)
                dataPoFTemp = dataPoF

                dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
                dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
                dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
                dataPoFTemp['htha'] = HTHA.DF_HTHA_API(0)
                dataPoFTemp['embrittle'] = TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
                dataPoFTemp['885'] = df885.DF_885_API(0)
                dataPoFTemp['sigma'] = dfSigma.DF_SIGMA_API(0)
                dataPoFTemp['caustic'] = caustic0
                # dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataMAX_OP_TEMPY0.append(caustic0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMAX_OP_TEMPY1.append(temp['PoF'])
                dataMAX_OP_TEMPY2.append(temp['damageTotal'] * dataCoF)
            #     MAX_OP_TEMP
            for i in range(0, 20, 2):
                xx = obj['MAX_OP_TEMP'] + i;
                dataMAX_OP_TEMPX.append(str(xx));

                anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                               objAmine['CRACK_PRESENT'],
                                               objAmine['AMINE_SOLUTION'], xx, objAmine['HEAT_TRACE'],
                                               objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                               objAmine['AMINE_INSP_NUM'],
                                               objAmine['PWHT'], rwassessment.assessmentdate, commisstiondate,
                                               objAmine['ComponentNumber'])

                PASCC = Detail_DM_CAL.Df_PTA(objPASCC['CRACK_PRESENT'], objPASCC['ExposedSH2OOperation'],
                                             objPASCC['ExposedSH2OShutdown'],
                                             xx, objPASCC['ThermalHistory'],
                                             objPASCC['PTAMaterial'],
                                             objPASCC['DOWNTIME_PROTECTED'], objPASCC['PTA_SUSCEP'],
                                             objPASCC['CARBON_ALLOY'], objPASCC['NICKEL_ALLOY'],
                                             objPASCC['EXPOSED_SULFUR'], 'E', 0,
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber)

                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'], xx,
                                               objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, commisstiondate,
                                               ComponentNumber)

                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(commisstiondate,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         xx,
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         commisstiondate,
                                                                         ComponentNumber)

                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], xx,
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, commisstiondate,
                                            ComponentNumber)

                EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(objEXTERN_CLSCC['CRACK_PRESENT'],
                                                             objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                             xx,
                                                             'E', 0,
                                                             objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                             objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                             objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                             rwassessment.assessmentdate, commisstiondate,
                                                             ComponentNumber)
                CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(objCUI_CLSCC['CRACK_PRESENT'],
                                                       objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                       xx,
                                                       objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                       objCUI_CLSCC['INSULATION_CONDITION'],
                                                       objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                       objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                       objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                       objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                       objCUI_CLSCC['MIN_OP_TEMP'],
                                                       objCUI_CLSCC['EXTERN_COAT_QUALITY'],

                                                       rwassessment.assessmentdate, commisstiondate,
                                                       ComponentNumber)

                HTHA = Detail_DM_CAL.DF_HTHA(objHTHA['HTHA_PRESSURE'], objHTHA['CRITICAL_TEMP'],
                                             objHTHA['HTHADamageObserved'],
                                             xx, objHTHA['MATERIAL_SUSCEP_HTHA'], objHTHA['HTHA_MATERIAL'],
                                             objHTHA['Hydrogen'],
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber)

                TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(objTEMP_EMBRITTLE['TEMPER_SUSCEP'],
                                                                 objTEMP_EMBRITTLE['CARBON_ALLOY'],
                                                                 xx,
                                                                 objTEMP_EMBRITTLE['MIN_OP_TEMP'],
                                                                 objTEMP_EMBRITTLE['PRESSSURE_CONTROL'],
                                                                 objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'],
                                                                 objTEMP_EMBRITTLE['REF_TEMP'],
                                                                 objTEMP_EMBRITTLE['DELTA_FATT'],
                                                                 objTEMP_EMBRITTLE['CRITICAL_TEMP'],
                                                                 objTEMP_EMBRITTLE['PWHT'],
                                                                 objTEMP_EMBRITTLE['BRITTLE_THICK'],
                                                                 objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'],
                                                                 rwassessment.assessmentdate, commisstiondate,
                                                                 ComponentNumber)
                df885 = Detail_DM_CAL.Df_885(obj885['CHROMIUM_12'], obj885['MIN_OP_TEMP'], xx,
                                             obj885['PRESSSURE_CONTROL'], obj885['MIN_TEMP_PRESSURE'],
                                             obj885['REF_TEMP'],
                                             obj885['CRITICAL_TEMP'], obj885['MIN_DESIGN_TEMP'],
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber)

                dfSigma = Detail_DM_CAL.Df_SIGMA(objSigma['MIN_TEM'], objSigma['AUSTENITIC_STEEL'],
                                                 objSigma['MIN_OP_TEMP'],
                                                 xx,
                                                 objSigma['PRESSSURE_CONTROL'], objSigma['MIN_TEMP_PRESSURE'],
                                                 objSigma['CRITICAL_TEMP'],
                                                 objSigma['PERCENT_SIGMA'],
                                                 rwassessment.assessmentdate, commisstiondate,
                                                 ComponentNumber)

                caustic = Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'], obj['HEAT_TREATMENT'],
                                                   obj['NaOHConcentration'],
                                                   obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                                   xx,
                                                   obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   commisstiondate, ComponentNumber)
                caustic0 = caustic.DF_CAUSTIC_API(0)
                dataPoFTemp = dataPoF

                dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
                dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
                dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
                dataPoFTemp['htha'] = HTHA.DF_HTHA_API(0)
                dataPoFTemp['embrittle'] = TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
                dataPoFTemp['885'] = df885.DF_885_API(0)
                dataPoFTemp['sigma'] = dfSigma.DF_SIGMA_API(0)
                dataPoFTemp['caustic'] = caustic0
                # dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataMAX_OP_TEMPY0.append(caustic0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMAX_OP_TEMPY1.append(temp['PoF'])
                dataMAX_OP_TEMPY2.append(temp['damageTotal'] * dataCoF)
            #     NaOHConcentration
            dataNaOHConcentrationX = []
            dataNaOHConcentrationY0 = []
            dataNaOHConcentrationY1 = []
            dataNaOHConcentrationY2 = []
            for i in range(20, 0, -2):
                xx = obj['NaOHConcentration'] - i;
                if xx>=0:
                    dataNaOHConcentrationX.append(str(xx));
                    caustic = Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'], obj['HEAT_TREATMENT'],
                                                   xx,
                                                   obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                                    obj['MAX_OP_TEMP'],
                                                   obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   commisstiondate, ComponentNumber)
                    caustic0 = caustic.DF_CAUSTIC_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['caustic'] = caustic0
                    dataNaOHConcentrationY0.append(caustic0)
                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataNaOHConcentrationY1.append(temp['PoF'])
                    dataNaOHConcentrationY2.append(temp['damageTotal'] * dataCoF)
            for i in range(0, 20, 2):
                xx = obj['NaOHConcentration'] + i;
                if xx<=100:
                    dataNaOHConcentrationX.append(str(xx));
                    caustic = Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'], obj['HEAT_TREATMENT'],
                                                   xx,
                                                   obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                                    obj['MAX_OP_TEMP'],
                                                   obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   commisstiondate, ComponentNumber)
                    caustic0 = caustic.DF_CAUSTIC_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['caustic'] = caustic0
                    dataNaOHConcentrationY0.append(caustic0)
                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataNaOHConcentrationY1.append(temp['PoF'])
                    dataNaOHConcentrationY2.append(temp['damageTotal'] * dataCoF)
            #   CRACK_PRESENT
            anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                           True,
                                           objAmine['AMINE_SOLUTION'], objAmine['MAX_OP_TEMP'], objAmine['HEAT_TRACE'],
                                           objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                           objAmine['AMINE_INSP_NUM'],
                                           objAmine['PWHT'], rwassessment.assessmentdate, commisstiondate,
                                           objAmine['ComponentNumber'])
            sulphide = Detail_DM_CAL.Df_Sulphide(objsulphide['PH'], objsulphide['H2SContent'],
                                                 objsulphide['PRESENT_CYANIDE'],
                                                 True, objsulphide['PWHT'],
                                                 objsulphide['BRINNEL_HARDNESS'],
                                                 objsulphide['CARBON_ALLOY'],
                                                 objsulphide['AQUEOUS_OPERATOR'],
                                                 objsulphide['ENVIRONMENT_H2S_CONTENT'], 'E', 0,
                                                 rwassessment.assessmentdate,
                                                 commisstiondate, ComponentNumber)
            Hicsohic_H2s = Detail_DM_CAL.Df_Hicsohic_H2s(objHicsohic_H2s['PH'],
                                                         objHicsohic_H2s['H2SContent'],
                                                         objHicsohic_H2s['PRESENT_CYANIDE'],
                                                         True,
                                                         objHicsohic_H2s['PWHT'],
                                                         objHicsohic_H2s['SULFUR_CONTENT'],
                                                         objHicsohic_H2s['OnlineMonitoring'],
                                                         objHicsohic_H2s['CARBON_ALLOY'],
                                                         objHicsohic_H2s['AQUEOUS_OPERATOR'],
                                                         objHicsohic_H2s['ENVIRONMENT_H2S_CONTENT'], 'E',
                                                         0, rwassessment.assessmentdate,
                                                         commisstiondate,
                                                         ComponentNumber)
            Alkaline = Detail_DM_CAL.Df_Cacbonate(True, objAlkaline['PWHT'], objAlkaline['co3'],
                                                  objAlkaline['ph'],
                                                  objAlkaline['CARBON_ALLOY'], objAlkaline['AQUEOUS_OPERATOR'], 'E', 0,
                                                  rwassessment.assessmentdate, commisstiondate,
                                                  ComponentNumber)
            PASCC = Detail_DM_CAL.Df_PTA(True, objPASCC['ExposedSH2OOperation'],
                                         objPASCC['ExposedSH2OShutdown'],
                                         objPASCC['MAX_OP_TEMP'], objPASCC['ThermalHistory'],
                                         objPASCC['PTAMaterial'],
                                         objPASCC['DOWNTIME_PROTECTED'], objPASCC['PTA_SUSCEP'],
                                         objPASCC['CARBON_ALLOY'], objPASCC['NICKEL_ALLOY'],
                                         objPASCC['EXPOSED_SULFUR'], 'E', 0,
                                         rwassessment.assessmentdate, commisstiondate,
                                         ComponentNumber)
            CLSCC = Detail_DM_CAL.Df_CLSCC(True, objCLSCC['ph'], objCLSCC['MAX_OP_TEMP'],
                                           objCLSCC['MIN_OP_TEMP'],
                                           objCLSCC['CHLORIDE_ION_CONTENT'],
                                           objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                           objCLSCC['AUSTENITIC_STEEL']
                                           , 'E', 0,
                                           rwassessment.assessmentdate, commisstiondate,
                                           ComponentNumber)
            HSCHF = Detail_DM_CAL.Df_HSCHF(True, objHSCHF['HF_PRESENT'], objHSCHF['CARBON_ALLOY'],
                                           objHSCHF['PWHT'], objHSCHF['BRINNEL_HARDNESS'], 'E', 0,
                                           rwassessment.assessmentdate, commisstiondate,
                                           ComponentNumber)
            HIC_SOHIC_HF = Detail_DM_CAL.Df_HIC_SOHIC_HF(True,
                                                         objHIC_SOHIC_HF['HF_PRESENT'], objHIC_SOHIC_HF['CARBON_ALLOY'],
                                                         objHIC_SOHIC_HF['PWHT'], objHIC_SOHIC_HF['SULFUR_CONTENT'],
                                                         objHIC_SOHIC_HF['OnlineMonitoring'], 'E', 0,
                                                         rwassessment.assessmentdate, commisstiondate,
                                                         ComponentNumber)
            EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(True,
                                                         objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                         objEXTERN_CLSCC['MAX_OP_TEMP'],
                                                         'E', 0,
                                                         objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                         objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                         objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                         rwassessment.assessmentdate, commisstiondate,
                                                         ComponentNumber)
            CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(True, objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                   objCUI_CLSCC['MAX_OP_TEMP'],
                                                   objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                   objCUI_CLSCC['INSULATION_CONDITION'],
                                                   objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                   objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                   objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                   objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                   objCUI_CLSCC['MIN_OP_TEMP'],
                                                   objCUI_CLSCC['EXTERN_COAT_QUALITY'],
                                                   rwassessment.assessmentdate, commisstiondate,
                                                   ComponentNumber)
            caustic = Detail_DM_CAL.Df_Caustic(True, obj['HEAT_TREATMENT'],
                                               obj['NaOHConcentration'],
                                               obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                               obj['MAX_OP_TEMP'],
                                               obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                               rwassessment.assessmentdate,
                                               commisstiondate, ComponentNumber)
            dataCRACK_PRESENTX = []
            dataCRACK_PRESENTY0 = []
            dataCRACK_PRESENTY1 = []
            dataCRACK_PRESENTY2 = []
            dataCRACK_PRESENTX.append('True')
            caustic0 = caustic.DF_CAUSTIC_API(0)
            dataPoFTemp = dataPoF
            dataPoFTemp['caustic'] = caustic0
            dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
            dataPoFTemp['sulphide'] = sulphide.DF_SULPHIDE_API(0)
            dataPoFTemp['hicsohic_h2s'] = Hicsohic_H2s.DF_HICSOHIC_H2S_API(0)
            dataPoFTemp['cacbonat'] = Alkaline.DF_CACBONATE_API(0)
            dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
            dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
            dataPoFTemp['hschf'] = HSCHF.DF_HSCHF_API(0)
            dataPoFTemp['sohic'] = HIC_SOHIC_HF.DF_HIC_SOHIC_HF_API(0)
            dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
            dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
            dataCRACK_PRESENTY0.append(caustic0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataCRACK_PRESENTY1.append(temp['PoF'])
            dataCRACK_PRESENTY2.append(temp['damageTotal'] * dataCoF)
            # false
            anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                           False,
                                           objAmine['AMINE_SOLUTION'], objAmine['MAX_OP_TEMP'], objAmine['HEAT_TRACE'],
                                           objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                           objAmine['AMINE_INSP_NUM'],
                                           objAmine['PWHT'], rwassessment.assessmentdate, commisstiondate,
                                           objAmine['ComponentNumber'])
            sulphide = Detail_DM_CAL.Df_Sulphide(objsulphide['PH'], objsulphide['H2SContent'],
                                                 objsulphide['PRESENT_CYANIDE'],
                                                 False, objsulphide['PWHT'],
                                                 objsulphide['BRINNEL_HARDNESS'],
                                                 objsulphide['CARBON_ALLOY'],
                                                 objsulphide['AQUEOUS_OPERATOR'],
                                                 objsulphide['ENVIRONMENT_H2S_CONTENT'], 'E', 0,
                                                 rwassessment.assessmentdate,
                                                 commisstiondate, ComponentNumber)
            Hicsohic_H2s = Detail_DM_CAL.Df_Hicsohic_H2s(objHicsohic_H2s['PH'],
                                                         objHicsohic_H2s['H2SContent'],
                                                         objHicsohic_H2s['PRESENT_CYANIDE'],
                                                         False,
                                                         objHicsohic_H2s['PWHT'],
                                                         objHicsohic_H2s['SULFUR_CONTENT'],
                                                         objHicsohic_H2s['OnlineMonitoring'],
                                                         objHicsohic_H2s['CARBON_ALLOY'],
                                                         objHicsohic_H2s['AQUEOUS_OPERATOR'],
                                                         objHicsohic_H2s['ENVIRONMENT_H2S_CONTENT'], 'E',
                                                         0, rwassessment.assessmentdate,
                                                         commisstiondate,
                                                         ComponentNumber)
            Alkaline = Detail_DM_CAL.Df_Cacbonate(False, objAlkaline['PWHT'], objAlkaline['co3'],
                                                  objAlkaline['ph'],
                                                  objAlkaline['CARBON_ALLOY'], objAlkaline['AQUEOUS_OPERATOR'], 'E', 0,
                                                  rwassessment.assessmentdate, commisstiondate,
                                                  ComponentNumber)
            PASCC = Detail_DM_CAL.Df_PTA(False, objPASCC['ExposedSH2OOperation'],
                                         objPASCC['ExposedSH2OShutdown'],
                                         objPASCC['MAX_OP_TEMP'], objPASCC['ThermalHistory'],
                                         objPASCC['PTAMaterial'],
                                         objPASCC['DOWNTIME_PROTECTED'], objPASCC['PTA_SUSCEP'],
                                         objPASCC['CARBON_ALLOY'], objPASCC['NICKEL_ALLOY'],
                                         objPASCC['EXPOSED_SULFUR'], 'E', 0,
                                         rwassessment.assessmentdate, commisstiondate,
                                         ComponentNumber)
            CLSCC = Detail_DM_CAL.Df_CLSCC(False, objCLSCC['ph'], objCLSCC['MAX_OP_TEMP'],
                                           objCLSCC['MIN_OP_TEMP'],
                                           objCLSCC['CHLORIDE_ION_CONTENT'],
                                           objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                           objCLSCC['AUSTENITIC_STEEL']
                                           , 'E', 0,
                                           rwassessment.assessmentdate, commisstiondate,
                                           ComponentNumber)
            HSCHF = Detail_DM_CAL.Df_HSCHF(False, objHSCHF['HF_PRESENT'], objHSCHF['CARBON_ALLOY'],
                                           objHSCHF['PWHT'], objHSCHF['BRINNEL_HARDNESS'], 'E', 0,
                                           rwassessment.assessmentdate, commisstiondate,
                                           ComponentNumber)
            HIC_SOHIC_HF = Detail_DM_CAL.Df_HIC_SOHIC_HF(False,
                                                         objHIC_SOHIC_HF['HF_PRESENT'], objHIC_SOHIC_HF['CARBON_ALLOY'],
                                                         objHIC_SOHIC_HF['PWHT'], objHIC_SOHIC_HF['SULFUR_CONTENT'],
                                                         objHIC_SOHIC_HF['OnlineMonitoring'], 'E', 0,
                                                         rwassessment.assessmentdate, commisstiondate,
                                                         ComponentNumber)
            EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(False,
                                                         objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                         objEXTERN_CLSCC['MAX_OP_TEMP'],
                                                         'E', 0,
                                                         objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                         objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                         objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                         rwassessment.assessmentdate, commisstiondate,
                                                         ComponentNumber)
            CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(False, objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                   objCUI_CLSCC['MAX_OP_TEMP'],
                                                   objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                   objCUI_CLSCC['INSULATION_CONDITION'],
                                                   objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                   objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                   objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                   objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                   objCUI_CLSCC['MIN_OP_TEMP'],
                                                   objCUI_CLSCC['EXTERN_COAT_QUALITY'],
                                                   rwassessment.assessmentdate, commisstiondate,
                                                   ComponentNumber)
            caustic = Detail_DM_CAL.Df_Caustic(False, obj['HEAT_TREATMENT'],
                                               obj['NaOHConcentration'],
                                               obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                               obj['MAX_OP_TEMP'],
                                               obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                               rwassessment.assessmentdate,
                                               commisstiondate, ComponentNumber)
            dataCRACK_PRESENTX.append('False')
            caustic0 = caustic.DF_CAUSTIC_API(0)
            dataPoFTemp = dataPoF
            dataPoFTemp['caustic'] = caustic0
            dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
            dataPoFTemp['sulphide'] = sulphide.DF_SULPHIDE_API(0)
            dataPoFTemp['hicsohic_h2s'] = Hicsohic_H2s.DF_HICSOHIC_H2S_API(0)
            dataPoFTemp['cacbonat'] = Alkaline.DF_CACBONATE_API(0)
            dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
            dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
            dataPoFTemp['hschf'] = HSCHF.DF_HSCHF_API(0)
            dataPoFTemp['sohic'] = HIC_SOHIC_HF.DF_HIC_SOHIC_HF_API(0)
            dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
            dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
            dataCRACK_PRESENTY0.append(caustic0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataCRACK_PRESENTY1.append(temp['PoF'])
            dataCRACK_PRESENTY2.append(temp['damageTotal'] * dataCoF)
            # HEAT_TRACE

            caustic = Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'], True,
                                               obj['NaOHConcentration'],
                                               obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                               obj['MAX_OP_TEMP'],
                                               obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                               rwassessment.assessmentdate,
                                               commisstiondate, ComponentNumber)
            anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                           obj['CRACK_PRESENT'],
                                           objAmine['AMINE_SOLUTION'], objAmine['MAX_OP_TEMP'], True,
                                           objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                           objAmine['AMINE_INSP_NUM'],
                                           objAmine['PWHT'], rwassessment.assessmentdate, commisstiondate,
                                           objAmine['ComponentNumber'])
            dataHEAT_TRACEX = []
            dataHEAT_TRACEY0 = []
            dataHEAT_TRACEY1 = []
            dataHEAT_TRACEY2 = []
            dataHEAT_TRACEX.append('True')
            caustic0 = caustic.DF_CAUSTIC_API(0)
            dataPoFTemp = dataPoF
            dataPoFTemp['caustic'] = caustic0
            dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
            dataHEAT_TRACEY0.append(caustic0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataHEAT_TRACEY1.append(temp['PoF'])
            dataHEAT_TRACEY2.append(temp['damageTotal'] * dataCoF)
            #
            caustic = Detail_DM_CAL.Df_Caustic(obj['CRACK_PRESENT'], False,
                                               obj['NaOHConcentration'],
                                               obj['HEAT_TRACE'], obj['STEAM_OUT'],
                                               obj['MAX_OP_TEMP'],
                                               obj['CARBON_ALLOY'], 'E', 0, 0, obj['PWHT'],
                                               rwassessment.assessmentdate,
                                               commisstiondate, ComponentNumber)
            anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                           obj['CRACK_PRESENT'],
                                           objAmine['AMINE_SOLUTION'], objAmine['MAX_OP_TEMP'], False,
                                           objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                           objAmine['AMINE_INSP_NUM'],
                                           objAmine['PWHT'], rwassessment.assessmentdate, commisstiondate,
                                           objAmine['ComponentNumber'])

            dataHEAT_TRACEX.append('False')
            caustic0 = caustic.DF_CAUSTIC_API(0)
            dataPoFTemp = dataPoF
            dataPoFTemp['caustic'] = caustic0
            dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
            dataHEAT_TRACEY0.append(caustic0)
            temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
            dataHEAT_TRACEY1.append(temp['PoF'])
            dataHEAT_TRACEY2.append(temp['damageTotal'] * dataCoF)
            return render(request, 'FacilityUI/risk_summary/expertHelpCaustic.html',
                          {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                           'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,
                           'dataMAX_OP_TEMPX': dataMAX_OP_TEMPX, 'dataMAX_OP_TEMPY0': dataMAX_OP_TEMPY0,
                           'dataMAX_OP_TEMPY1': dataMAX_OP_TEMPY1, 'dataMAX_OP_TEMPY2': dataMAX_OP_TEMPY2,'dataNaOHConcentrationX':dataNaOHConcentrationX,'dataNaOHConcentrationY0':dataNaOHConcentrationY0,'dataNaOHConcentrationY1':dataNaOHConcentrationY1,'dataNaOHConcentrationY2':dataNaOHConcentrationY2,
                           'dataCRACK_PRESENTX':dataCRACK_PRESENTX,'dataCRACK_PRESENTY0':dataCRACK_PRESENTY0,'dataCRACK_PRESENTY1':dataCRACK_PRESENTY1,'dataCRACK_PRESENTY2':dataCRACK_PRESENTY2,
                           'dataHEAT_TRACEX':dataHEAT_TRACEX,'dataHEAT_TRACEY0':dataHEAT_TRACEY0,'dataHEAT_TRACEY1':dataHEAT_TRACEY1,'dataHEAT_TRACEY2':dataHEAT_TRACEY2})
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404

    return render(request, 'FacilityUI/risk_summary/showCaustic.html',
                  {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj, 'notiVerification':notiVerification,'siteid':siteid})
def showSulphide(request,proposalID,const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj={}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
        equipmentid=comp.equipmentid_id).commissiondate
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['PH']=rwstream.waterph
        obj['H2SContent']=rwstream.h2sinwater
        obj['PRESENT_CYANIDE']=bool(rwstream.cyanide)
        obj['CRACK_PRESENT']=bool(rwcomponent.crackspresent)
        obj['PWHT']=bool(rwequipment.pwht)
        obj['BRINNEL_HARDNESS']=rwcomponent.brinnelhardness
        obj['CARBON_ALLOY']=bool(rwmaterial.carbonlowalloy)
        obj['AQUEOUS_OPERATOR']=bool(rwstream.aqueousoperation)
        obj['ENVIRONMENT_H2S_CONTENT']=bool(rwstream.h2s)

        sulphide=Detail_DM_CAL.Df_Sulphide(obj['PH'],obj['H2SContent'],obj['PRESENT_CYANIDE'],obj['CRACK_PRESENT'],obj['PWHT'],obj['BRINNEL_HARDNESS'],obj['CARBON_ALLOY'],obj['AQUEOUS_OPERATOR'],obj['ENVIRONMENT_H2S_CONTENT'],'E',0, rwassessment.assessmentdate, commisstiondate, ComponentNumber)
        obj['SULPHIDE_INSP_EFF'] =sulphide.SULPHIDE_INSP_EFF
        obj['SULPHIDE_INSP_NUM'] =sulphide.SULPHIDE_INSP_NUM
        obj['environmentalSeverity']=sulphide.GET_ENVIRONMENTAL_SEVERITY()
        obj['Susceptibility']=sulphide.GET_SUSCEPTIBILITY_SULPHIDE()
        obj['SVI']=sulphide.SVI_SULPHIDE
        obj['age1']=sulphide.GET_AGE()
        obj['age2']=sulphide.GET_AGE()+3
        obj['age3']=sulphide.GET_AGE()+6
        obj['base1']=sulphide.DFB_SULPHIDE_API(0)
        obj['base2']=sulphide.DFB_SULPHIDE_API(3)
        obj['base3']=sulphide.DFB_SULPHIDE_API(6)
        obj['Sulphide1']=sulphide.DF_SULPHIDE_API(0)
        obj['Sulphide2']=sulphide.DFB_SULPHIDE_API(3)
        obj['Sulphide3']=sulphide.DFB_SULPHIDE_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showSCC.html',
                  {'page': 'sulphide', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})
def showHicsohicH2s(request,proposalID,const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj={}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
        equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['PH']=rwstream.waterph
        obj['H2SContent']=rwstream.h2sinwater
        obj['PRESENT_CYANIDE']=bool(rwstream.cyanide)
        obj['CRACK_PRESENT']=bool(rwcomponent.crackspresent)
        obj['PWHT']=bool(rwequipment.pwht)

        obj['SULFUR_CONTENT']=rwmaterial.sulfurcontent
        obj['OnlineMonitoring']=rwequipment.onlinemonitoring
        obj['CARBON_ALLOY']=bool(rwmaterial.carbonlowalloy)
        obj['AQUEOUS_OPERATOR']=bool(rwstream.aqueousoperation)
        obj['ENVIRONMENT_H2S_CONTENT']=bool(rwstream.h2s)

        Hicsohic_H2s=Detail_DM_CAL.Df_Hicsohic_H2s(obj['PH'],obj['H2SContent'],obj['PRESENT_CYANIDE'],obj['CRACK_PRESENT'],obj['PWHT'],obj['SULFUR_CONTENT'],obj['OnlineMonitoring'],obj['CARBON_ALLOY'],obj['AQUEOUS_OPERATOR'],obj['ENVIRONMENT_H2S_CONTENT'],'E',0, rwassessment.assessmentdate, commisstiondate, ComponentNumber)
        obj['SULFUR_INSP_EFF'] =Hicsohic_H2s.SULFUR_INSP_EFF
        obj['SULFUR_INSP_NUM'] =Hicsohic_H2s.SULFUR_INSP_NUM
        obj['EnvironmentalSeverity'] =Hicsohic_H2s.GET_ENVIROMENTAL_HICSOHIC_H2S
        obj['Susceptibility'] =Hicsohic_H2s.GET_SUSCEPTIBILITY_HICSOHIC_H2S
        obj['SVI']=Hicsohic_H2s.SVI_HICSOHIC_H2S
        obj['age1']=Hicsohic_H2s.GET_AGE()
        obj['age2']=Hicsohic_H2s.GET_AGE()+3
        obj['age3']=Hicsohic_H2s.GET_AGE()+6
        obj['base1']=Hicsohic_H2s.DFB_HICSOHIC_H2S_API(0)
        obj['base2']=Hicsohic_H2s.DFB_HICSOHIC_H2S_API(3)
        obj['base3']=Hicsohic_H2s.DFB_HICSOHIC_H2S_API(6)
        obj['HicsohicH2s1']=Hicsohic_H2s.DF_HICSOHIC_H2S_API(0)
        obj['HicsohicH2s2']=Hicsohic_H2s.DF_HICSOHIC_H2S_API(3)
        obj['HicsohicH2s3']=Hicsohic_H2s.DF_HICSOHIC_H2S_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/hic_sohic_h2s.html',
                  {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})


def showPASCC(request, proposalID, const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['ExposedSH2OOperation'] = bool(rwequipment.presencesulphideso2)
        obj['ExposedSH2OShutdown'] = bool(rwequipment.presencesulphideso2shutdown)
        obj['MAX_OP_TEMP'] =rwstream.maxoperatingtemperature
        obj['ThermalHistory'] =rwequipment.thermalhistory
        obj['PTAMaterial'] =rwmaterial.ptamaterialcode
        obj['DOWNTIME_PROTECTED'] =bool(rwequipment.downtimeprotectionused)
        obj['PTA_SUSCEP'] =bool(rwmaterial.ispta)
        obj['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
        obj['NICKEL_ALLOY'] =bool(rwmaterial.nickelbased)
        obj['EXPOSED_SULFUR'] =bool(rwstream.exposedtosulphur)

        PASCC = Detail_DM_CAL.Df_PTA(obj['CRACK_PRESENT'], obj['ExposedSH2OOperation'], obj['ExposedSH2OShutdown'],
                                                     obj['MAX_OP_TEMP'], obj['ThermalHistory'], obj['PTAMaterial'],
                                                     obj['DOWNTIME_PROTECTED'],  obj['PTA_SUSCEP'],
                                                     obj['CARBON_ALLOY'], obj['NICKEL_ALLOY'],obj['EXPOSED_SULFUR'], 'E', 0,
                                                     rwassessment.assessmentdate, commisstiondate,
                                                     ComponentNumber)
        obj['PTA_INSP_EFF'] = PASCC.PTA_INSP_EFF
        obj['PTA_INSP_NUM'] = PASCC.PTA_INSP_NUM
        obj['Susceptibility']=PASCC.GET_SUSCEPTIBILITY_PTA()
        obj['SVI']=PASCC.SVI_PTA
        obj['age1']=PASCC.GET_AGE()
        obj['age2']=PASCC.GET_AGE()+3
        obj['age3']=PASCC.GET_AGE()+6
        obj['base1']=PASCC.DFB_PTA_API(0)
        obj['base2']=PASCC.DFB_PTA_API(3)
        obj['base3']=PASCC.DFB_PTA_API(6)
        obj['PASCC1']=PASCC.DF_PTA_API(0)
        obj['PASCC2']=PASCC.DF_PTA_API(3)
        obj['PASCC3']=PASCC.DF_PTA_API(6)
        if 'expertHelp' in request.POST:
            EquipmentType = models.EquipmentType.objects.get(
                equipmenttypeid=models.EquipmentMaster.objects.get(
                    equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
            if (EquipmentType == 'Tank'):
                dataCoF = models.RwCaTank.objects.get(id=proposalID).consequence
                dataPoF = ReCalculate.calculateHelpTank(proposalID)
            else:
                dataCoF = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
                dataPoF = ReCalculate.calculateHelpNormal(proposalID)
            dataMAX_OP_TEMPX = []
            dataMAX_OP_TEMPY0 = []
            dataMAX_OP_TEMPY1 = []
            dataMAX_OP_TEMPY2 = []
            # amine
            objAmine = {}
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            ComponentNumber = str(comp.componentnumber)
            objAmine['ComponentNumber'] = ComponentNumber
            objAmine['EquipmentName'] = EquipmentName
            objAmine['Assessment'] = rwassessment.proposalname

            objAmine['AMINE_EXPOSED'] = bool(rwstream.exposedtogasamine)
            objAmine['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objAmine['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objAmine['AMINE_SOLUTION'] = rwstream.aminesolution

            objAmine['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objAmine['HEAT_TRACE'] = bool(rwequipment.heattraced)
            objAmine['STEAM_OUT'] = bool(rwequipment.steamoutwaterflush)

            objAmine['AMINE_INSP_EFF'] = 'E'
            objAmine['AMINE_INSP_NUM'] = 0
            objAmine['PWHT'] = bool(rwequipment.pwht)
            objAmine['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objAmine['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objAmine['ComponentNumber'] = str(comp.componentnumber)
            # Df_CLSCC
            objCLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCLSCC['ComponentNumber'] = ComponentNumber
            objCLSCC['EquipmentNumber'] = EquipmentName
            objCLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objCLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCLSCC['ph'] = rwstream.waterph
            objCLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCLSCC['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCLSCC['CHLORIDE_ION_CONTENT'] = rwstream.chloride
            objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'] = bool(rwstream.materialexposedtoclint)
            objCLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            # Df_EXTERNAL_CORROSION
            objExCor = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objExCor['ComponentNumber'] = ComponentNumber
            objExCor['EquipmentNumber'] = EquipmentName
            objExCor['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            objExCor['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objExCor['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objExCor['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objExCor['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objExCor['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objExCor['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objExCor['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objExCor['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objExCor['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objExCor['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objExCor['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objExCor['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objExCor['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objExCor['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objExCor['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objExCor['EXTERNAL_INSP_EFF'] = 'E'
            objExCor['EXTERNAL_INSP_NUM'] = 0
            objExCor['NoINSP_EXTERNAL'] = 0
            objExCor['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objExCor['NomalThick'] = rwcomponent.nominalthickness
            objExCor['CurrentThick'] = rwcomponent.currentthickness
            objExCor['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objExCor['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objExCor['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objExCor['ShapeFactor'] = comptype.shapefactor
            objExCor['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objExCor['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objExCor['AllowableStress'] = rwcomponent.allowablestress
            objExCor['MinThickReq'] = rwcomponent.minreqthickness
            objExCor['StructuralThickness'] = rwcomponent.structuralthickness
            objExCor['Pressure'] = rwmaterial.designpressure
            objExCor['Diametter'] = rwcomponent.nominaldiameter
            objExCor['shape'] = API_COMPONENT_TYPE_NAME = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            # Df_CUI
            objCui = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCui['ComponentNumber'] = ComponentNumber
            objCui['EquipmentNumber'] = EquipmentName
            objCui['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            objCui['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCui['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCui['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCui['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objCui['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objCui['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objCui['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objCui['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objCui['CUI_PERCENT_7'] = rwexcor.plus121toplus135
            objCui['CUI_PERCENT_8'] = rwexcor.plus135toplus162
            objCui['CUI_PERCENT_9'] = rwexcor.plus162toplus176
            objCui['INSULATION_TYPE'] = rwcoat.externalinsulationtype
            objCui['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCui['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCui['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objCui['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objCui['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCui['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objCui['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCui['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCui['CUI_INSP_EFF'] = 'E'
            objCui['CUI_INSP_NUM'] = 0
            objCui['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objCui['NomalThick'] = rwcomponent.nominalthickness
            objCui['CurrentThick'] = rwcomponent.currentthickness
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            # chua thay dung
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objCui['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objCui['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objCui['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objCui['AllowableStress'] = rwcomponent.allowablestress
            objCui['MinThickReq'] = rwcomponent.minreqthickness
            objCui['StructuralThickness'] = rwcomponent.structuralthickness
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['Diametter'] = rwcomponent.nominaldiameter
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['COMPONENT_INSTALL_DATE'] = COMPONENT_INSTALL_DATE
            objCui['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objCui['shape'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            # EXTERNAL CLSCC
            objEXTERN_CLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objEXTERN_CLSCC['ComponentNumber'] = ComponentNumber
            objEXTERN_CLSCC['EquipmentNumber'] = EquipmentName
            objEXTERN_CLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objEXTERN_CLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objEXTERN_CLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objEXTERN_CLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objEXTERN_CLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objEXTERN_CLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objEXTERN_CLSCC['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # CUI_CLSCC
            objCUI_CLSCC = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCUI_CLSCC['ComponentNumber'] = ComponentNumber
            objCUI_CLSCC['EquipmentNumber'] = EquipmentName
            objCUI_CLSCC['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            objCUI_CLSCC['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCUI_CLSCC['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCUI_CLSCC['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objCUI_CLSCC['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCUI_CLSCC['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCUI_CLSCC['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCUI_CLSCC['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCUI_CLSCC['INSULATION_CHLORIDE'] = bool(rwcoat.insulationcontainschloride)
            objCUI_CLSCC['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objCUI_CLSCC['EXTERNAL_INSULATION'] = bool(rwcoat.externalinsulation)

            objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCUI_CLSCC['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCUI_CLSCC['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            # HTHA
            objHTHA = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objHTHA['ComponentNumber'] = ComponentNumber
            objHTHA['EquipmentNumber'] = EquipmentName
            objHTHA['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objHTHA['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objHTHA['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objHTHA['HTHA_PRESSURE'] = rwstream.h2spartialpressure * 0.006895
            objHTHA['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objHTHA['HTHADamageObserved'] = rwcomponent.hthadamage
            objHTHA['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objHTHA['MATERIAL_SUSCEP_HTHA'] = bool(rwmaterial.ishtha)
            objHTHA['HTHA_MATERIAL'] = rwmaterial.hthamaterialcode
            objHTHA['Hydrogen'] = rwstream.hydrogen
            # TEMP_EMBRITTLE
            objTEMP_EMBRITTLE = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objTEMP_EMBRITTLE['ComponentNumber'] = ComponentNumber
            objTEMP_EMBRITTLE['EquipmentNumber'] = EquipmentName
            objTEMP_EMBRITTLE['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objTEMP_EMBRITTLE['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objTEMP_EMBRITTLE['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objTEMP_EMBRITTLE['TEMPER_SUSCEP'] = bool(rwmaterial.temper)
            objTEMP_EMBRITTLE['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objTEMP_EMBRITTLE['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objTEMP_EMBRITTLE['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objTEMP_EMBRITTLE['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            objTEMP_EMBRITTLE['REF_TEMP'] = rwmaterial.referencetemperature
            objTEMP_EMBRITTLE['DELTA_FATT'] = rwcomponent.deltafatt
            objTEMP_EMBRITTLE['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objTEMP_EMBRITTLE['PWHT'] = bool(rwequipment.pwht)
            objTEMP_EMBRITTLE['BRITTLE_THICK'] = rwcomponent.brittlefracturethickness

            objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # Df_885
            obj885 = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            obj885['ComponentNumber'] = ComponentNumber
            obj885['EquipmentNumber'] = EquipmentName
            obj885['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            obj885['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            obj885['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            obj885['CHROMIUM_12'] = bool(rwmaterial.chromemoreequal12)
            obj885['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            obj885['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            obj885['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            obj885['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            obj885['REF_TEMP'] = rwmaterial.referencetemperature
            obj885['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            obj885['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # dfSigma
            objSigma = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objSigma['ComponentNumber'] = ComponentNumber
            objSigma['EquipmentNumber'] = EquipmentName
            objSigma['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objSigma['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objSigma['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objSigma['MIN_TEM'] = rwstream.minoperatingtemperature
            objSigma['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
            objSigma['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objSigma['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            objSigma['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objSigma['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation

            objSigma['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objSigma['PERCENT_SIGMA'] = rwmaterial.sigmaphase
            # chua thay su dung MIN_DESIGN_TEMP
            objSigma['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            # caustic
            objcaustic = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objcaustic['ComponentNumber'] = ComponentNumber
            objcaustic['EquipmentNumber'] = EquipmentName
            objcaustic['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objcaustic['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objcaustic['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objcaustic['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
            objcaustic['HEAT_TREATMENT'] = rwmaterial.heattreatment
            objcaustic['NaOHConcentration'] = rwstream.naohconcentration
            objcaustic['HEAT_TRACE'] = bool(rwequipment.heattraced)
            objcaustic['STEAM_OUT'] = bool(rwequipment.steamoutwaterflush)
            objcaustic['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objcaustic['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objcaustic['PWHT'] = bool(rwequipment.pwht)

            for i in range(20, 0, -2):
                xx = obj['MAX_OP_TEMP'] - i;
                dataMAX_OP_TEMPX.append(str(xx));

                anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                               objAmine['CRACK_PRESENT'],
                                               objAmine['AMINE_SOLUTION'], xx, objAmine['HEAT_TRACE'],
                                               objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                               objAmine['AMINE_INSP_NUM'],
                                               objAmine['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               objAmine['ComponentNumber'])

                PASCC = Detail_DM_CAL.Df_PTA(obj['CRACK_PRESENT'], obj['ExposedSH2OOperation'],
                                             obj['ExposedSH2OShutdown'],
                                             xx, obj['ThermalHistory'],
                                             obj['PTAMaterial'],
                                             obj['DOWNTIME_PROTECTED'], obj['PTA_SUSCEP'],
                                             obj['CARBON_ALLOY'], obj['NICKEL_ALLOY'],
                                             obj['EXPOSED_SULFUR'], 'E', 0,
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)

                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'], xx,
                                               objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               ComponentNumber)

                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         xx,
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         COMPONENT_INSTALL_DATE,
                                                                         ComponentNumber)

                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], xx,
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                            ComponentNumber)

                EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(objEXTERN_CLSCC['CRACK_PRESENT'],
                                                             objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                             xx,
                                                             'E', 0,
                                                             objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                             objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                             objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                             ComponentNumber)
                CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(objCUI_CLSCC['CRACK_PRESENT'],
                                                       objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                       xx,
                                                       objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                       objCUI_CLSCC['INSULATION_CONDITION'],
                                                       objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                       objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                       objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                       objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                       objCUI_CLSCC['MIN_OP_TEMP'],
                                                       objCUI_CLSCC['EXTERN_COAT_QUALITY'],

                                                       rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                       ComponentNumber)

                HTHA = Detail_DM_CAL.DF_HTHA(objHTHA['HTHA_PRESSURE'], objHTHA['CRITICAL_TEMP'],
                                             objHTHA['HTHADamageObserved'],
                                             xx, objHTHA['MATERIAL_SUSCEP_HTHA'], objHTHA['HTHA_MATERIAL'],
                                             objHTHA['Hydrogen'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)

                TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(objTEMP_EMBRITTLE['TEMPER_SUSCEP'],
                                                                 objTEMP_EMBRITTLE['CARBON_ALLOY'],
                                                                 xx,
                                                                 objTEMP_EMBRITTLE['MIN_OP_TEMP'],
                                                                 objTEMP_EMBRITTLE['PRESSSURE_CONTROL'],
                                                                 objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'],
                                                                 objTEMP_EMBRITTLE['REF_TEMP'],
                                                                 objTEMP_EMBRITTLE['DELTA_FATT'],
                                                                 objTEMP_EMBRITTLE['CRITICAL_TEMP'],
                                                                 objTEMP_EMBRITTLE['PWHT'],
                                                                 objTEMP_EMBRITTLE['BRITTLE_THICK'],
                                                                 objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'],
                                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                                 ComponentNumber)
                df885 = Detail_DM_CAL.Df_885(obj885['CHROMIUM_12'], obj885['MIN_OP_TEMP'], xx,
                                             obj885['PRESSSURE_CONTROL'], obj885['MIN_TEMP_PRESSURE'],
                                             obj885['REF_TEMP'],
                                             obj885['CRITICAL_TEMP'], obj885['MIN_DESIGN_TEMP'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)

                dfSigma = Detail_DM_CAL.Df_SIGMA(objSigma['MIN_TEM'], objSigma['AUSTENITIC_STEEL'],
                                                 objSigma['MIN_OP_TEMP'],
                                                 xx,
                                                 objSigma['PRESSSURE_CONTROL'], objSigma['MIN_TEMP_PRESSURE'],
                                                 objSigma['CRITICAL_TEMP'],
                                                 objSigma['PERCENT_SIGMA'],
                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                 ComponentNumber)

                caustic = Detail_DM_CAL.Df_Caustic(objcaustic['CRACK_PRESENT'], objcaustic['HEAT_TREATMENT'],
                                                   objcaustic['NaOHConcentration'],
                                                   objcaustic['HEAT_TRACE'], objcaustic['STEAM_OUT'],
                                                   xx,
                                                   objcaustic['CARBON_ALLOY'], 'E', 0, 0, objcaustic['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   COMPONENT_INSTALL_DATE, ComponentNumber)
                # BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
                #                                    objBri['CRITICAL_TEMP'],
                #                                    objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
                #                                    objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
                #                                    objBri['NOMINAL_OPERATING_CONDITIONS'],
                #                                    objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
                #                                    objBri['EQUIPMENT_CIRCUIT_SHOCK'], xx,
                #                                    objBri['CARBON_ALLOY'],
                #                                    objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
                #                                    rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                #                                    ComponentNumber)

                PASCC0 = PASCC.DF_PTA_API(0)
                dataPoFTemp = dataPoF

                dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
                dataPoFTemp['pta'] = PASCC0
                dataPoFTemp['pta'] = PASCC.DF_PTA_API(0)
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
                dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
                dataPoFTemp['htha'] = HTHA.DF_HTHA_API(0)
                dataPoFTemp['embrittle'] = TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
                dataPoFTemp['885'] = df885.DF_885_API(0)
                dataPoFTemp['sigma'] = dfSigma.DF_SIGMA_API(0)
                dataPoFTemp['caustic'] = caustic.DF_CAUSTIC_API(0)
                # dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataMAX_OP_TEMPY0.append(PASCC0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMAX_OP_TEMPY1.append(temp['PoF'])
                dataMAX_OP_TEMPY2.append(temp['damageTotal'] * dataCoF)

            for i in range(0, 20, 2):
                xx = obj['MAX_OP_TEMP'] + i;
                dataMAX_OP_TEMPX.append(str(xx));
                anime = Detail_DM_CAL.Df_Amine(objAmine['AMINE_EXPOSED'], objAmine['CARBON_ALLOY'],
                                               objAmine['CRACK_PRESENT'],
                                               objAmine['AMINE_SOLUTION'], xx, objAmine['HEAT_TRACE'],
                                               objAmine['STEAM_OUT'], objAmine['AMINE_INSP_EFF'],
                                               objAmine['AMINE_INSP_NUM'],
                                               objAmine['PWHT'], rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               objAmine['ComponentNumber'])
                PASCC = Detail_DM_CAL.Df_PTA(obj['CRACK_PRESENT'], obj['ExposedSH2OOperation'],
                                             obj['ExposedSH2OShutdown'],
                                             xx, obj['ThermalHistory'],
                                             obj['PTAMaterial'],
                                             obj['DOWNTIME_PROTECTED'], obj['PTA_SUSCEP'],
                                             obj['CARBON_ALLOY'], obj['NICKEL_ALLOY'],
                                             obj['EXPOSED_SULFUR'], 'E', 0,
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
                CLSCC = Detail_DM_CAL.Df_CLSCC(objCLSCC['CRACK_PRESENT'], objCLSCC['ph'], xx,
                                               objCLSCC['MIN_OP_TEMP'],
                                               objCLSCC['CHLORIDE_ION_CONTENT'],
                                               objCLSCC['INTERNAL_EXPOSED_FLUID_MIST'],
                                               objCLSCC['AUSTENITIC_STEEL']
                                               , 'E', 0,
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               ComponentNumber)
                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         xx,
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         COMPONENT_INSTALL_DATE,
                                                                         ComponentNumber)
                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], xx,
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                            ComponentNumber)
                EXTERN_CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(objEXTERN_CLSCC['CRACK_PRESENT'],
                                                             objEXTERN_CLSCC['EXTERNAL_EVIRONMENT'],
                                                             xx,
                                                             'E', 0,
                                                             objEXTERN_CLSCC['AUSTENITIC_STEEL'],
                                                             objEXTERN_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                             objEXTERN_CLSCC['MIN_DESIGN_TEMP'],

                                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                             ComponentNumber)
                CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(objCUI_CLSCC['CRACK_PRESENT'],
                                                       objCUI_CLSCC['EXTERNAL_EVIRONMENT'],
                                                       xx,
                                                       objCUI_CLSCC['PIPING_COMPLEXITY'],
                                                       objCUI_CLSCC['INSULATION_CONDITION'],
                                                       objCUI_CLSCC['INSULATION_CHLORIDE'], 'E', 0,
                                                       objCUI_CLSCC['AUSTENITIC_STEEL'],
                                                       objCUI_CLSCC['EXTERNAL_INSULATION'],
                                                       objCUI_CLSCC['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                       objCUI_CLSCC['MIN_OP_TEMP'],
                                                       objCUI_CLSCC['EXTERN_COAT_QUALITY'],

                                                       rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                       ComponentNumber)
                HTHA = Detail_DM_CAL.DF_HTHA(objHTHA['HTHA_PRESSURE'], objHTHA['CRITICAL_TEMP'],
                                             objHTHA['HTHADamageObserved'],
                                             xx, objHTHA['MATERIAL_SUSCEP_HTHA'], objHTHA['HTHA_MATERIAL'],
                                             objHTHA['Hydrogen'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
                TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(objTEMP_EMBRITTLE['TEMPER_SUSCEP'],
                                                                 objTEMP_EMBRITTLE['CARBON_ALLOY'],
                                                                 xx,
                                                                 objTEMP_EMBRITTLE['MIN_OP_TEMP'],
                                                                 objTEMP_EMBRITTLE['PRESSSURE_CONTROL'],
                                                                 objTEMP_EMBRITTLE['MIN_TEMP_PRESSURE'],
                                                                 objTEMP_EMBRITTLE['REF_TEMP'],
                                                                 objTEMP_EMBRITTLE['DELTA_FATT'],
                                                                 objTEMP_EMBRITTLE['CRITICAL_TEMP'],
                                                                 objTEMP_EMBRITTLE['PWHT'],
                                                                 objTEMP_EMBRITTLE['BRITTLE_THICK'],
                                                                 objTEMP_EMBRITTLE['MIN_DESIGN_TEMP'],
                                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                                 ComponentNumber)
                df885 = Detail_DM_CAL.Df_885(obj885['CHROMIUM_12'], obj885['MIN_OP_TEMP'], xx,
                                             obj885['PRESSSURE_CONTROL'], obj885['MIN_TEMP_PRESSURE'],
                                             obj885['REF_TEMP'],
                                             obj885['CRITICAL_TEMP'], obj885['MIN_DESIGN_TEMP'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
                dfSigma = Detail_DM_CAL.Df_SIGMA(objSigma['MIN_TEM'], objSigma['AUSTENITIC_STEEL'],
                                                 objSigma['MIN_OP_TEMP'],
                                                 xx,
                                                 objSigma['PRESSSURE_CONTROL'], objSigma['MIN_TEMP_PRESSURE'],
                                                 objSigma['CRITICAL_TEMP'],
                                                 objSigma['PERCENT_SIGMA'],
                                                 rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                 ComponentNumber)
                caustic = Detail_DM_CAL.Df_Caustic(objcaustic['CRACK_PRESENT'], objcaustic['HEAT_TREATMENT'],
                                                   objcaustic['NaOHConcentration'],
                                                   objcaustic['HEAT_TRACE'], objcaustic['STEAM_OUT'],
                                                   xx,
                                                   objcaustic['CARBON_ALLOY'], 'E', 0, 0, objcaustic['PWHT'],
                                                   rwassessment.assessmentdate,
                                                   COMPONENT_INSTALL_DATE, ComponentNumber)
                # BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
                #                                    objBri['CRITICAL_TEMP'],
                #                                    objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
                #                                    objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
                #                                    objBri['NOMINAL_OPERATING_CONDITIONS'],
                #                                    objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
                #                                    objBri['EQUIPMENT_CIRCUIT_SHOCK'], xx,
                #                                    objBri['CARBON_ALLOY'],
                #                                    objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
                #                                    rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                #                                    ComponentNumber)
                PASCC0 = PASCC.DF_PTA_API(0)
                dataPoFTemp = dataPoF

                dataPoFTemp['amine'] = anime.DF_AMINE_API(0)
                dataPoFTemp['pta'] = PASCC0
                dataPoFTemp['clscc'] = CLSCC.DF_CLSCC_API(0)
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['extern_clscc'] = EXTERN_CLSCC.DF_EXTERN_CLSCC_API(0)
                dataPoFTemp['cui_clscc'] = CUI_CLSCC.DF_CUI_CLSCC_API(0)
                dataPoFTemp['htha'] = HTHA.DF_HTHA_API(0)
                dataPoFTemp['embrittle'] = TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
                dataPoFTemp['885'] = df885.DF_885_API(0)
                dataPoFTemp['sigma'] = dfSigma.DF_SIGMA_API(0)
                dataPoFTemp['caustic'] = caustic.DF_CAUSTIC_API(0)
                # dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataMAX_OP_TEMPY0.append(PASCC0)
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMAX_OP_TEMPY1.append(temp['PoF'])
                dataMAX_OP_TEMPY2.append(temp['damageTotal'] * dataCoF)
                return render(request, 'FacilityUI/risk_summary/expertHelpPASCC.html',
                              {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                               'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'dataMAX_OP_TEMPX':dataMAX_OP_TEMPX,'dataMAX_OP_TEMPY0':dataMAX_OP_TEMPY0,'dataMAX_OP_TEMPY1':dataMAX_OP_TEMPY1,'dataMAX_OP_TEMPY2':dataMAX_OP_TEMPY2})
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showPASCC.html',
                  {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})
def showCLSCC(request, proposalID, const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['ph'] = rwstream.waterph
        obj['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
        obj['MIN_OP_TEMP']=rwstream.minoperatingtemperature
        obj['CHLORIDE_ION_CONTENT'] = rwstream.chloride
        obj['INTERNAL_EXPOSED_FLUID_MIST'] = bool(rwstream.materialexposedtoclint)
        obj['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)



        CLSCC = Detail_DM_CAL.Df_CLSCC(obj['CRACK_PRESENT'],obj['ph'], obj['MAX_OP_TEMP'],obj['MIN_OP_TEMP'],
                                       obj['CHLORIDE_ION_CONTENT'], obj['INTERNAL_EXPOSED_FLUID_MIST'], obj['AUSTENITIC_STEEL']
                                                    , 'E', 0,
                                                     rwassessment.assessmentdate, commisstiondate,
                                                     ComponentNumber)
        obj['CLSCC_INSP_EFF'] = CLSCC.CLSCC_INSP_EFF
        obj['CLSCC_INSP_NUM'] = CLSCC.CLSCC_INSP_NUM


        obj['Susceptibility']=CLSCC.GET_SUSCEPTIBILITY_CLSCC()
        obj['SVI']=CLSCC.SVI_CLSCC()
        obj['age1']=CLSCC.GET_AGE()
        obj['age2']=CLSCC.GET_AGE()+3
        obj['age3']=CLSCC.GET_AGE()+6
        obj['base1']=CLSCC.DFB_CLSCC_API(0)
        obj['base2']=CLSCC.DFB_CLSCC_API(3)
        obj['base3']=CLSCC.DFB_CLSCC_API(6)
        obj['CLSCC1']=CLSCC.DF_CLSCC_API(0)
        obj['CLSCC2']=CLSCC.DF_CLSCC_API(3)
        obj['CLSCC3']=CLSCC.DF_CLSCC_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showCLSCC.html',
                  {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})
def showHSCHF(request, proposalID, const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['HF_PRESENT'] = bool(rwstream.hydrofluoric)


        obj['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
        obj['PWHT'] = bool(rwequipment.pwht)
        obj['BRINNEL_HARDNESS'] = rwcomponent.brinnelhardness

        HSCHF = Detail_DM_CAL.Df_HSCHF(obj['CRACK_PRESENT'],obj['HF_PRESENT'], obj['CARBON_ALLOY'],
                                       obj['PWHT'], obj['BRINNEL_HARDNESS'],'E',0,
                                                     rwassessment.assessmentdate, commisstiondate,
                                                     ComponentNumber)
        obj['HSC_HF_INSP_EFF'] = HSCHF.HSC_HF_INSP_EFF
        obj['HSC_HF_INSP_NUM'] = HSCHF.HSC_HF_INSP_NUM



        obj['Susceptibility']=HSCHF.GET_SUSCEPTIBILITY_HSCHF()
        obj['SVI']=HSCHF.SVI_HSCHF()
        obj['age1']=HSCHF.GET_AGE()
        obj['age2']=HSCHF.GET_AGE()+3
        obj['age3']=HSCHF.GET_AGE()+6
        obj['base1']=HSCHF.DFB_HSCHF_API(0)
        obj['base2']=HSCHF.DFB_HSCHF_API(3)
        obj['base3']=HSCHF.DFB_HSCHF_API(6)
        obj['HSCHF1']=HSCHF.DF_HSCHF_API(0)
        obj['HSCHF2']=HSCHF.DF_HSCHF_API(3)
        obj['HSCHF3']=HSCHF.DF_HSCHF_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/hsc_hf.html',
                  {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})
def showHICSOHICHF(request, proposalID, const):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['HF_PRESENT'] = bool(rwstream.hydrofluoric)
        obj['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
        obj['PWHT'] = bool(rwequipment.pwht)
        obj['SULFUR_CONTENT'] = rwmaterial.sulfurcontent
        obj['OnlineMonitoring']=rwequipment.onlinemonitoring
        HIC_SOHIC_HF = Detail_DM_CAL.Df_HIC_SOHIC_HF(obj['CRACK_PRESENT'],obj['HF_PRESENT'], obj['CARBON_ALLOY'],
                                       obj['PWHT'], obj['SULFUR_CONTENT'],obj['OnlineMonitoring'],'E',0,
                                                     rwassessment.assessmentdate, commisstiondate,
                                                     ComponentNumber)
        obj['HICSOHIC_INSP_EFF'] =HIC_SOHIC_HF.HICSOHIC_INSP_EFF
        obj['HICSOHIC_INSP_NUM'] =HIC_SOHIC_HF.HICSOHIC_INSP_NUM

        obj['Susceptibility']=HIC_SOHIC_HF.GET_SUSCEPTIBILITY_HICSOHIC_HF()
        obj['SVI']=HIC_SOHIC_HF.SVI_HICSOHIC_HF()
        obj['age1']=HIC_SOHIC_HF.GET_AGE()
        obj['age2']=HIC_SOHIC_HF.GET_AGE()+3
        obj['age3']=HIC_SOHIC_HF.GET_AGE()+6
        obj['base1']=HIC_SOHIC_HF.DFB_HIC_SOHIC_HF_API(0)
        obj['base2']=HIC_SOHIC_HF.DFB_HIC_SOHIC_HF_API(3)
        obj['base3']=HIC_SOHIC_HF.DFB_HIC_SOHIC_HF_API(6)
        obj['HICSOHICHF1']=HIC_SOHIC_HF.DF_HIC_SOHIC_HF_API(0)
        obj['HICSOHICHF2']=HIC_SOHIC_HF.DF_HIC_SOHIC_HF_API(3)
        obj['HICSOHICHF3']=HIC_SOHIC_HF.DF_HIC_SOHIC_HF_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/hic_sohic_hf.html',
                  {'page': 'caustic', 'proposalID': proposalID, 'info': request.session, 'noti': noti,
                   'countnoti': countnoti, 'count': count, 'const': const, 'a': obj,'notiVerification':notiVerification,'siteid':siteid})
def ShowThining(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        data = []
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        # print("check low", rwcomponent.confidencecorrosionrate)
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        damageMachinsm = models.RwDamageMechanism.objects.filter(id_dm=proposalID)[0]
        # damageMachinsm = models.RwDamageMechanism.objects.get(id_dm=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
        EquipmentType = models.EquipmentType.objects.get(
            equipmenttypeid=models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).equipmenttypeid_id).equipmenttypename
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        APIComponentType = models.ApiComponentType.objects.get(
            apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        obj = {}
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname

        obj['AllowableStress'] = rwcomponent.allowablestress
        obj['MinimunRequiredThickness'] = rwcomponent.minreqthickness
        obj['WeltJointEfficiency'] = rwcomponent.weldjointefficiency
        # print('WeltJointEfficiency'+str(obj['WeltJointEfficiency']))
        obj['CorrosionRate'] = rwcomponent.currentcorrosionrate
        obj['Diameter'] = rwcomponent.nominaldiameter
        obj['NominalThickness'] = rwcomponent.nominalthickness
        obj['CurentThickness'] = rwcomponent.currentthickness
        obj['ChemicalInjection'] = rwcomponent.chemicalinjection
        obj['HighlyEffectiveInspectionforChemicalInjection'] = rwcomponent.highlyinjectioninsp
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['deadLegs'] = rwequipment.containsdeadlegs
        obj['InternalCladding'] = rwcoat.internalcladding
        obj['CladdingThickness'] = rwcoat.claddingthickness
        obj['CladdingCorrosionRate'] = rwcoat.claddingcorrosionrate
        obj['confidencecorrosionrate'] = rwcomponent.confidencecorrosionrate
        obj['YeildStrength'] = rwmaterial.yieldstrength
        obj['TensileStrength'] = rwmaterial.tensilestrength
        obj['DesignPressure'] = rwmaterial.designpressure
        obj['Onlinemonitoring'] = rwequipment.onlinemonitoring
        obj['HighEffectiveDeadlegs'] = rwequipment.highlydeadleginsp
        obj['LastInspectionDate'] = damageMachinsm.lastinspdate.strftime('%Y-%m-%d')
        obj['NumberofInspection'] = damageMachinsm.numberofinspections

        obj['shapeFactor'] = comptype.shapefactor
        obj['shape'] = models.ApiComponentType.objects.get(
            apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], obj['CurentThickness'],
                                     obj['MinimunRequiredThickness'], obj['CorrosionRate'],
                                     rwmaterial.corrosionallowance, bool(rwcomponent.releasepreventionbarrier),
                                     obj['CladdingThickness'],
                                     obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                     0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                     bool(obj['deadLegs']), rwequipment.tankismaintained,
                                     rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                     obj['WeltJointEfficiency'], obj['AllowableStress'], obj['TensileStrength'],
                                     obj['YeildStrength'], rwcomponent.structuralthickness,
                                     rwcomponent.minstructuralthickness, obj['DesignPressure'], obj['shapeFactor'],
                                     obj['confidencecorrosionrate'], EquipmentType, rwassessment.assessmentdate,
                                     commisstiondate, ComponentNumber, APIComponentType)
        obj['commisstiondate'] = commisstiondate.strftime('%Y-%m-%d')
        obj['flowTress'] = thin.FS_Thin()
        obj['strengthRatioIn'] = thin.strengthRatioInter()
        obj['strengthRatioMin'] = thin.strengthRationMin()
        obj['adjustmentInjection'] = thin.adjustmentInjection()
        obj['adjustmentOnline'] = thin.adjustmentOnline()
        obj['adjustmentDeadLegs'] = thin.adjustmentDeadLegs()

        obj['priorProbabilities1'] = thin.Pr_P1_Thin()
        obj['priorProbabilities2'] = thin.Pr_P2_Thin()
        obj['priorProbabilities3'] = thin.Pr_P3_Thin()
        print("go here")
        obj['inspectioneffectivenessfactors1'] = thin.I1_Thin()
        obj['inspectioneffectivenessfactors2'] = thin.I2_Thin()
        obj['inspectioneffectivenessfactors3'] = thin.I3_Thin()
        obj['PosteriorProbability1'] = thin.Po_P1_Thin()
        obj['PosteriorProbability2'] = thin.Po_P2_Thin()
        obj['PosteriorProbability3'] = thin.Po_P3_Thin()
        obj['BetaReliabilityIndices0AP_1'] = thin.B1_Thin(0 + thin.GET_AGE())
        obj['BetaReliabilityIndices0AP_2'] = thin.B1_Thin(3 + thin.GET_AGE())
        obj['BetaReliabilityIndices0AP_3'] = thin.B1_Thin(6 + thin.GET_AGE())
        obj['BetaReliabilityIndices1AP_1'] = thin.B2_Thin(0 + thin.GET_AGE())
        obj['BetaReliabilityIndices1AP_2'] = thin.B2_Thin(3 + thin.GET_AGE())
        obj['BetaReliabilityIndices1AP_3'] = thin.B2_Thin(6 + thin.GET_AGE())
        obj['BetaReliabilityIndices2AP_1'] = thin.B3_Thin(0 + thin.GET_AGE())
        obj['BetaReliabilityIndices2AP_2'] = thin.B3_Thin(3 + thin.GET_AGE())
        obj['BetaReliabilityIndices2AP_3'] = thin.B3_Thin(6 + thin.GET_AGE())
        obj['age1'] = thin.agetk(0 + thin.GET_AGE())
        obj['age2'] = thin.agetk(3 + thin.GET_AGE())
        obj['age3'] = thin.agetk(6 + thin.GET_AGE())
        obj['agetk1'] = thin.agetk(0 + thin.GET_AGE())
        obj['agetk2'] = thin.agetk(3 + thin.GET_AGE())
        obj['agetk3'] = thin.agetk(6 + thin.GET_AGE())
        obj['agerc1'] = thin.agerc(0 + thin.GET_AGE())
        print("go agerc")
        obj['agerc2'] = thin.agerc(3 + thin.GET_AGE())
        obj['agerc3'] = thin.agerc(6 + thin.GET_AGE())
        obj['ArtWithout1'] = thin.ArtWithoutCladdingMaterial(0 + thin.GET_AGE())
        obj['ArtWithout2'] = thin.ArtWithoutCladdingMaterial(3 + thin.GET_AGE())
        obj['ArtWithout3'] = thin.ArtWithoutCladdingMaterial(6 + thin.GET_AGE())
        obj['ArtWith1_1'] = thin.ArtWithCladdingMaterial1(0 + thin.GET_AGE())
        obj['ArtWith1_2'] = thin.ArtWithCladdingMaterial1(3 + thin.GET_AGE())
        obj['ArtWith1_3'] = thin.ArtWithCladdingMaterial1(6 + thin.GET_AGE())
        obj['ArtWith2_1'] = thin.ArtWithCladdingMaterial2(0 + thin.GET_AGE())
        obj['ArtWith2_2'] = thin.ArtWithCladdingMaterial2(3 + thin.GET_AGE())
        obj['ArtWith2_3'] = thin.ArtWithCladdingMaterial2(6 + thin.GET_AGE())
        obj['WallLossFraction1'] = thin.Art(0 + thin.GET_AGE())
        obj['WallLossFraction2'] = thin.Art(3 + thin.GET_AGE())
        obj['WallLossFraction3'] = thin.Art(6 + thin.GET_AGE())
        obj['NA_Thin'] = thin.NA_Thin()
        obj['NB_Thin'] = thin.NB_Thin()
        obj['NC_Thin'] = thin.NC_Thin()
        obj['ND_Thin'] = thin.ND_Thin()
        obj['BaseDamageFactor1'] = thin.DFB_THIN_API(0)
        obj['BaseDamageFactor2'] = thin.DFB_THIN_API(3)
        obj['BaseDamageFactor3'] = thin.DFB_THIN_API(6)
        obj['ThinningDamageFactor1'] = thin.DF_THINNING_API(0)
        obj['ThinningDamageFactor2'] = thin.DF_THINNING_API(3)
        obj['ThinningDamageFactor3'] = thin.DF_THINNING_API(6)

        # data.append(obj)
        # data.append(output)

        # if 'BaseMetalThickness' in request.POST:
        #     return redirect('governingExternal', proposalID=proposalID)
        # else:
        #     print("BaseMetalThickness")

        if 'expertHelp' in request.POST:
            if (EquipmentType == 'Tank'):
                dataCoF = models.RwCaTank.objects.get(id=proposalID).consequence
                dataPoF = ReCalculate.calculateHelpTank(proposalID)
            else:
                dataCoF = models.RwFullFcof.objects.get(id=proposalID).fcofvalue
                dataPoF = ReCalculate.calculateHelpNormal(proposalID)
            dataNominalThicknessX = []
            dataNominalThicknessY0 = []
            dataNominalThicknessY1 = []
            dataNominalThicknessY2 = []
            #
            dataCurentThicknessX = []
            dataCurentThicknessY0 = []
            dataCurentThicknessY1 = []
            dataCurentThicknessY2 = []
            #
            dataCorrosionRateX = []
            dataCorrosionRateY0 = []
            dataCorrosionRateY1 = []
            dataCorrosionRateY2 = []
            # Minimum Required Thickness
            dataMinimunRequiredThicknessX = []
            dataMinimunRequiredThicknessY0 = []
            dataMinimunRequiredThicknessY1 = []
            dataMinimunRequiredThicknessY2 = []
            #Nominal thickness
            #Df_EXTERNAL_CORROSION
            objExCor = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            if rwassessment.commisstiondate:
                commisstiondate = rwassessment.commisstiondate
            else:
                commisstiondate = COMPONENT_INSTALL_DATE
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objExCor['ComponentNumber'] = ComponentNumber
            objExCor['EquipmentNumber'] = EquipmentName
            objExCor['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            objExCor['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objExCor['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objExCor['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objExCor['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objExCor['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objExCor['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objExCor['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objExCor['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objExCor['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objExCor['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objExCor['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objExCor['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objExCor['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objExCor['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objExCor['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objExCor['EXTERNAL_INSP_EFF'] = 'E'
            objExCor['EXTERNAL_INSP_NUM'] = 0
            objExCor['NoINSP_EXTERNAL'] = 0
            objExCor['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objExCor['NomalThick'] = rwcomponent.nominalthickness
            objExCor['CurrentThick'] = rwcomponent.currentthickness
            objExCor['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objExCor['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objExCor['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objExCor['ShapeFactor'] = comptype.shapefactor
            objExCor['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objExCor['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objExCor['AllowableStress'] = rwcomponent.allowablestress
            objExCor['MinThickReq'] = rwcomponent.minreqthickness
            objExCor['StructuralThickness'] = rwcomponent.structuralthickness
            objExCor['Pressure'] = rwmaterial.designpressure
            objExCor['Diametter'] = rwcomponent.nominaldiameter
            objExCor['shape'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename

            # Df_CUI
            objCui={}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objCui['ComponentNumber'] = ComponentNumber
            objCui['EquipmentNumber'] = EquipmentName
            objCui['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            rwcoat = models.RwCoating.objects.get(id=proposalID)
            comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
            rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
            objCui['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objCui['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objCui['EXTERNAL_EVIRONMENT'] = rwequipment.externalenvironment
            objCui['CUI_PERCENT_2'] = rwexcor.minus8toplus6
            objCui['CUI_PERCENT_3'] = rwexcor.plus6toplus32
            objCui['CUI_PERCENT_4'] = rwexcor.plus32toplus71
            objCui['CUI_PERCENT_5'] = rwexcor.plus71toplus107
            objCui['CUI_PERCENT_6'] = rwexcor.plus107toplus121
            objCui['CUI_PERCENT_7'] = rwexcor.plus121toplus135
            objCui['CUI_PERCENT_8'] = rwexcor.plus135toplus162
            objCui['CUI_PERCENT_9'] = rwexcor.plus162toplus176
            objCui['INSULATION_TYPE'] = rwcoat.externalinsulationtype
            objCui['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
            objCui['INSULATION_CONDITION'] = rwcoat.insulationcondition
            objCui['SUPPORT_COATING'] = bool(rwcoat.supportconfignotallowcoatingmaint)
            objCui['INTERFACE_SOIL_WATER'] = bool(rwequipment.interfacesoilwater)
            objCui['EXTERNAL_EXPOSED_FLUID_MIST'] = bool(rwequipment.materialexposedtoclext)
            objCui['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objCui['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
            objCui['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
            objCui['CUI_INSP_EFF'] = 'E'
            objCui['CUI_INSP_NUM'] = 0
            objCui['APIComponentType'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
            objCui['NomalThick'] = rwcomponent.nominalthickness
            objCui['CurrentThick'] = rwcomponent.currentthickness
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            # chua thay dung
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
            objCui['WeldJointEffciency'] = rwcomponent.weldjointefficiency
            objCui['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
            objCui['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
            objCui['AllowableStress'] = rwcomponent.allowablestress
            objCui['MinThickReq'] = rwcomponent.minreqthickness
            objCui['StructuralThickness'] = rwcomponent.structuralthickness
            objCui['Pressure'] = rwmaterial.designpressure
            objCui['Diametter'] = rwcomponent.nominaldiameter
            objCui['ShapeFactor'] = comptype.shapefactor
            objCui['COMPONENT_INSTALL_DATE'] = COMPONENT_INSTALL_DATE
            objCui['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
            objCui['shape'] = models.ApiComponentType.objects.get(
                apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename

            # DF_BRITTLE
            objBri = {}
            rwassessment = models.RwAssessment.objects.get(id=proposalID)
            comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
            COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
                equipmentid=comp.equipmentid_id).commissiondate
            ComponentNumber = str(comp.componentnumber)
            EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
            objBri['ComponentNumber'] = ComponentNumber
            objBri['EquipmentNumber'] = EquipmentName
            objBri['Assessment'] = rwassessment.proposalname
            rwequipment = models.RwEquipment.objects.get(id=proposalID)
            rwstream = models.RwStream.objects.get(id=proposalID)
            rwmaterial = models.RwMaterial.objects.get(id=proposalID)
            rwcomponent = models.RwComponent.objects.get(id=proposalID)
            objBri['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
            objBri['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
            objBri['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
            objBri['MIN_TEMP_PRESSURE'] = rwequipment.minreqtemperaturepressurisation
            objBri['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
            objBri['PWHT'] = bool(rwequipment.pwht)
            objBri['REF_TEMP'] = rwmaterial.referencetemperature
            objBri['BRITTLE_THICK'] = rwcomponent.brittlefracturethickness
            objBri['FABRICATED_STEEL'] = bool(rwcomponent.fabricatedsteel)
            objBri['EQUIPMENT_SATISFIED'] = bool(rwcomponent.equipmentsatisfied)
            objBri['NOMINAL_OPERATING_CONDITIONS'] = bool(rwcomponent.nominaloperatingconditions)
            objBri['CET_THE_MAWP'] = bool(rwcomponent.cetgreaterorequal)
            objBri['CYCLIC_SERVICE'] = bool(rwcomponent.cyclicservice)
            objBri['PresenceCyanides'] = bool(rwstream.cyanide)
            objBri['EQUIPMENT_CIRCUIT_SHOCK'] = bool(rwcomponent.equipmentcircuitshock)
            objBri['NomalThick'] = rwcomponent.nominalthickness
            if objBri['NomalThick'] <= 12.7:
                objBri['equal_127'] = True
            else:
                objBri['equal_127'] = False
            if objBri['NomalThick'] <= 50.8:
                objBri['equal_508'] = True
            else:
                objBri['equal_508'] = False
            objBri['CARBON_ALLOY'] = bool(rwmaterial.carbonlowalloy)
            objBri['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
            objBri['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature

            # BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
            #                                    objBri['CRITICAL_TEMP'],
            #                                    objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
            #                                    objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
            #                                    objBri['NOMINAL_OPERATING_CONDITIONS'],
            #                                    objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
            #                                    objBri['EQUIPMENT_CIRCUIT_SHOCK'], objBri['NomalThick'],
            #                                    objBri['CARBON_ALLOY'],
            #                                    objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
            #                                    rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
            #                                    ComponentNumber)
            for i in range(20,0,-2):
                if (obj['NominalThickness']-i)>0:
                    dataNominalThicknessX.append(str(obj['NominalThickness']-i));
                    xx=obj['NominalThickness']-i;
                    print(obj['CladdingThickness'])
                    thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], xx, obj['CurentThickness'],
                                                 obj['MinimunRequiredThickness'], obj['CorrosionRate'],
                                                 rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                                 obj['CladdingThickness'],
                                                 obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                                 0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                                 bool(obj['deadLegs']), rwequipment.tankismaintained,
                                                 rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                                 obj['WeltJointEfficiency'], obj['AllowableStress'],
                                                 obj['TensileStrength'],
                                                 obj['YeildStrength'], rwcomponent.structuralthickness,
                                                 rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                                 obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                                 rwassessment.assessmentdate, commisstiondate, ComponentNumber,
                                                 APIComponentType)
                    EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                             objExCor['EXTERN_COAT_QUALITY'],
                                                                             objExCor['EXTERNAL_EVIRONMENT'],
                                                                             objExCor['CUI_PERCENT_2'],
                                                                             objExCor['CUI_PERCENT_3'],
                                                                             objExCor['CUI_PERCENT_4'],
                                                                             objExCor['CUI_PERCENT_5'],
                                                                             objExCor['CUI_PERCENT_6'],
                                                                             objExCor['SUPPORT_COATING'],
                                                                             objExCor['INTERFACE_SOIL_WATER'],
                                                                             objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                             objExCor['CARBON_ALLOY'],
                                                                             objExCor['MAX_OP_TEMP'],
                                                                             objExCor['MIN_OP_TEMP'],
                                                                             objExCor['EXTERNAL_INSP_EFF'],
                                                                             objExCor['EXTERNAL_INSP_NUM'],
                                                                             objExCor['NoINSP_EXTERNAL'],
                                                                             objExCor['APIComponentType'],
                                                                             xx,
                                                                             objExCor['CurrentThick'],
                                                                             objExCor['WeldJointEffciency'],
                                                                             objExCor['YieldStrengthDesignTemp'],
                                                                             objExCor['TensileStrengthDesignTemp'],
                                                                             objExCor['ShapeFactor'],
                                                                             objExCor[
                                                                                 'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                             objExCor['CR_Confidents_Level'],
                                                                             objExCor['AllowableStress'],
                                                                             objExCor['MinThickReq'],
                                                                             objExCor['StructuralThickness'],
                                                                             objExCor['Pressure'],
                                                                             objExCor['Diametter'],
                                                                             rwassessment.assessmentdate,
                                                                             commisstiondate,
                                                                             ComponentNumber)
                    CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                                objCui['CUI_PERCENT_3'],
                                                objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                                objCui['CUI_PERCENT_6'],
                                                objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                                objCui['CUI_PERCENT_9'],
                                                objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                                objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                                objCui['INTERFACE_SOIL_WATER'],
                                                objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                                , objCui['CARBON_ALLOY'], objCui['MAX_OP_TEMP'],
                                                objCui['MIN_OP_TEMP'],
                                                objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                                objCui['APIComponentType']
                                                , xx, objCui['CurrentThick'],
                                                objCui['CR_Confidents_Level'],
                                                objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                objCui['WeldJointEffciency'],
                                                objCui['YieldStrengthDesignTemp'],
                                                objCui['TensileStrengthDesignTemp'],
                                                objCui['AllowableStress'], objCui['MinThickReq'],
                                                objCui['StructuralThickness'],
                                                objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                                objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                                rwassessment.assessmentdate, commisstiondate,
                                                ComponentNumber)
                    BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
                                                       objBri['CRITICAL_TEMP'],
                                                       objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
                                                       objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
                                                       objBri['NOMINAL_OPERATING_CONDITIONS'],
                                                       objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
                                                       objBri['EQUIPMENT_CIRCUIT_SHOCK'], xx,
                                                       objBri['CARBON_ALLOY'],
                                                       objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
                                                       rwassessment.assessmentdate, commisstiondate,
                                                       ComponentNumber)
                    thin0=thin.DF_THINNING_API(0)
                    dataPoFTemp=dataPoF

                    dataPoFTemp['thin']=thin0
                    dataPoFTemp['external_corrosion']=EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                    dataPoFTemp['cui']=CUIF.DF_CUI_API(0)
                    dataPoFTemp['brittle']=BRITTLE.DF_BRITTLE_API(0)
                    dataNominalThicknessY0.append(thin0)
                    # dataNominalThicknessY1.append(thin.DF_THINNING_API(36))
                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataNominalThicknessY1.append(temp['PoF'])
                    dataNominalThicknessY2.append(temp['damageTotal'] * dataCoF)
                    # print(ReCalculate.calculatePoF(proposalID,dataPoF))

            for i in range(0, 20, 2):
                dataNominalThicknessX.append(str(obj['NominalThickness'] + i));
                xx = obj['NominalThickness'] + i;
                thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], xx, obj['CurentThickness'],
                                             obj['MinimunRequiredThickness'], obj['CorrosionRate'],
                                             obj['CladdingThickness'],
                                             rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                             obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                             0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                             bool(obj['deadLegs']), rwequipment.tankismaintained,
                                             rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                             obj['WeltJointEfficiency'], obj['AllowableStress'],
                                             obj['TensileStrength'],
                                             obj['YeildStrength'], rwcomponent.structuralthickness,
                                             rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                             obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber,APIComponentType)
                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(commisstiondate,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         objExCor['MAX_OP_TEMP'],
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         xx,
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         commisstiondate,
                                                                         ComponentNumber)
                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], objCui['MAX_OP_TEMP'],
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , xx, objCui['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, commisstiondate,
                                            ComponentNumber)
                BRITTLE = Detail_DM_CAL.DF_BRITTLE(objBri['PRESSSURE_CONTROL'], objBri['MIN_TEMP_PRESSURE'],
                                                   objBri['CRITICAL_TEMP'],
                                                   objBri['PWHT'], objBri['REF_TEMP'], objBri['BRITTLE_THICK'],
                                                   objBri['FABRICATED_STEEL'], objBri['EQUIPMENT_SATISFIED'],
                                                   objBri['NOMINAL_OPERATING_CONDITIONS'],
                                                   objBri['CET_THE_MAWP'], objBri['CYCLIC_SERVICE'],
                                                   objBri['EQUIPMENT_CIRCUIT_SHOCK'], xx,
                                                   objBri['CARBON_ALLOY'],
                                                   objBri['MIN_DESIGN_TEMP'], objBri['MAX_OP_TEMP'],
                                                   rwassessment.assessmentdate, commisstiondate,
                                                   ComponentNumber)
                thin0 = thin.DF_THINNING_API(0)
                dataPoFTemp = dataPoF
                dataPoFTemp['thin'] = thin0
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)
                dataPoFTemp['brittle'] = BRITTLE.DF_BRITTLE_API(0)
                dataNominalThicknessY0.append(thin0)
                # dataNominalThicknessY1.append(thin.DF_THINNING_API(36))
                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataNominalThicknessY1.append(temp['PoF'])
                dataNominalThicknessY2.append(temp['damageTotal'] * dataCoF)

            #Minimun Measured Thickness


            for i in range(20,0,-2):
                if (obj['CurentThickness'] - i) > 0:
                    dataCurentThicknessX.append(str(obj['CurentThickness'] - i));
                    xx = obj['CurentThickness'] - i;
                    thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], xx,
                                                 obj['MinimunRequiredThickness'], obj['CorrosionRate'],
                                                 obj['CladdingThickness'],
                                                 rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                                 obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                                 0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                                 bool(obj['deadLegs']), rwequipment.tankismaintained,
                                                 rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                                 obj['WeltJointEfficiency'], obj['AllowableStress'],
                                                 obj['TensileStrength'],
                                                 obj['YeildStrength'], rwcomponent.structuralthickness,
                                                 rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                                 obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                                 rwassessment.assessmentdate, commisstiondate,
                                                 ComponentNumber,
                                                 APIComponentType)
                    EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                             objExCor['EXTERN_COAT_QUALITY'],
                                                                             objExCor['EXTERNAL_EVIRONMENT'],
                                                                             objExCor['CUI_PERCENT_2'],
                                                                             objExCor['CUI_PERCENT_3'],
                                                                             objExCor['CUI_PERCENT_4'],
                                                                             objExCor['CUI_PERCENT_5'],
                                                                             objExCor['CUI_PERCENT_6'],
                                                                             objExCor['SUPPORT_COATING'],
                                                                             objExCor['INTERFACE_SOIL_WATER'],
                                                                             objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                             objExCor['CARBON_ALLOY'],
                                                                             objExCor['MAX_OP_TEMP'],
                                                                             objExCor['MIN_OP_TEMP'],
                                                                             objExCor['EXTERNAL_INSP_EFF'],
                                                                             objExCor['EXTERNAL_INSP_NUM'],
                                                                             objExCor['NoINSP_EXTERNAL'],
                                                                             objExCor['APIComponentType'],
                                                                             objExCor['NomalThick'],
                                                                             xx,
                                                                             objExCor['WeldJointEffciency'],
                                                                             objExCor['YieldStrengthDesignTemp'],
                                                                             objExCor['TensileStrengthDesignTemp'],
                                                                             objExCor['ShapeFactor'],
                                                                             objExCor['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                             objExCor['CR_Confidents_Level'],
                                                                             objExCor['AllowableStress'],
                                                                             objExCor['MinThickReq'],
                                                                             objExCor['StructuralThickness'],
                                                                             objExCor['Pressure'],
                                                                             objExCor['Diametter'],
                                                                             rwassessment.assessmentdate,
                                                                             commisstiondate,
                                                                             ComponentNumber)
                    CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                                objCui['CUI_PERCENT_3'],
                                                objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                                objCui['CUI_PERCENT_6'],
                                                objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                                objCui['CUI_PERCENT_9'],
                                                objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                                objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                                objCui['INTERFACE_SOIL_WATER'],
                                                objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                                , objCui['CARBON_ALLOY'], objCui['MAX_OP_TEMP'],
                                                objCui['MIN_OP_TEMP'],
                                                objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                                objCui['APIComponentType']
                                                , objCui['NomalThick'], xx,
                                                objCui['CR_Confidents_Level'],
                                                objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                objCui['WeldJointEffciency'],
                                                objCui['YieldStrengthDesignTemp'],
                                                objCui['TensileStrengthDesignTemp'],
                                                objCui['AllowableStress'], objCui['MinThickReq'],
                                                objCui['StructuralThickness'],
                                                objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                                objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                                rwassessment.assessmentdate, commisstiondate,
                                                ComponentNumber)
                    # dataCurentThicknessY0.append(thin.DF_THINNING_API(0))
                    # dataCurentThicknessY1.append(thin.DF_THINNING_API(36))
                    # dataCurentThicknessY2.append(thin.DF_THINNING_API(72))
                    thin0 = thin.DF_THINNING_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['thin'] = thin0
                    dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                    dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)

                    dataCurentThicknessY0.append(thin0)
                    # dataNominalThicknessY1.append(thin.DF_THINNING_API(36))
                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataCurentThicknessY1.append(temp['PoF'])
                    dataCurentThicknessY2.append(temp['damageTotal'] * dataCoF)
            for i in range(0, 20, 2):
                dataCurentThicknessX.append(str(obj['CurentThickness'] + i));
                xx = obj['CurentThickness'] + i;
                thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], xx,
                                             obj['MinimunRequiredThickness'], obj['CorrosionRate'],
                                             obj['CladdingThickness'],
                                             rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                             obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                             0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                             bool(obj['deadLegs']), rwequipment.tankismaintained,
                                             rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                             obj['WeltJointEfficiency'], obj['AllowableStress'],
                                             obj['TensileStrength'],
                                             obj['YeildStrength'], rwcomponent.structuralthickness,
                                             rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                             obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                             rwassessment.assessmentdate, commisstiondate,
                                             ComponentNumber,
                                             APIComponentType)
                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         objExCor['MAX_OP_TEMP'],
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         xx,
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         objExCor['MinThickReq'],
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         commisstiondate,
                                                                         ComponentNumber)
                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], objCui['MAX_OP_TEMP'],
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], xx,
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], objCui['MinThickReq'],
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, commisstiondate,
                                            ComponentNumber)
                thin0 = thin.DF_THINNING_API(0)
                dataPoFTemp = dataPoF
                dataPoFTemp['thin'] = thin0
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)

                dataCurentThicknessY0.append(thin0)

                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataCurentThicknessY1.append(temp['PoF'])
                dataCurentThicknessY2.append(temp['damageTotal'] * dataCoF)
                # dataCurentThicknessY0.append(thin.DF_THINNING_API(0))
                # dataCurentThicknessY1.append(thin.DF_THINNING_API(36))
                # dataCurentThicknessY2.append(thin.DF_THINNING_API(72))
            #Current Corrosion Rate
            for i in range(20,0,-2):
                if (obj['CorrosionRate'] - i) > 0:
                    dataCorrosionRateX.append(str(obj['CorrosionRate'] - i));
                    xx = obj['CorrosionRate'] - i;
                    thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], obj['CurentThickness'],
                                                 obj['MinimunRequiredThickness'], xx,
                                                 rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                                 obj['CladdingThickness'],
                                                 obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                                 0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                                 bool(obj['deadLegs']), rwequipment.tankismaintained,
                                                 rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                                 obj['WeltJointEfficiency'], obj['AllowableStress'],
                                                 obj['TensileStrength'],
                                                 obj['YeildStrength'], rwcomponent.structuralthickness,
                                                 rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                                 obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                                 rwassessment.assessmentdate, commisstiondate,
                                                 ComponentNumber,
                                                 APIComponentType)
                    thin0 = thin.DF_THINNING_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['thin'] = thin0
                    dataCorrosionRateY0.append(thin0)

                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataCorrosionRateY1.append(temp['PoF'])
                    dataCorrosionRateY2.append(temp['damageTotal'] * dataCoF)
                    # dataCorrosionRateY0.append(thin.DF_THINNING_API(0))
                    # dataCorrosionRateY1.append(thin.DF_THINNING_API(36))
                    # dataCorrosionRateY2.append(thin.DF_THINNING_API(72))
            for i in range(0, 20, 2):
                dataCorrosionRateX.append(str(obj['CorrosionRate'] + i));
                xx = obj['CorrosionRate'] + i;
                thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], obj['CurentThickness'],
                                             obj['MinimunRequiredThickness'], xx,
                                             rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                             obj['CladdingThickness'],
                                             obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                             0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                             bool(obj['deadLegs']), rwequipment.tankismaintained,
                                             rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                             obj['WeltJointEfficiency'], obj['AllowableStress'],
                                             obj['TensileStrength'],
                                             obj['YeildStrength'], rwcomponent.structuralthickness,
                                             rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                             obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                             rwassessment.assessmentdate, commisstiondate, ComponentNumber,
                                             APIComponentType)
                thin0 = thin.DF_THINNING_API(0)
                dataPoFTemp = dataPoF
                dataPoFTemp['thin'] = thin0
                dataCorrosionRateY0.append(thin0)

                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataCorrosionRateY1.append(temp['PoF'])
                dataCorrosionRateY2.append(temp['damageTotal'] * dataCoF)


            # Minimum Required Thickness
            for i in range(20,0,-2):
                if (obj['MinimunRequiredThickness'] - i) > 0:
                    dataMinimunRequiredThicknessX.append(str(obj['MinimunRequiredThickness'] - i));
                    xx = obj['MinimunRequiredThickness'] - i;
                    thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], obj['CurentThickness'],
                                                 xx, obj['CorrosionRate'],
                                                 rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                                 obj['CladdingThickness'],
                                                 obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                                 0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                                 bool(obj['deadLegs']), rwequipment.tankismaintained,
                                                 rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                                 obj['WeltJointEfficiency'], obj['AllowableStress'],
                                                 obj['TensileStrength'],
                                                 obj['YeildStrength'], rwcomponent.structuralthickness,
                                                 rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                                 obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                                 rwassessment.assessmentdate, commisstiondate,
                                                 ComponentNumber,
                                                 APIComponentType)
                    EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(commisstiondate,
                                                                             objExCor['EXTERN_COAT_QUALITY'],
                                                                             objExCor['EXTERNAL_EVIRONMENT'],
                                                                             objExCor['CUI_PERCENT_2'],
                                                                             objExCor['CUI_PERCENT_3'],
                                                                             objExCor['CUI_PERCENT_4'],
                                                                             objExCor['CUI_PERCENT_5'],
                                                                             objExCor['CUI_PERCENT_6'],
                                                                             objExCor['SUPPORT_COATING'],
                                                                             objExCor['INTERFACE_SOIL_WATER'],
                                                                             objExCor[
                                                                                 'EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                             objExCor['CARBON_ALLOY'],
                                                                             objExCor['MAX_OP_TEMP'],
                                                                             objExCor['MIN_OP_TEMP'],
                                                                             objExCor['EXTERNAL_INSP_EFF'],
                                                                             objExCor['EXTERNAL_INSP_NUM'],
                                                                             objExCor['NoINSP_EXTERNAL'],
                                                                             objExCor['APIComponentType'],
                                                                             objExCor['NomalThick'],
                                                                             objExCor['CurrentThick'],
                                                                             objExCor['WeldJointEffciency'],
                                                                             objExCor['YieldStrengthDesignTemp'],
                                                                             objExCor['TensileStrengthDesignTemp'],
                                                                             objExCor['ShapeFactor'],
                                                                             objExCor[
                                                                                 'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                             objExCor['CR_Confidents_Level'],
                                                                             objExCor['AllowableStress'],
                                                                             xx,
                                                                             objExCor['StructuralThickness'],
                                                                             objExCor['Pressure'],
                                                                             objExCor['Diametter'],
                                                                             rwassessment.assessmentdate,
                                                                             commisstiondate,
                                                                             ComponentNumber)
                    CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                                objCui['CUI_PERCENT_3'],
                                                objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                                objCui['CUI_PERCENT_6'],
                                                objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                                objCui['CUI_PERCENT_9'],
                                                objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                                objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                                objCui['INTERFACE_SOIL_WATER'],
                                                objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                                , objCui['CARBON_ALLOY'], objCui['MAX_OP_TEMP'],
                                                objCui['MIN_OP_TEMP'],
                                                objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                                objCui['APIComponentType']
                                                , objCui['NomalThick'], objExCor['CurrentThick'],
                                                objCui['CR_Confidents_Level'],
                                                objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                objCui['WeldJointEffciency'],
                                                objCui['YieldStrengthDesignTemp'],
                                                objCui['TensileStrengthDesignTemp'],
                                                objCui['AllowableStress'], xx,
                                                objCui['StructuralThickness'],
                                                objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                                objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                                rwassessment.assessmentdate, commisstiondate,
                                                ComponentNumber)
                    thin0 = thin.DF_THINNING_API(0)
                    dataPoFTemp = dataPoF
                    dataPoFTemp['thin'] = thin0
                    dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                    dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)

                    dataMinimunRequiredThicknessY0.append(thin0)

                    temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                    dataMinimunRequiredThicknessY1.append(temp['PoF'])
                    dataMinimunRequiredThicknessY2.append(temp['damageTotal'] * dataCoF)
                    # dataMinimunRequiredThicknessY0.append(thin.DF_THINNING_API(0))
                    # dataMinimunRequiredThicknessY1.append(thin.DF_THINNING_API(36))
                    # dataMinimunRequiredThicknessY2.append(thin.DF_THINNING_API(72))
            for i in range(0, 20, 2):
                dataMinimunRequiredThicknessX.append(str(obj['MinimunRequiredThickness'] + i));
                xx = obj['MinimunRequiredThickness'] + i;
                thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], obj['CurentThickness'],
                                             xx, obj['CorrosionRate'],
                                             rwmaterial.corrosionallowance,bool(rwcomponent.releasepreventionbarrier),
                                             obj['CladdingThickness'],
                                             obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                             0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                             bool(obj['deadLegs']), rwequipment.tankismaintained,
                                             rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                             obj['WeltJointEfficiency'], obj['AllowableStress'],
                                             obj['TensileStrength'],
                                             obj['YeildStrength'], rwcomponent.structuralthickness,
                                             rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                             obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                             rwassessment.assessmentdate, commisstiondate, ComponentNumber,
                                             APIComponentType)
                EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(COMPONENT_INSTALL_DATE,
                                                                         objExCor['EXTERN_COAT_QUALITY'],
                                                                         objExCor['EXTERNAL_EVIRONMENT'],
                                                                         objExCor['CUI_PERCENT_2'],
                                                                         objExCor['CUI_PERCENT_3'],
                                                                         objExCor['CUI_PERCENT_4'],
                                                                         objExCor['CUI_PERCENT_5'],
                                                                         objExCor['CUI_PERCENT_6'],
                                                                         objExCor['SUPPORT_COATING'],
                                                                         objExCor['INTERFACE_SOIL_WATER'],
                                                                         objExCor[
                                                                             'EXTERNAL_EXPOSED_FLUID_MIST'],
                                                                         objExCor['CARBON_ALLOY'],
                                                                         objExCor['MAX_OP_TEMP'],
                                                                         objExCor['MIN_OP_TEMP'],
                                                                         objExCor['EXTERNAL_INSP_EFF'],
                                                                         objExCor['EXTERNAL_INSP_NUM'],
                                                                         objExCor['NoINSP_EXTERNAL'],
                                                                         objExCor['APIComponentType'],
                                                                         objExCor['NomalThick'],
                                                                         objExCor['CurrentThick'],
                                                                         objExCor['WeldJointEffciency'],
                                                                         objExCor['YieldStrengthDesignTemp'],
                                                                         objExCor['TensileStrengthDesignTemp'],
                                                                         objExCor['ShapeFactor'],
                                                                         objExCor[
                                                                             'MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                                                         objExCor['CR_Confidents_Level'],
                                                                         objExCor['AllowableStress'],
                                                                         xx,
                                                                         objExCor['StructuralThickness'],
                                                                         objExCor['Pressure'],
                                                                         objExCor['Diametter'],
                                                                         rwassessment.assessmentdate,
                                                                         commisstiondate,
                                                                         ComponentNumber)
                CUIF = Detail_DM_CAL.Df_CUI(objCui['EXTERNAL_EVIRONMENT'], objCui['CUI_PERCENT_2'],
                                            objCui['CUI_PERCENT_3'],
                                            objCui['CUI_PERCENT_4'], objCui['CUI_PERCENT_5'],
                                            objCui['CUI_PERCENT_6'],
                                            objCui['CUI_PERCENT_7'], objCui['CUI_PERCENT_8'],
                                            objCui['CUI_PERCENT_9'],
                                            objCui['INSULATION_TYPE'], objCui['PIPING_COMPLEXITY'],
                                            objCui['INSULATION_CONDITION'], objCui['SUPPORT_COATING'],
                                            objCui['INTERFACE_SOIL_WATER'],
                                            objCui['EXTERNAL_EXPOSED_FLUID_MIST']
                                            , objCui['CARBON_ALLOY'], objCui['MAX_OP_TEMP'],
                                            objCui['MIN_OP_TEMP'],
                                            objCui['CUI_INSP_EFF'], objCui['CUI_INSP_NUM'],
                                            objCui['APIComponentType']
                                            , objCui['NomalThick'], objExCor['CurrentThick'],
                                            objCui['CR_Confidents_Level'],
                                            objCui['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                            objCui['WeldJointEffciency'],
                                            objCui['YieldStrengthDesignTemp'],
                                            objCui['TensileStrengthDesignTemp'],
                                            objCui['AllowableStress'], xx,
                                            objCui['StructuralThickness'],
                                            objCui['Pressure'], objCui['Diametter'], objCui['ShapeFactor'],
                                            objCui['COMPONENT_INSTALL_DATE'], objCui['EXTERN_COAT_QUALITY'],
                                            rwassessment.assessmentdate, commisstiondate,
                                            ComponentNumber)
                thin0 = thin.DF_THINNING_API(0)
                dataPoFTemp = dataPoF
                dataPoFTemp['thin'] = thin0
                dataPoFTemp['external_corrosion'] = EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
                dataPoFTemp['cui'] = CUIF.DF_CUI_API(0)

                dataMinimunRequiredThicknessY0.append(thin0)

                temp = ReCalculate.calculatePoF(proposalID, dataPoFTemp)
                dataMinimunRequiredThicknessY1.append(temp['PoF'])
                dataMinimunRequiredThicknessY2.append(temp['damageTotal'] * dataCoF)
                # dataMinimunRequiredThicknessY0.append(thin.DF_THINNING_API(0))
                # dataMinimunRequiredThicknessY1.append(thin.DF_THINNING_API(36))
                # dataMinimunRequiredThicknessY2.append(thin.DF_THINNING_API(72))



            # print(dataX)
            # print(dataY)
            return render(request, 'FacilityUI/risk_summary/expertHelpThin.html',{'dataNominalThicknessX':dataNominalThicknessX,'dataNominalThicknessY0':dataNominalThicknessY0,'dataNominalThicknessY1':dataNominalThicknessY1,'dataNominalThicknessY2':dataNominalThicknessY2,
                                                                                  'dataCurentThicknessX': dataCurentThicknessX,
                                                                                  'dataCurentThicknessY0': dataCurentThicknessY0,
                                                                                  'dataCurentThicknessY1': dataCurentThicknessY1,
                                                                                  'dataCurentThicknessY2': dataCurentThicknessY2,
                                                                                'dataCorrosionRateX': dataCorrosionRateX,'dataCorrosionRateY0': dataCorrosionRateY0,'dataCorrosionRateY1': dataCorrosionRateY1,'dataCorrosionRateY2': dataCorrosionRateY2,
                                                                                  'dataMinimunRequiredThicknessX': dataMinimunRequiredThicknessX,
                                                                                  'dataMinimunRequiredThicknessY0': dataMinimunRequiredThicknessY0,
                                                                                  'dataMinimunRequiredThicknessY1': dataMinimunRequiredThicknessY1,
                                                                                  'dataMinimunRequiredThicknessY2': dataMinimunRequiredThicknessY2  })
        if(EquipmentType=='Tank'):
             obj['AdjustmentSettle']=rwequipment.adjustmentsettle
             obj['adjustmentSettlement']=thin.adjustmentSettlement()
             obj['adjustmentMaintenance']=thin.adjustmentMaintenance()
             obj['adjustmentWeldedContruction']=thin.adjustmentWeldedContruction()
             obj['TankisMainTenance'] = rwequipment.tankismaintained
             obj['WeldedComponent'] = rwequipment.componentiswelded
             obj['Confidencecorrosionrate'] = rwcomponent.confidencecorrosionrate
             return render(request, 'FacilityUI/risk_summary/showThiningTank.html',{'page':'thiningTank','proposalID':proposalID,'a':obj,'info':request.session,'noti':noti,'countnoti':countnoti,'count':count})
        else:
            if 'try' in request.POST:
                # obj['NA_Thin'] = int(request.POST.get("NA_Thin"))
                # obj['NB_Thin'] = int(request.POST.get("NB_Thin"))
                # obj['NC_Thin'] = int(request.POST.get("NC_Thin"))
                # obj['ND_Thin'] = int(request.POST.get("ND_Thin"))
                obj['NominalThickness']=float(request.POST.get("NominalThickness"))
                obj['CurentThickness']=float(request.POST.get("CurentThickness"))
                obj['CorrosionRate']=float(request.POST.get("CorrosionRate"))
                obj['MinimunRequiredThickness']=float(request.POST.get("MinimunRequiredThickness"))
                obj['InternalCladding']=int(request.POST.get("InternalCladding"))
                obj['CladdingCorrosionRate']=float(request.POST.get("CladdingCorrosionRate"))
                obj['DesignPressure']=float(request.POST.get("DesignPressure"))
                obj['Diameter'] = float(request.POST.get("Diameter"))
                obj['ChemicalInjection']=int(request.POST.get("ChemicalInjection"))
                obj['HighlyEffectiveInspectionforChemicalInjection']=int(request.POST.get("HighlyEffectiveInspectionforChemicalInjection"))
                obj['deadLegs']=int(request.POST.get("deadLegs"))
                obj['HighEffectiveDeadlegs']=int(request.POST.get("HighEffectiveDeadlegs"))
                obj['confidencecorrosionrate']=request.POST.get("confidencecorrosionrate")
                obj['WeltJointEfficiency']=float(request.POST.get("WeltJointEfficiency"))
                obj['YeildStrength']=float(request.POST.get("YeildStrength"))
                obj['TensileStrength']=float(request.POST.get("TensileStrength"))
                obj['AllowableStress']=float(request.POST.get("AllowableStress"))
                obj['Onlinemonitoring']=request.POST.get("Onlinemonitoring")
                obj['LastInspectionDate'] = damageMachinsm.lastinspdate.strftime('%Y-%m-%d')
                obj['NumberofInspection'] = damageMachinsm.numberofinspections
                thin = Detail_DM_CAL.Df_Thin(obj['Diameter'], obj['NominalThickness'], obj['CurentThickness'],
                                             obj['MinimunRequiredThickness'], obj['CorrosionRate'],
                                             rwmaterial.corrosionallowance, bool(rwcomponent.releasepreventionbarrier),
                                             obj['CladdingThickness'],
                                             obj['CladdingCorrosionRate'], bool(obj['InternalCladding']),
                                             0, "E", obj['Onlinemonitoring'], obj['HighEffectiveDeadlegs'],
                                             bool(obj['deadLegs']), rwequipment.tankismaintained,
                                             rwequipment.adjustmentsettle, rwequipment.componentiswelded,
                                             obj['WeltJointEfficiency'], obj['AllowableStress'], obj['TensileStrength'],
                                             obj['YeildStrength'], rwcomponent.structuralthickness,
                                             rwcomponent.minstructuralthickness, obj['DesignPressure'],
                                             obj['shapeFactor'], obj['confidencecorrosionrate'], EquipmentType,
                                             rwassessment.assessmentdate, commisstiondate, ComponentNumber,
                                             APIComponentType)


                obj['flowTress'] = thin.FS_Thin()
                obj['strengthRatioIn'] = thin.strengthRatioInter()
                obj['strengthRatioMin'] = thin.strengthRationMin()
                obj['adjustmentInjection'] = thin.adjustmentInjection()
                obj['adjustmentOnline'] = thin.adjustmentOnline()
                obj['adjustmentDeadLegs'] = thin.adjustmentDeadLegs()

                obj['priorProbabilities1'] = thin.Pr_P1_Thin()
                obj['priorProbabilities2'] = thin.Pr_P2_Thin()
                obj['priorProbabilities3'] = thin.Pr_P3_Thin()

                obj['inspectioneffectivenessfactors1'] = thin.I1_Thin()
                obj['inspectioneffectivenessfactors2'] = thin.I2_Thin()
                obj['inspectioneffectivenessfactors3'] = thin.I3_Thin()
                obj['PosteriorProbability1'] = thin.Po_P1_Thin()
                obj['PosteriorProbability2'] = thin.Po_P2_Thin()
                obj['PosteriorProbability3'] = thin.Po_P3_Thin()
                obj['BetaReliabilityIndices0AP_1'] = thin.B1_Thin(0 + thin.GET_AGE())
                obj['BetaReliabilityIndices0AP_2'] = thin.B1_Thin(3 + thin.GET_AGE())
                obj['BetaReliabilityIndices0AP_3'] = thin.B1_Thin(6 + thin.GET_AGE())
                obj['BetaReliabilityIndices1AP_1'] = thin.B2_Thin(0 + thin.GET_AGE())
                obj['BetaReliabilityIndices1AP_2'] = thin.B2_Thin(3 + thin.GET_AGE())
                obj['BetaReliabilityIndices1AP_3'] = thin.B2_Thin(6 + thin.GET_AGE())
                obj['BetaReliabilityIndices2AP_1'] = thin.B3_Thin(0 + thin.GET_AGE())
                obj['BetaReliabilityIndices2AP_2'] = thin.B3_Thin(3 + thin.GET_AGE())
                obj['BetaReliabilityIndices2AP_3'] = thin.B3_Thin(6 + thin.GET_AGE())
                obj['age1'] = thin.agetk(0 + thin.GET_AGE())
                obj['age2'] = thin.agetk(3 + thin.GET_AGE())
                obj['age3'] = thin.agetk(6 + thin.GET_AGE())
                obj['agetk1'] = thin.agetk(0 + thin.GET_AGE())
                obj['agetk2'] = thin.agetk(3 + thin.GET_AGE())
                obj['agetk3'] = thin.agetk(6 + thin.GET_AGE())
                obj['agerc1'] = thin.agerc(0 + thin.GET_AGE())
                obj['agerc2'] = thin.agerc(3 + thin.GET_AGE())
                obj['agerc3'] = thin.agerc(6 + thin.GET_AGE())
                obj['ArtWithout1'] = thin.ArtWithoutCladdingMaterial(0 + thin.GET_AGE())
                obj['ArtWithout2'] = thin.ArtWithoutCladdingMaterial(3 + thin.GET_AGE())
                obj['ArtWithout3'] = thin.ArtWithoutCladdingMaterial(6 + thin.GET_AGE())
                obj['ArtWith1_1'] = thin.ArtWithCladdingMaterial1(0 + thin.GET_AGE())
                obj['ArtWith1_2'] = thin.ArtWithCladdingMaterial1(3 + thin.GET_AGE())
                obj['ArtWith1_3'] = thin.ArtWithCladdingMaterial1(6 + thin.GET_AGE())
                obj['ArtWith2_1'] = thin.ArtWithCladdingMaterial2(0 + thin.GET_AGE())
                obj['ArtWith2_2'] = thin.ArtWithCladdingMaterial2(3 + thin.GET_AGE())
                obj['ArtWith2_3'] = thin.ArtWithCladdingMaterial2(6 + thin.GET_AGE())
                obj['WallLossFraction1'] = thin.Art(0 + thin.GET_AGE())
                obj['WallLossFraction2'] = thin.Art(3 + thin.GET_AGE())
                obj['WallLossFraction3'] = thin.Art(6 + thin.GET_AGE())
                obj['NA_Thin'] = thin.NA_Thin()
                obj['NB_Thin'] = thin.NB_Thin()
                obj['NC_Thin'] = thin.NC_Thin()
                obj['ND_Thin'] = thin.ND_Thin()
                obj['BaseDamageFactor1'] = thin.DFB_THIN_API(0)
                obj['BaseDamageFactor2'] = thin.DFB_THIN_API(3)
                obj['BaseDamageFactor3'] = thin.DFB_THIN_API(6)
                obj['ThinningDamageFactor1'] = thin.DF_THINNING_API(0)
                obj['ThinningDamageFactor2'] = thin.DF_THINNING_API(3)
                obj['ThinningDamageFactor3'] = thin.DF_THINNING_API(6)

        return render(request, 'FacilityUI/risk_summary/showThining.html',
                      {'page':'thining','proposalID':proposalID,'a':obj,'info':request.session,
                       'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
def chooseGoverningBrittle(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    if '_885f' in request.POST:
        return redirect('885', proposalID=proposalID)
    if '_sigma' in request.POST:
        return redirect('SIGMA', proposalID=proposalID)
    if '_brit' in request.POST:
        return redirect('BRITTLE', proposalID=proposalID)
    if '_tempe' in request.POST:
        return redirect('TEMP_EMBRITTLE', proposalID=proposalID)
    return render(request,'FacilityUI/risk_summary/chooseGoverningBrittle.html',
                  {'page':'chooseThining','proposalID':proposalID,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def chooseGoverningExternal(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    if '_extf' in request.POST:
        return redirect('EXTERNAL_CORROSION', proposalID=proposalID)
    if '_cuif' in request.POST:
        return redirect('CUIF', proposalID=proposalID)
    if '_ext_clscc' in request.POST:
        return redirect('extCLSCC', proposalID=proposalID)
    if '_cui_clscc' in request.POST:
        return redirect('CUI_CLSCC', proposalID=proposalID)
    return render(request,'FacilityUI/risk_summary/chooseGoverningExternal.html',
                  {'page':'chooseGovExt','proposalID':proposalID,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowGoverningExternal(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'FacilityUI/risk_summary/showGoverningExternal.html',
                  {'page':'governingExternal','info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowextCLSCC(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['EXTERNAL_EVIRONMENT'] =rwequipment.externalenvironment
        obj['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
        obj['AUSTENITIC_STEEL'] =bool(rwmaterial.austenitic)
        obj['EXTERNAL_EXPOSED_FLUID_MIST'] =bool(rwequipment.materialexposedtoclext)
        obj['MIN_DESIGN_TEMP'] =rwmaterial.mindesigntemperature

        if rwassessment.commisstiondate:
            CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(obj['CRACK_PRESENT'], obj['EXTERNAL_EVIRONMENT'], obj['MAX_OP_TEMP'],'E',0,
                                                         obj['AUSTENITIC_STEEL'], obj['EXTERNAL_EXPOSED_FLUID_MIST'], obj['MIN_DESIGN_TEMP'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            CLSCC = Detail_DM_CAL.Df_EXTERN_CLSCC(obj['CRACK_PRESENT'], obj['EXTERNAL_EVIRONMENT'], obj['MAX_OP_TEMP'],'E', 0,
                                                  obj['AUSTENITIC_STEEL'], obj['EXTERNAL_EXPOSED_FLUID_MIST'],
                                                  obj['MIN_DESIGN_TEMP'],
                                                  rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                  ComponentNumber)
        obj['EXTERN_CLSCC_INSP_EFF'] = CLSCC.EXTERN_CLSCC_INSP_EFF
        obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        obj['SVI']=CLSCC.SVI
        obj['age1']=CLSCC.GET_AGE()
        obj['age2']=CLSCC.GET_AGE()+3
        obj['age3']=CLSCC.GET_AGE()+6
        obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        obj['EXTERN_CLSCC1']=CLSCC.DF_EXTERN_CLSCC_API(0)
        obj['EXTERN_CLSCC2']=CLSCC.DF_EXTERN_CLSCC_API(3)
        obj['EXTERN_CLSCC3']=CLSCC.DF_EXTERN_CLSCC_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/extCLSCC.html',
                  {'page':'governingExternal','proposalID':proposalID,'a':obj, 'info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowCUI_CLSCC(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CRACK_PRESENT'] = bool(rwcomponent.crackspresent)
        obj['EXTERNAL_EVIRONMENT'] =rwequipment.externalenvironment
        obj['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
        obj['PIPING_COMPLEXITY'] = rwcomponent.complexityprotrusion
        obj['INSULATION_CONDITION'] = rwcoat.insulationcondition
        obj['INSULATION_CHLORIDE'] = bool(rwcoat.insulationcontainschloride)
        obj['AUSTENITIC_STEEL'] = bool(rwmaterial.austenitic)
        obj['EXTERNAL_INSULATION'] = bool(rwcoat.externalinsulation)

        obj['EXTERNAL_EXPOSED_FLUID_MIST'] =bool(rwequipment.materialexposedtoclext)
        obj['MIN_OP_TEMP'] =rwstream.minoperatingtemperature
        obj['EXTERN_COAT_QUALITY'] = rwcoat.externalcoatingquality
        if rwassessment.commisstiondate:
            CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(obj['CRACK_PRESENT'], obj['EXTERNAL_EVIRONMENT'], obj['MAX_OP_TEMP'],obj['PIPING_COMPLEXITY'],obj['INSULATION_CONDITION'],
                                                obj['INSULATION_CHLORIDE'],'E',0,
                                                         obj['AUSTENITIC_STEEL'],obj['EXTERNAL_INSULATION'], obj['EXTERNAL_EXPOSED_FLUID_MIST'], obj['MIN_OP_TEMP'],obj['EXTERN_COAT_QUALITY'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            CUI_CLSCC = Detail_DM_CAL.Df_CUI_CLSCC(obj['CRACK_PRESENT'], obj['EXTERNAL_EVIRONMENT'], obj['MAX_OP_TEMP'],
                                                   obj['PIPING_COMPLEXITY'], obj['INSULATION_CONDITION'],
                                                   obj['INSULATION_CHLORIDE'], 'E', 0,
                                                   obj['AUSTENITIC_STEEL'], obj['EXTERNAL_INSULATION'],
                                                   obj['EXTERNAL_EXPOSED_FLUID_MIST'], obj['MIN_OP_TEMP'],
                                                   obj['EXTERN_COAT_QUALITY'],
                                                   rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                   ComponentNumber)
        obj['EXTERN_CLSCC_CUI_INSP_EFF'] = CUI_CLSCC.EXTERN_CLSCC_CUI_INSP_EFF
        obj['EXTERN_CLSCC_CUI_INSP_NUM'] = CUI_CLSCC.EXTERN_CLSCC_CUI_INSP_NUM
        obj['Susceptibility']=CUI_CLSCC.CUI_CLSCC_SUSCEP()
        obj['SVI']=CUI_CLSCC.SVI()
        obj['age1']=CUI_CLSCC.GET_AGE()
        obj['age2']=CUI_CLSCC.GET_AGE()+3
        obj['age3']=CUI_CLSCC.GET_AGE()+6
        obj['ageCoat'] = CUI_CLSCC.AGE_CLSCC()
        obj['FCM']=CUI_CLSCC.ADJUST_COMPLEXITY()
        obj['FIC']=CUI_CLSCC.ADJUST_ISULATION()
        obj['FCF']=CUI_CLSCC.ADJUST_CHLORIDE_INSULATION()
        obj['agetk1'] = CUI_CLSCC.agetk(0+CUI_CLSCC.GET_AGE())
        obj['agetk2'] = CUI_CLSCC.agetk(3+CUI_CLSCC.GET_AGE())
        obj['agetk3']=CUI_CLSCC.agetk(6+CUI_CLSCC.GET_AGE())
        obj['AGE_CUI1'] = CUI_CLSCC.AGE_CUI(0+CUI_CLSCC.GET_AGE())
        obj['AGE_CUI2'] = CUI_CLSCC.AGE_CUI(3+CUI_CLSCC.GET_AGE())
        obj['AGE_CUI3']=CUI_CLSCC.AGE_CUI(6+CUI_CLSCC.GET_AGE())
        obj['base1']=CUI_CLSCC.DFB_CUI_CLSCC_API(0)
        obj['base2']=CUI_CLSCC.DFB_CUI_CLSCC_API(3)
        obj['base3']=CUI_CLSCC.DFB_CUI_CLSCC_API(6)
        obj['CUI_CLSCC1']=CUI_CLSCC.DF_CUI_CLSCC_API(0)
        obj['CUI_CLSCC2']=CUI_CLSCC.DF_CUI_CLSCC_API(3)
        obj['CUI_CLSCC3']=CUI_CLSCC.DF_CUI_CLSCC_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/CUI_CLSCC.html',
                  {'page':'governingExternal','proposalID':proposalID,'a':obj, 'info':request.session,
                   'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowEXTERNAL_CORROSION(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        if rwassessment.commisstiondate:
            commisstiondate = rwassessment.commisstiondate
        else:
            commisstiondate = COMPONENT_INSTALL_DATE
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = rwassessment.commisstiondate.strftime('%Y-%m-%d')
        obj['EXTERN_COAT_QUALITY'] =rwcoat.externalcoatingquality
        obj['EXTERNAL_EVIRONMENT'] =rwequipment.externalenvironment
        obj['CUI_PERCENT_2']=rwexcor.minus8toplus6
        obj['CUI_PERCENT_3'] =rwexcor.plus6toplus32
        obj['CUI_PERCENT_4'] =rwexcor.plus32toplus71
        obj['CUI_PERCENT_5'] =rwexcor.plus71toplus107
        obj['CUI_PERCENT_6'] =rwexcor.plus107toplus121
        obj['SUPPORT_COATING'] =bool(rwcoat.supportconfignotallowcoatingmaint)
        obj['INTERFACE_SOIL_WATER'] =bool(rwequipment.interfacesoilwater)
        obj['EXTERNAL_EXPOSED_FLUID_MIST'] =bool(rwequipment.materialexposedtoclext)
        obj['CARBON_ALLOY'] =bool(rwmaterial.carbonlowalloy)
        obj['MAX_OP_TEMP'] =rwstream.maxoperatingtemperature
        obj['MIN_OP_TEMP'] =rwstream.minoperatingtemperature
        obj['EXTERNAL_INSP_EFF'] ='E'
        obj['EXTERNAL_INSP_NUM'] =0
        obj['NoINSP_EXTERNAL'] =0
        obj['APIComponentType'] =models.ApiComponentType.objects.get(
                                   apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        obj['NomalThick'] =rwcomponent.nominalthickness
        obj['CurrentThick'] =rwcomponent.currentthickness
        obj['WeldJointEffciency'] =rwcomponent.weldjointefficiency
        obj['YieldStrengthDesignTemp'] =rwmaterial.yieldstrength
        obj['TensileStrengthDesignTemp'] =rwmaterial.tensilestrength
        obj['ShapeFactor'] =comptype.shapefactor
        obj['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] =rwcomponent.minstructuralthickness
        obj['CR_Confidents_Level'] =rwcomponent.confidencecorrosionrate
        obj['AllowableStress']=rwcomponent.allowablestress
        obj['MinThickReq']=rwcomponent.minreqthickness
        obj['StructuralThickness'] = rwcomponent.structuralthickness
        obj['Pressure'] = rwmaterial.designpressure
        obj['Diametter'] = rwcomponent.nominaldiameter
        obj['MinimunRequiredThickness'] = rwcomponent.minreqthickness
        obj['shape'] = API_COMPONENT_TYPE_NAME = models.ApiComponentType.objects.get(
            apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        EXTERNAL_CORROSION = Detail_DM_CAL.Df_EXTERNAL_CORROSION(commisstiondate, obj['EXTERN_COAT_QUALITY'], obj['EXTERNAL_EVIRONMENT'],obj['CUI_PERCENT_2'],obj['CUI_PERCENT_3'],
                                obj['CUI_PERCENT_4'],obj['CUI_PERCENT_5'],obj['CUI_PERCENT_6'],obj['SUPPORT_COATING'], obj['INTERFACE_SOIL_WATER'], obj['EXTERNAL_EXPOSED_FLUID_MIST'],
                                obj['CARBON_ALLOY'],obj['MAX_OP_TEMP'],obj['MIN_OP_TEMP'],obj['EXTERNAL_INSP_EFF'],obj['EXTERNAL_INSP_NUM'],obj['NoINSP_EXTERNAL'],obj['APIComponentType'],
                                obj['NomalThick'],obj['CurrentThick'],obj['WeldJointEffciency'],obj['YieldStrengthDesignTemp'],obj['TensileStrengthDesignTemp'],obj['ShapeFactor'],obj['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],
                                obj['CR_Confidents_Level'],obj['AllowableStress'],obj['MinThickReq'],obj['StructuralThickness'],obj['Pressure'],obj['Diametter'],rwassessment.assessmentdate, rwassessment.commisstiondate,ComponentNumber)

        # obj['EXTERN_CLSCC_INSP_EFF'] = CLSCC.EXTERN_CLSCC_INSP_EFF
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        # obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        obj['NA_EXTERNAL']=EXTERNAL_CORROSION.NA_EXTERNAL()
        obj['NB_EXTERNAL']=EXTERNAL_CORROSION.NB_EXTERNAL()
        obj['NC_EXTERNAL']=EXTERNAL_CORROSION.NC_EXTERNAL()
        obj['ND_EXTERNAL']=EXTERNAL_CORROSION.ND_EXTERNAL()
        obj['flowStress']=EXTERNAL_CORROSION.FS_Thin()
        obj['strengthRatioIn'] = EXTERNAL_CORROSION.strengthRatioInter
        obj['strengthRatioMin'] = EXTERNAL_CORROSION.strengthRationMin
        obj['ageIns1']=EXTERNAL_CORROSION.AGE_CLSCC()
        obj['ageIns2']=EXTERNAL_CORROSION.AGE_CLSCC()+3
        obj['ageIns3']=EXTERNAL_CORROSION.AGE_CLSCC()+6
        obj['ageCoat1'] = EXTERNAL_CORROSION.AGE_CUI(0+EXTERNAL_CORROSION.GET_AGE())
        obj['ageCoat2'] = EXTERNAL_CORROSION.AGE_CUI(3+EXTERNAL_CORROSION.GET_AGE())
        obj['ageCoat3'] = EXTERNAL_CORROSION.AGE_CUI(6+EXTERNAL_CORROSION.GET_AGE())
        obj['age1'] = EXTERNAL_CORROSION.GET_AGE()
        obj['age2'] = EXTERNAL_CORROSION.GET_AGE() + 3
        obj['age3'] = EXTERNAL_CORROSION.GET_AGE() + 6
        obj['FIP'] = EXTERNAL_CORROSION.FIP()
        obj['FPS'] = EXTERNAL_CORROSION.FPS()
        obj['CR'] = EXTERNAL_CORROSION.CR()
        obj['priorProbabilities1'] = EXTERNAL_CORROSION.Pr_P1_EXTERNAL
        obj['priorProbabilities2'] = EXTERNAL_CORROSION.Pr_P2_EXTERNAL
        obj['priorProbabilities3'] = EXTERNAL_CORROSION.Pr_P3_EXTERNAL
        obj['posteriorProbabilities1'] = EXTERNAL_CORROSION.Po_P1_EXTERNAL
        obj['posteriorProbabilities2'] = EXTERNAL_CORROSION.Po_P2_EXTERNAL
        obj['posteriorProbabilities3'] = EXTERNAL_CORROSION.Po_P3_EXTERNAL
        obj['inspectioneffectivenessfactors1'] = EXTERNAL_CORROSION.I1_EXTERNAL()
        obj['inspectioneffectivenessfactors2'] = EXTERNAL_CORROSION.I2_EXTERNAL()
        obj['inspectioneffectivenessfactors3'] = EXTERNAL_CORROSION.I3_EXTERNAL()
        obj['WallLossFraction1'] = EXTERNAL_CORROSION.API_ART_EXTERNAL(0+EXTERNAL_CORROSION.GET_AGE())
        obj['WallLossFraction2'] = EXTERNAL_CORROSION.API_ART_EXTERNAL(3+EXTERNAL_CORROSION.GET_AGE())
        obj['WallLossFraction3'] = EXTERNAL_CORROSION.API_ART_EXTERNAL(6+EXTERNAL_CORROSION.GET_AGE())
        obj['beta11'] = EXTERNAL_CORROSION.B1_EXTERNAL(0+EXTERNAL_CORROSION.GET_AGE())
        obj['beta12'] = EXTERNAL_CORROSION.B1_EXTERNAL(3+EXTERNAL_CORROSION.GET_AGE())
        obj['beta13'] = EXTERNAL_CORROSION.B1_EXTERNAL(6+EXTERNAL_CORROSION.GET_AGE())
        obj['beta21'] = EXTERNAL_CORROSION.B2_EXTERNAL(0+EXTERNAL_CORROSION.GET_AGE())
        obj['beta22'] = EXTERNAL_CORROSION.B2_EXTERNAL(3+EXTERNAL_CORROSION.GET_AGE())
        obj['beta23'] = EXTERNAL_CORROSION.B2_EXTERNAL(6+EXTERNAL_CORROSION.GET_AGE())
        obj['beta31'] = EXTERNAL_CORROSION.B3_EXTERNAL(0+EXTERNAL_CORROSION.GET_AGE())
        obj['beta32'] = EXTERNAL_CORROSION.B3_EXTERNAL(3+EXTERNAL_CORROSION.GET_AGE())
        obj['beta33'] = EXTERNAL_CORROSION.B3_EXTERNAL(6+EXTERNAL_CORROSION.GET_AGE())
        # obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        # obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        # obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        obj['extf1']=EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(0)
        obj['extf2']=EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(3)
        obj['extf3']=EXTERNAL_CORROSION.DF_EXTERNAL_CORROSION_API(6)


    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showextf.html',
                  {'page':'extf','proposalID':proposalID,'a':obj, 'info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowCUIF(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        comptype = models.ComponentType.objects.get(componenttypeid=comp.componenttypeid_id)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['EXTERNAL_EVIRONMENT']=rwequipment.externalenvironment
        obj['CUI_PERCENT_2']=rwexcor.minus8toplus6
        obj['CUI_PERCENT_3']=rwexcor.plus6toplus32
        obj['CUI_PERCENT_4']=rwexcor.plus32toplus71
        obj['CUI_PERCENT_5']=rwexcor.plus71toplus107
        obj['CUI_PERCENT_6']=rwexcor.plus107toplus121
        obj['CUI_PERCENT_7']=rwexcor.plus121toplus135
        obj['CUI_PERCENT_8']=rwexcor.plus135toplus162
        obj['CUI_PERCENT_9']=rwexcor.plus162toplus176
        obj['INSULATION_TYPE']=rwcoat.externalinsulationtype
        obj['PIPING_COMPLEXITY']=rwcomponent.complexityprotrusion
        obj['INSULATION_CONDITION']=rwcoat.insulationcondition
        obj['SUPPORT_COATING']=bool(rwcoat.supportconfignotallowcoatingmaint)
        obj['INTERFACE_SOIL_WATER']=bool(rwequipment.interfacesoilwater)
        obj['EXTERNAL_EXPOSED_FLUID_MIST']=bool(rwequipment.materialexposedtoclext)
        obj['CARBON_ALLOY']=bool(rwmaterial.carbonlowalloy)
        obj['MAX_OP_TEMP'] = rwstream.maxoperatingtemperature
        obj['MIN_OP_TEMP'] =rwstream.minoperatingtemperature
        obj['CUI_INSP_EFF']='E'
        obj['CUI_INSP_NUM']=0
        obj['APIComponentType']=models.ApiComponentType.objects.get(
                                       apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        obj['NomalThick']=rwcomponent.nominalthickness
        obj['CurrentThick']=rwcomponent.currentthickness
        obj['CR_Confidents_Level']=rwcomponent.confidencecorrosionrate
        obj['MINIUM_STRUCTURAL_THICKNESS_GOVERS']=rwcomponent.minstructuralthickness
        # chua thay dung
        obj['ShapeFactor'] = comptype.shapefactor
        obj['Pressure'] = rwmaterial.designpressure
        obj['CR_Confidents_Level'] = rwcomponent.confidencecorrosionrate
        obj['MINIUM_STRUCTURAL_THICKNESS_GOVERS'] = rwcomponent.minstructuralthickness
        obj['WeldJointEffciency'] = rwcomponent.weldjointefficiency
        obj['YieldStrengthDesignTemp'] = rwmaterial.yieldstrength
        obj['TensileStrengthDesignTemp'] = rwmaterial.tensilestrength
        obj['AllowableStress'] = rwcomponent.allowablestress
        obj['MinThickReq'] = rwcomponent.minreqthickness
        obj['StructuralThickness'] = rwcomponent.structuralthickness
        obj['Pressure']=rwmaterial.designpressure
        obj['Diametter']=rwcomponent.nominaldiameter
        obj['ShapeFactor']=comptype.shapefactor
        obj['COMPONENT_INSTALL_DATE']=COMPONENT_INSTALL_DATE
        obj['EXTERN_COAT_QUALITY']=rwcoat.externalcoatingquality
        obj['shape'] =  models.ApiComponentType.objects.get(
            apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        if rwassessment.commisstiondate:
            CUIF = Detail_DM_CAL.Df_CUI(obj['EXTERNAL_EVIRONMENT'], obj['CUI_PERCENT_2'], obj['CUI_PERCENT_3'], obj['CUI_PERCENT_4'],obj['CUI_PERCENT_5'],obj['CUI_PERCENT_6'],
                                                obj['CUI_PERCENT_7'],obj['CUI_PERCENT_8'],obj['CUI_PERCENT_9'],obj['INSULATION_TYPE'],obj['PIPING_COMPLEXITY'],
                                             obj['INSULATION_CONDITION'],obj['SUPPORT_COATING'],obj['INTERFACE_SOIL_WATER'],obj['EXTERNAL_EXPOSED_FLUID_MIST']
                                            ,obj['CARBON_ALLOY'],obj['MAX_OP_TEMP'],obj['MIN_OP_TEMP'],obj['CUI_INSP_EFF'],obj['CUI_INSP_NUM'],obj['APIComponentType']
                                             , obj['NomalThick'], obj['CurrentThick'],obj['CR_Confidents_Level'],obj['MINIUM_STRUCTURAL_THICKNESS_GOVERS'],obj['WeldJointEffciency'],
                                            obj['YieldStrengthDesignTemp'],obj['TensileStrengthDesignTemp'],obj['AllowableStress'],obj['MinThickReq'], obj['StructuralThickness'],obj['Pressure'],obj['Diametter'], obj['ShapeFactor'],
                                        obj['COMPONENT_INSTALL_DATE'],obj['EXTERN_COAT_QUALITY'],rwassessment.assessmentdate, rwassessment.commisstiondate,ComponentNumber)
        else:
            CUIF = Detail_DM_CAL.Df_CUI(obj['EXTERNAL_EVIRONMENT'], obj['CUI_PERCENT_2'], obj['CUI_PERCENT_3'],
                                        obj['CUI_PERCENT_4'], obj['CUI_PERCENT_5'], obj['CUI_PERCENT_6'],
                                        obj['CUI_PERCENT_7'], obj['CUI_PERCENT_8'], obj['CUI_PERCENT_9'],
                                        obj['INSULATION_TYPE'], obj['PIPING_COMPLEXITY'],
                                        obj['INSULATION_CONDITION'], obj['SUPPORT_COATING'],
                                        obj['INTERFACE_SOIL_WATER'], obj['EXTERNAL_EXPOSED_FLUID_MIST']
                                        , obj['CARBON_ALLOY'], obj['MAX_OP_TEMP'], obj['MIN_OP_TEMP'],
                                        obj['CUI_INSP_EFF'], obj['CUI_INSP_NUM'], obj['APIComponentType']
                                        , obj['NomalThick'], obj['CurrentThick'], obj['CR_Confidents_Level'],
                                        obj['MINIUM_STRUCTURAL_THICKNESS_GOVERS'], obj['WeldJointEffciency'],
                                        obj['YieldStrengthDesignTemp'], obj['TensileStrengthDesignTemp'],
                                        obj['AllowableStress'], obj['MinThickReq'], obj['StructuralThickness'],
                                        obj['Pressure'], obj['Diametter'], obj['ShapeFactor'],
                                        obj['COMPONENT_INSTALL_DATE'], obj['EXTERN_COAT_QUALITY'],
                                        rwassessment.assessmentdate, COMPONENT_INSTALL_DATE, ComponentNumber)
        obj['NA_FERRITIC']=CUIF.NA_FERRITIC()
        obj['NB_FERRITIC']=CUIF.NB_FERRITIC()
        obj['NC_FERRITIC']=CUIF.NC_FERRITIC()
        obj['ND_FERRITIC']=CUIF.ND_FERRITIC()

        obj['posteriorProbabilities1'] = CUIF.Pr_P1_EXTERNAL()
        obj['posteriorProbabilities2'] = CUIF.Pr_P2_EXTERNAL()
        obj['posteriorProbabilities3'] = CUIF.Pr_P3_EXTERNAL()
        obj['priorProbabilities1'] = CUIF.Po_P1_FERRITIC()
        obj['priorProbabilities2'] = CUIF.Po_P2_FERRITIC()
        obj['priorProbabilities3'] = CUIF.Po_P3_FERRITIC()
        obj['inspectioneffectivenessfactors1'] = CUIF.I1_FERRITIC()
        obj['inspectioneffectivenessfactors2'] = CUIF.I2_FERRITIC()
        obj['inspectioneffectivenessfactors3'] = CUIF.I3_FERRITIC()
        obj['WallLossFraction1'] = CUIF.API_ART_CUI(0+CUIF.GET_AGE())
        obj['WallLossFraction2'] = CUIF.API_ART_CUI(3+CUIF.GET_AGE())
        obj['WallLossFraction3'] = CUIF.API_ART_CUI(6+CUIF.GET_AGE())
        obj['beta11'] = CUIF.B1_FERRITIC(0+CUIF.GET_AGE())
        obj['beta12'] = CUIF.B1_FERRITIC(3+CUIF.GET_AGE())
        obj['beta13'] = CUIF.B1_FERRITIC(6+CUIF.GET_AGE())
        obj['beta21'] = CUIF.B2_FERRITIC(0+CUIF.GET_AGE())
        obj['beta22'] = CUIF.B2_FERRITIC(3+CUIF.GET_AGE())
        obj['beta23'] = CUIF.B2_FERRITIC(6+CUIF.GET_AGE())
        obj['beta31'] = CUIF.B3_FERRITIC(0+CUIF.GET_AGE())
        obj['beta32'] = CUIF.B3_FERRITIC(3+CUIF.GET_AGE())
        obj['beta33'] = CUIF.B3_FERRITIC(6+CUIF.GET_AGE())
        obj['age1'] = CUIF.GET_AGE()
        obj['age2'] = CUIF.GET_AGE() + 3
        obj['age3'] = CUIF.GET_AGE() + 6

        obj['ageCoat'] = CUIF.AGE_CLSCC()

        obj['agetk1'] = CUIF.agetk(0+CUIF.GET_AGE())
        obj['agetk2'] = CUIF.agetk(3+CUIF.GET_AGE())
        obj['agetk3'] = CUIF.agetk(6+CUIF.GET_AGE())

        #

        obj['flowStress'] = CUIF.FS_Thin()
        obj['strengthRatioIn'] = CUIF.strengthRatioInter
        obj['strengthRatioMin'] = CUIF.strengthRationMin
        #
        obj['ageCoat1'] = CUIF.AGE_CUI(0+CUIF.GET_AGE())
        obj['ageCoat2'] = CUIF.AGE_CUI(3+CUIF.GET_AGE())
        obj['ageCoat3'] = CUIF.AGE_CUI(6+CUIF.GET_AGE())
        #
        # obj['FIP'] = CUIF.FIP()
        # obj['FPS'] = CUIF.FPS()
        obj['CR'] = CUIF.CR()
        obj['CRB'] = CUIF.API_CORROSION_RATE()
        obj['INS'] = CUIF.INS()
        obj['FIC'] = CUIF.FIC()
        obj['FCM'] = CUIF.FCM()
        obj['FPS'] = CUIF.FPS()
        obj['FIP'] = CUIF.FIP()
        obj['CUIF1'] = CUIF.DF_CUI_API(0)
        obj['CUIF2'] = CUIF.DF_CUI_API(3)
        obj['CUIF3'] = CUIF.DF_CUI_API(6)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showCUIF.html',
                  {'page':'CUIF','proposalID':proposalID,'a':obj, 'info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowHTHA(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        # obj['HTHA_PRESSURE'] =rwstream.h2spartialpressure * 0.006895
        obj['HTHA_PRESSURE'] =rwstream.h2spartialpressure
        obj['CRITICAL_TEMP'] =rwstream.criticalexposuretemperature
        obj['HTHADamageObserved'] =rwcomponent.hthadamage
        obj['MAX_OP_TEMP'] =rwstream.maxoperatingtemperature
        obj['MATERIAL_SUSCEP_HTHA'] =bool(rwmaterial.ishtha)
        obj['HTHA_MATERIAL'] =rwmaterial.hthamaterialcode
        # obj['Hydrogen'] =rwstream.hydrogen
        obj['Hydrogen'] = rwstream.h2spartialpressure
        if rwassessment.commisstiondate:
            HTHA = Detail_DM_CAL.DF_HTHA(obj['HTHA_PRESSURE'], obj['CRITICAL_TEMP'], obj['HTHADamageObserved'],
                                                         obj['MAX_OP_TEMP'], obj['MATERIAL_SUSCEP_HTHA'], obj['HTHA_MATERIAL'],
                                                        obj['Hydrogen'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            HTHA = Detail_DM_CAL.DF_HTHA(obj['HTHA_PRESSURE'], obj['CRITICAL_TEMP'], obj['HTHADamageObserved'],
                                         obj['MAX_OP_TEMP'], obj['MATERIAL_SUSCEP_HTHA'], obj['HTHA_MATERIAL'],
                                         obj['Hydrogen'],
                                         rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                         ComponentNumber)
        obj['deltaT']=HTHA.delta()
        # obj['EXTERN_CLSCC_INSP_EFF'] = CLSCC.EXTERN_CLSCC_INSP_EFF
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        obj['Susceptibility1']=HTHA.HTHA_SUSCEP(HTHA.GET_AGE())
        obj['Susceptibility2']=HTHA.HTHA_SUSCEP(HTHA.GET_AGE()+3)
        obj['Susceptibility3']=HTHA.HTHA_SUSCEP(HTHA.GET_AGE()+6)
        # obj['SVI']=CLSCC.SVI
        # obj['age1']=CLSCC.GET_AGE()
        # obj['age2']=CLSCC.GET_AGE()+3
        # obj['age3']=CLSCC.GET_AGE()+6
        # obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        # obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        # obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        obj['HTHA1']=HTHA.DF_HTHA_API(0)
        obj['HTHA2']=HTHA.DF_HTHA_API(3)
        obj['HTHA3']=HTHA.DF_HTHA_API(6)


    except Exception as e:
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showHTHA.html',
                  {'page':'HTHA','proposalID':proposalID,'a':obj, 'info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowBRITTLE(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['PRESSSURE_CONTROL'] = bool(rwequipment.pressurisationcontrolled)
        obj['MIN_TEMP_PRESSURE']=rwequipment.minreqtemperaturepressurisation
        obj['CRITICAL_TEMP']=rwstream.criticalexposuretemperature
        obj['PWHT']=bool(rwequipment.pwht)
        obj['REF_TEMP']=rwmaterial.referencetemperature
        obj['BRITTLE_THICK']=rwcomponent.brittlefracturethickness
        obj['FABRICATED_STEEL']=bool(rwcomponent.fabricatedsteel)
        obj['EQUIPMENT_SATISFIED']=bool(rwcomponent.equipmentsatisfied)
        obj['NOMINAL_OPERATING_CONDITIONS']=bool(rwcomponent.nominaloperatingconditions)
        obj['CET_THE_MAWP']=bool(rwcomponent.cetgreaterorequal)
        obj['CYCLIC_SERVICE']=bool(rwcomponent.cyclicservice)
        obj['PresenceCyanides']=bool(rwstream.cyanide)
        obj['EQUIPMENT_CIRCUIT_SHOCK']=bool(rwcomponent.equipmentcircuitshock)
        obj['NomalThick']=rwcomponent.nominalthickness
        if obj['NomalThick']<=12.7:
            obj['equal_127']=True
        else: obj['equal_127']=False
        if obj['NomalThick']<=50.8:
            obj['equal_508']=True
        else: obj['equal_508']=False
        obj['CARBON_ALLOY']=bool(rwmaterial.carbonlowalloy)
        obj['MIN_DESIGN_TEMP']=rwmaterial.mindesigntemperature
        obj['MAX_OP_TEMP']=rwstream.maxoperatingtemperature
        if rwassessment.commisstiondate:
            BRITTLE = Detail_DM_CAL.DF_BRITTLE(obj['PRESSSURE_CONTROL'], obj['MIN_TEMP_PRESSURE'], obj['CRITICAL_TEMP'],
                                                         obj['PWHT'], obj['REF_TEMP'], obj['BRITTLE_THICK'],
                                                        obj['FABRICATED_STEEL'],obj['EQUIPMENT_SATISFIED'],obj['NOMINAL_OPERATING_CONDITIONS'],
                                               obj['CET_THE_MAWP'],obj['CYCLIC_SERVICE'],obj['EQUIPMENT_CIRCUIT_SHOCK'],obj['NomalThick'],obj['CARBON_ALLOY'],
                                               obj['MIN_DESIGN_TEMP'],obj['MAX_OP_TEMP'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            BRITTLE = Detail_DM_CAL.DF_BRITTLE(obj['PRESSSURE_CONTROL'], obj['MIN_TEMP_PRESSURE'], obj['CRITICAL_TEMP'],
                                               obj['PWHT'], obj['REF_TEMP'], obj['BRITTLE_THICK'],
                                               obj['FABRICATED_STEEL'], obj['EQUIPMENT_SATISFIED'],
                                               obj['NOMINAL_OPERATING_CONDITIONS'],
                                               obj['CET_THE_MAWP'], obj['CYCLIC_SERVICE'],
                                               obj['EQUIPMENT_CIRCUIT_SHOCK'], obj['NomalThick'], obj['CARBON_ALLOY'],
                                               obj['MIN_DESIGN_TEMP'], obj['MAX_OP_TEMP'],
                                               rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                               ComponentNumber)
        # obj['EXTERN_CLSCC_INSP_EFF'] = CLSCC.EXTERN_CLSCC_INSP_EFF
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        # obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        # obj['SVI']=CLSCC.SVI
        # obj['age1']=CLSCC.GET_AGE()
        # obj['age2']=CLSCC.GET_AGE()+3
        # obj['age3']=CLSCC.GET_AGE()+6
        # moi chi la thiet bi tank
        obj['CET_THE_MAWP'] = bool(rwcomponent.cetgreaterorequal)
        obj['FABRICATED_STEEL']= bool(rwcomponent.fabricatedsteel)
        obj['CYCLIC_SERVICE'] = bool(rwcomponent.cyclicservice)
        obj['EQUIPMENT_CIRCUIT_SHOCK'] = bool(rwcomponent.equipmentcircuitshock)
        obj['EQUIPMENT_SATISFIED'] = bool(rwcomponent.equipmentsatisfied)
        obj['NOMINAL_OPERATING_CONDITIONS'] = bool(rwcomponent.nominaloperatingconditions)
        obj['YeildStrengthDesignTemp']=rwmaterial.yieldstrength
        obj['Tmin']=BRITTLE.Tmin()
        obj['FSE']=BRITTLE.FSE()
        obj['Tmin_Tref']=BRITTLE.Tmin_Tref()
        obj['base1']=BRITTLE.DFB_BRITTLE_API(0)
        obj['base2']=BRITTLE.DFB_BRITTLE_API(3)
        obj['base3']=BRITTLE.DFB_BRITTLE_API(6)
        obj['BRITTLE1']=BRITTLE.DF_BRITTLE(0)
        obj['BRITTLE2']=BRITTLE.DF_BRITTLE_API(3)
        obj['BRITTLE3']=BRITTLE.DF_BRITTLE_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/ShowBRITTLE.html',
                  {'page':'BRITTLE','proposalID':proposalID,'a':obj, 'info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowTEMP_EMBRITTLE(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['TEMPER_SUSCEP'] =bool(rwmaterial.temper)
        obj['CARBON_ALLOY'] =bool(rwmaterial.carbonlowalloy)
        obj['MAX_OP_TEMP'] =rwstream.maxoperatingtemperature
        obj['MIN_OP_TEMP'] =rwstream.minoperatingtemperature
        obj['PRESSSURE_CONTROL'] =bool(rwequipment.pressurisationcontrolled)
        obj['MIN_TEMP_PRESSURE'] =rwequipment.minreqtemperaturepressurisation
        obj['REF_TEMP'] =rwmaterial.referencetemperature
        obj['DELTA_FATT'] =rwcomponent.deltafatt
        obj['CRITICAL_TEMP'] =rwstream.criticalexposuretemperature
        obj['PWHT'] = bool(rwequipment.pwht)
        obj['BRITTLE_THICK'] =rwcomponent.brittlefracturethickness

        obj['MIN_DESIGN_TEMP'] =rwmaterial.mindesigntemperature
        if rwassessment.commisstiondate:
            TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(obj['TEMPER_SUSCEP'], obj['CARBON_ALLOY'], obj['MAX_OP_TEMP'],obj['MIN_OP_TEMP'],
                                                         obj['PRESSSURE_CONTROL'], obj['MIN_TEMP_PRESSURE'], obj['REF_TEMP'],
                                                        obj['DELTA_FATT'],obj['CRITICAL_TEMP'],obj['PWHT'], obj['BRITTLE_THICK'],obj['MIN_DESIGN_TEMP'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            TEMP_EMBRITTLE = Detail_DM_CAL.Df_TEMP_EMBRITTLE(obj['TEMPER_SUSCEP'], obj['CARBON_ALLOY'],
                                                             obj['MAX_OP_TEMP'], obj['MIN_OP_TEMP'],
                                                             obj['PRESSSURE_CONTROL'], obj['MIN_TEMP_PRESSURE'],
                                                             obj['REF_TEMP'],
                                                             obj['DELTA_FATT'], obj['CRITICAL_TEMP'], obj['PWHT'],
                                                             obj['BRITTLE_THICK'], obj['MIN_DESIGN_TEMP'],
                                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                                             ComponentNumber)
        obj['REF_TEMPaddDELTA_FATT'] = TEMP_EMBRITTLE.REF_TEMPaddDELTA_FATT()
        obj['TEMP_EMBRITTLE'] = TEMP_EMBRITTLE.TEMP_EMBRITTLE()
        obj['TMPT'] = TEMP_EMBRITTLE.TMPT()
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        # obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        # obj['SVI']=CLSCC.SVI
        # obj['age1']=CLSCC.GET_AGE()
        # obj['age2']=CLSCC.GET_AGE()+3
        # obj['age3']=CLSCC.GET_AGE()+6
        # obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        # obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        # obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        obj['TEMP_EMBRITTLE1']=TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(0)
        obj['TEMP_EMBRITTLE2']=TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(3)
        obj['TEMP_EMBRITTLE3']=TEMP_EMBRITTLE.DF_TEMP_EMBRITTLE_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/showTempEmbrittle.html',
                  {'page':'tempEmbrittle','proposalID':proposalID,'a':obj, 'info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def Show885(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['CHROMIUM_12'] =bool(rwmaterial.chromemoreequal12)
        obj['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
        obj['MAX_OP_TEMP'] =rwstream.maxoperatingtemperature

        obj['PRESSSURE_CONTROL'] =bool(rwequipment.pressurisationcontrolled)
        obj['MIN_TEMP_PRESSURE'] =rwequipment.minreqtemperaturepressurisation
        obj['REF_TEMP'] =rwmaterial.referencetemperature
        obj['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
        obj['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
        if rwassessment.commisstiondate:
            df885 = Detail_DM_CAL.Df_885(obj['CHROMIUM_12'], obj['MIN_OP_TEMP'], obj['MAX_OP_TEMP'],
                                                         obj['PRESSSURE_CONTROL'],obj['MIN_TEMP_PRESSURE'], obj['REF_TEMP'],
                                                        obj['CRITICAL_TEMP'],obj['MIN_DESIGN_TEMP'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            df885 = Detail_DM_CAL.Df_885(obj['CHROMIUM_12'], obj['MIN_OP_TEMP'], obj['MAX_OP_TEMP'],
                                         obj['PRESSSURE_CONTROL'], obj['MIN_TEMP_PRESSURE'], obj['REF_TEMP'],
                                         obj['CRITICAL_TEMP'], obj['MIN_DESIGN_TEMP'],
                                         rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                         ComponentNumber)
        # obj['EXTERN_CLSCC_INSP_EFF'] = CLSCC.EXTERN_CLSCC_INSP_EFF
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        # obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        obj['Tmin']=df885.Tmin()
        obj['Tmin_Tref']=df885.Tmin_Tref()
        # obj['age1']=CLSCC.GET_AGE()
        # obj['age2']=CLSCC.GET_AGE()+3
        # obj['age3']=CLSCC.GET_AGE()+6
        # obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        # obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        # obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        obj['f885f1']=df885.DF_885_API(0)
        obj['f885f2']=df885.DF_885_API(3)
        obj['f885f3']=df885.DF_885_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/show885F.html',
                  {'page':'governingExternal','proposalID':proposalID,'a':obj, 'info':request.session,
                   'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowSIGMA(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['MIN_TEM'] = rwstream.minoperatingtemperature
        obj['AUSTENITIC_STEEL'] =bool(rwmaterial.austenitic)
        obj['MIN_OP_TEMP'] = rwstream.minoperatingtemperature
        obj['MAX_OP_TEMP'] =rwstream.maxoperatingtemperature

        obj['PRESSSURE_CONTROL'] =bool(rwequipment.pressurisationcontrolled)
        obj['MIN_TEMP_PRESSURE'] =rwequipment.minreqtemperaturepressurisation

        obj['CRITICAL_TEMP'] = rwstream.criticalexposuretemperature
        obj['PERCENT_SIGMA'] = rwmaterial.sigmaphase
        # chua thay su dung MIN_DESIGN_TEMP
        obj['MIN_DESIGN_TEMP'] = rwmaterial.mindesigntemperature
        if rwassessment.commisstiondate:
            dfSigma = Detail_DM_CAL.Df_SIGMA(obj['MIN_TEM'],obj['AUSTENITIC_STEEL'], obj['MIN_OP_TEMP'], obj['MAX_OP_TEMP'],
                                                         obj['PRESSSURE_CONTROL'],obj['MIN_TEMP_PRESSURE'],obj['CRITICAL_TEMP'],obj['PERCENT_SIGMA'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            dfSigma = Detail_DM_CAL.Df_SIGMA(obj['MIN_TEM'], obj['AUSTENITIC_STEEL'], obj['MIN_OP_TEMP'],
                                             obj['MAX_OP_TEMP'],
                                             obj['PRESSSURE_CONTROL'], obj['MIN_TEMP_PRESSURE'], obj['CRITICAL_TEMP'],
                                             obj['PERCENT_SIGMA'],
                                             rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                             ComponentNumber)
        obj['Tmin'] = dfSigma.API_TEMP_SIGMA(obj['MIN_TEM'])
        obj['sigmaContent'] = dfSigma.sigmaContent()
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        # obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        # obj['SVI']=CLSCC.SVI
        # obj['age1']=CLSCC.GET_AGE()
        # obj['age2']=CLSCC.GET_AGE()+3
        # obj['age3']=CLSCC.GET_AGE()+6
        # obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        # obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        # obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        obj['SIGMA1']=dfSigma.DF_SIGMA_API(0)
        obj['SIGMA2']=dfSigma.DF_SIGMA_API(3)
        obj['SIGMA3']=dfSigma.DF_SIGMA_API(6)


    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/sigmaPhase.html',
                  {'page':'governingExternal','proposalID':proposalID,'a':obj, 'info':request.session,
                   'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def ShowPIPE(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        obj = {}
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        COMPONENT_INSTALL_DATE = models.EquipmentMaster.objects.get(
            equipmentid=comp.equipmentid_id).commissiondate
        ComponentNumber = str(comp.componentnumber)
        EquipmentName = models.EquipmentMaster.objects.get(equipmentid=comp.equipmentid_id).equipmentnumber
        obj['ComponentNumber'] = ComponentNumber
        obj['EquipmentNumber'] = EquipmentName
        obj['Assessment'] = rwassessment.proposalname
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        obj['assessmentDate'] = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        obj['CommissionDate'] = COMPONENT_INSTALL_DATE.strftime('%Y-%m-%d')
        obj['PREVIOUS_FAIL'] =rwcomponent.previousfailures
        obj['AMOUNT_SHAKING'] =rwcomponent.shakingamount
        obj['TIME_SHAKING'] =rwcomponent.shakingtime
        obj['CYLIC_LOAD'] =rwcomponent.cyclicloadingwitin15_25m
        obj['APIComponentType'] =models.ApiComponentType.objects.get(
                                       apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename
        obj['CORRECT_ACTION'] =rwcomponent.correctiveaction
        obj['NUM_PIPE'] =rwcomponent.numberpipefittings
        obj['PIPE_CONDITION'] =rwcomponent.pipecondition
        obj['JOINT_TYPE'] =rwcomponent.branchjointtype
        obj['BRANCH_DIAMETER'] =rwcomponent.branchdiameter
        if rwassessment.commisstiondate:
            df885 = Detail_DM_CAL.Df_885(obj['PREVIOUS_FAIL'],obj['AMOUNT_SHAKING'], obj['TIME_SHAKING'], obj['CYLIC_LOAD'],
                                                         obj['APIComponentType'],obj['CORRECT_ACTION'],obj['NUM_PIPE'],obj['PIPE_CONDITION'],obj['JOINT_TYPE'],obj['BRANCH_DIAMETER'],
                                                         rwassessment.assessmentdate, rwassessment.commisstiondate,
                                                         ComponentNumber)
        else:
            df885 = Detail_DM_CAL.Df_885(obj['PREVIOUS_FAIL'], obj['AMOUNT_SHAKING'], obj['TIME_SHAKING'],
                                         obj['CYLIC_LOAD'],
                                         obj['APIComponentType'], obj['CORRECT_ACTION'], obj['NUM_PIPE'],
                                         obj['PIPE_CONDITION'], obj['JOINT_TYPE'], obj['BRANCH_DIAMETER'],
                                         rwassessment.assessmentdate, COMPONENT_INSTALL_DATE,
                                         ComponentNumber)
        # obj['EXTERN_CLSCC_INSP_EFF'] = CLSCC.EXTERN_CLSCC_INSP_EFF
        # obj['EXTERN_CLSCC_INSP_NUM'] = CLSCC.EXTERN_CLSCC_INSP_NUM
        # obj['Susceptibility']=CLSCC.CLSCC_SUSCEP()
        # obj['SVI']=CLSCC.SVI
        # obj['age1']=CLSCC.GET_AGE()
        # obj['age2']=CLSCC.GET_AGE()+3
        # obj['age3']=CLSCC.GET_AGE()+6
        # obj['base1']=CLSCC.DBF_EXTERN_CLSCC_API(0)
        # obj['base2']=CLSCC.DBF_EXTERN_CLSCC_API(3)
        # obj['base3']=CLSCC.DBF_EXTERN_CLSCC_API(6)
        # obj['EXTERN_CLSCC1']=CLSCC.DF_EXTERN_CLSCC_API(0)
        # obj['EXTERN_CLSCC2']=CLSCC.DF_EXTERN_CLSCC_API(3)
        # obj['EXTERN_CLSCC3']=CLSCC.DF_EXTERN_CLSCC_API(6)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/risk_summary/extCLSCC.html',{'page':'governingExternal','proposalID':proposalID,'a':obj, 'info':request.session,
                                                                    'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})

    return render(request, 'FacilityUI/risk_summary/showGoverning.html',
                  {'page':'governing','info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})

def ShowGoverning(request,proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'FacilityUI/risk_summary/showGoverning.html',
                  {'page':'governing','info':request.session,'noti':noti,'countnoti':countnoti,'count':count,'notiVerification':notiVerification,'siteid':siteid})
def CalculateFunctionManager(request,siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()

    equip = models.EquipmentMaster.objects.filter(siteid_id=siteID)
    num_site = 1
    num_faci = models.Facility.objects.filter(siteid_id=siteID).count()
    num_eq = equip.count()
    num_com = 0
    for a in equip:
        com = models.ComponentMaster.objects.filter(equipmentid_id=a.equipmentid).count()
        num_com = num_com + com

    # tank = [8,9,12,13,14,15]
    tank = [12,13,14,15]
    RecommendProposalTank = []
    RecommendProposalNormal = []
    APINormal = []
    APITank = []
    rwComponent = models.ComponentMaster.objects.all()
    rwdamAll = models.RwDamageMechanism.objects.all()
    rwassessment = models.RwAssessment.objects.all()
    datarw = []  # kiem tra id proposal co ton tai trong bang RwDamageMechanism
    veri = []
    vericontent=[]
    verification=models.Verification.objects.all()
    verificontent=models.VeriContent.objects.all()
    for a in verification:
        obj = {}
        obj['id']=a.id
        obj['proposal']=a.proposal
        obj['date']=a.date
        obj['is_active']=a.Is_active
        obj['manager']=a.manager
        obj['facility']=a.facility
        obj['component']=a.com
        obj['equipment']=a.eq
        obj['link']=a.link
        veri.append(obj)
    for a in verificontent:
        obj ={}
        obj['id']=a.id
        obj['veriID']=a.Verification_id
        obj['content']=a.content
        vericontent.append(obj)
    for a in rwdamAll:
        array = a.id_dm_id
        datarw.append(array)
    for a in rwComponent:
        data = []
        datamax =[]
        if a.componenttypeid_id in tank:
            rwAsessmentT = models.RwAssessment.objects.filter(componentid_id = a.componentid)
            if rwAsessmentT.count() ==1:
                R1 = models.RwAssessment.objects.get(componentid_id = a.componentid)
                RecommendProposalTank.append(R1.id)
            elif rwAsessmentT.count() > 1 :
                for b in rwAsessmentT:
                    if b.assessmentdate:
                        obj={}
                        obj['assessmentdate']= b.assessmentdate.timestamp()
                        obj['IDProposal'] = b.id
                        data.append(obj)
                        datamax.append(b.assessmentdate.timestamp())
                M = max(datamax)
                i = datamax.index(M)
                RecommendProposalTank.append(data[i]['IDProposal'])
        else:
            rwAsessmentN = models.RwAssessment.objects.filter(componentid_id=a.componentid)
            if rwAsessmentN.count() == 1:
                R1 = models.RwAssessment.objects.get(componentid_id=a.componentid)
                RecommendProposalNormal.append(R1.id)
            elif rwAsessmentN.count() > 1:
                for b in rwAsessmentN:
                    if b.assessmentdate:
                        obj = {}
                        obj['assessmentdate'] = b.assessmentdate.timestamp()
                        obj['IDProposal'] = b.id
                        data.append(obj)
                        datamax.append(b.assessmentdate.timestamp())
                M = max(datamax)
                i = datamax.index(M)
                RecommendProposalNormal.append(data[i]['IDProposal'])
    for nor in RecommendProposalNormal:
        rwasessmentN = models.RwAssessment.objects.get(id=nor)
        equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
        component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
        equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
        comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
        faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
        site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
        df = models.RwFullPof.objects.filter(id=nor)
        ca = models.RwFullFcof.objects.filter(id=nor)
        if df.count() > 0 and ca.count() > 0:
            df = models.RwFullPof.objects.get(id=nor)
            ca = models.RwFullFcof.objects.get(id=nor)
            obj = {}
            obj['ID'] = nor
            obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
            obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
            obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
            obj['ComponentNumber'] = component.componentnumber
            obj['EquipmentNumber'] = equipmaster.equipmentnumber
            obj['Facility'] = faci.facilityname
            obj['Site'] = site.sitename
            obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
            obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
            obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
            obj['RLI'] = df.rli
            obj['AssessmentName'] = rwasessmentN.proposalname
            obj['AssessmentDate'] = rwasessmentN.assessmentdate
            obj['CommissionDate'] = equipmaster.commissiondate
            obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
            obj['EquipmentType'] = equiptype.equipmenttypename
            obj['ComponentType'] = comptype.componenttypename
            if (nor in datarw):
                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                obj['InspectionDueDate'] = rwdam.inspduedate
            else:
                obj['InspectionDueDate'] = "None"
            APINormal.append(obj)
    for nor in RecommendProposalTank:
        rwasessmentN = models.RwAssessment.objects.get(id=nor)
        equipmaster = models.EquipmentMaster.objects.get(equipmentid=rwasessmentN.equipmentid_id)
        component = models.ComponentMaster.objects.get(componentid=rwasessmentN.componentid_id)
        equiptype = models.EquipmentType.objects.get(equipmenttypeid=equipmaster.equipmenttypeid_id)
        comptype = models.ComponentType.objects.get(componenttypeid=component.componenttypeid_id)
        faci = models.Facility.objects.get(facilityid=equipmaster.facilityid_id)
        site = models.Sites.objects.get(siteid=equipmaster.siteid_id)
        df = models.RwFullPof.objects.filter(id=nor)
        ca = models.RwFullFcof.objects.filter(id=nor)
        if df.count() > 0 and ca.count() > 0:
            df = models.RwFullPof.objects.get(id=nor)
            ca = models.RwFullFcof.objects.get(id=nor)
            obj = {}
            obj['ID'] = nor
            obj['API1'] = location.locatData(df.totaldfap1, ca.fcofvalue)
            obj['API2'] = location.locatData(df.totaldfap2, ca.fcofvalue)
            obj['API3'] = location.locatData(df.totaldfap3, ca.fcofvalue)
            obj['ComponentNumber'] = component.componentnumber
            obj['EquipmentNumber'] = equipmaster.equipmentnumber
            obj['Facility'] = faci.facilityname
            obj['Site'] = site.sitename
            obj['POFAPI1'] = df.pofap1category + ca.fcofcategory
            obj['POFAPI2'] = df.pofap2category + ca.fcofcategory
            obj['POFAPI3'] = df.pofap3category + ca.fcofcategory
            obj['RLI'] = df.rli
            obj['AssessmentName'] = rwasessmentN.proposalname
            obj['AssessmentDate'] = rwasessmentN.assessmentdate
            obj['CommissionDate'] = equipmaster.commissiondate
            obj['RiskAnalysisPeriod'] = rwasessmentN.riskanalysisperiod
            obj['EquipmentType'] = equiptype.equipmenttypename
            obj['ComponentType'] = comptype.componenttypename
            if (nor in datarw):
                rwdam = models.RwDamageMechanism.objects.filter(id_dm_id=nor)[0]
                obj['InspectionDueDate'] = rwdam.inspduedate
            else:
                obj['InspectionDueDate'] = "None"
            APITank.append(obj)
    try:
        if '_detail' in request.POST:
            for a in rwassessment:
                if request.POST.get('%d' % a.id):
                    return redirect('damgeFactorMana', proposalID=a.id)
        if '_refresh' in request.POST:
            return redirect('calculateFunctionManager', siteID=siteID)
    except Exception as e:
        print(e)
    return render(request, 'ManagerUI/Calculate_Function_Manager.html', {
        'page': 'calculateFunctionManager', 'siteID': siteID, 'APINormal': APINormal, 'APITank': APITank,
        'veri': veri, 'vericontent': vericontent, 'info': request.session, 'noti': noti, 'countnoti': countnoti,
        'count': count, 'num_site': num_site, 'num_faci': num_faci, 'num_eq': num_eq, 'num_com': num_com})
def Help_UseSoftware(request):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    countveri = 0
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    return render(request, 'help/helpusesoft.html',
                  {'page': 'userManual', 'info': request.session, 'count': count, 'noti': noti, 'countnoti': countnoti,'notiVerification':notiVerification,'siteid':siteid})

def ViewExeclProposal(request, index, type):
    try:
        componentID=models.RwAssessment.objects.get(id=index).componentid
        getP_risk=export_data.getP_risk(index)
        getP_insp=export_data.getP_insp_show(index)
        getP_name=export_data.getP_name(index)
        getP_insp_work_plan = export_data.get_inspection_work_planning(index)
        if getP_risk['init_thinning']==0 or getP_risk['init_thinning'] is None:
            getP_risk['init_thinningcv']='N/A'
        elif getP_risk['init_thinning'] <=2:
            getP_risk['init_thinningcv']='A'
        elif getP_risk['init_thinning'] <=20:
            getP_risk['init_thinningcv']='B'
        elif getP_risk['init_thinning'] <=100:
            getP_risk['init_thinningcv']='C'
        elif getP_risk['init_thinning'] <1000:
            getP_risk['init_thinningcv']='D'
        else:
            getP_risk['init_thinningcv']='E'

        if getP_risk['init_cracking']==0 or getP_risk['init_cracking'] is None:
            getP_risk['init_crackingcvv']='N/A'
        elif getP_risk['init_cracking'] <=2:
            getP_risk['init_crackingcv']='A'
        elif getP_risk['init_cracking'] <=20:
            getP_risk['init_crackingcv']='B'
        elif getP_risk['init_cracking'] <=100:
            getP_risk['init_crackingcv']='C'
        elif getP_risk['init_cracking'] <1000:
            getP_risk['init_crackingcv']='D'
        else:
            getP_risk['init_crackingcv']='E'

        if getP_risk['init_other']==0 or getP_risk['init_other'] is None:
            getP_risk['init_othercv']='N/A'
        elif getP_risk['init_other'] <=2:
            getP_risk['init_othercv']='A'
        elif getP_risk['init_other'] <=20:
            getP_risk['init_othercv']='B'
        elif getP_risk['init_other'] <=100:
            getP_risk['init_othercv']='C'
        elif getP_risk['init_other'] <1000:
            getP_risk['init_othercv']='D'
        else:
            getP_risk['init_othercv']='E'

        if getP_risk['init_pof']==0 or getP_risk['init_pof'] is None:
            getP_risk['init_pofcv']='N/A'
        elif getP_risk['init_pof'] <=2:
            getP_risk['init_pofcv']='A'
        elif getP_risk['init_pof'] <=20:
            getP_risk['init_pofcv']='B'
        elif getP_risk['init_pof'] <=100:
            getP_risk['init_pofcv']='C'
        elif getP_risk['init_pof'] <1000:
            getP_risk['init_pofcv']='D'
        else:
            getP_risk['init_pofcv']='E'

        if getP_risk['ext_thinning']==0 or getP_risk['ext_thinning'] is None:
            getP_risk['ext_thinningcv']='N/A'
        elif getP_risk['ext_thinning'] <=2:
            getP_risk['ext_thinningcv']='A'
        elif getP_risk['ext_thinning'] <=20:
            getP_risk['ext_thinningcv']='B'
        elif getP_risk['ext_thinning'] <=100:
            getP_risk['ext_thinningcv']='C'
        elif getP_risk['ext_thinning'] <1000:
            getP_risk['ext_thinningcv']='D'
        else:
            getP_risk['ext_thinningcv']='E'

        if getP_risk['pof_catalog']==0 or getP_risk['pof_catalog'] is None:
            getP_risk['pof_catalogcv']='N/A'
        elif getP_risk['pof_catalog'] <=2:
            getP_risk['pof_catalogcv']='A'
        elif getP_risk['pof_catalog'] <=20:
            getP_risk['pof_catalogcv']='B'
        elif getP_risk['pof_catalog'] <=100:
            getP_risk['pof_catalogcv']='C'
        elif getP_risk['pof_catalog'] <1000:
            getP_risk['pof_catalogcv']='D'
        else:
            getP_risk['pof_catalogcv']='E'

        if getP_risk['flamable']==0 or getP_risk['flamable'] is None:
            getP_risk['flamablecv']=0
        elif getP_risk['flamable'] <=10000:
            getP_risk['flamablecv']=1
        elif getP_risk['flamable'] <=100000:
            getP_risk['flamablecv']=2
        elif getP_risk['flamable'] <=1000000:
            getP_risk['flamablecv']=3
        elif getP_risk['flamable'] <10000000:
            getP_risk['flamablecv']=4
        else:
            getP_risk['flamablecv']=5

        if getP_risk['inj']==0 or getP_risk['inj'] is None:
            getP_risk['injcv']=0
        elif getP_risk['inj'] <=10000:
            getP_risk['injcv']=1
        elif getP_risk['inj'] <=100000:
            getP_risk['injcv']=2
        elif getP_risk['inj'] <=1000000:
            getP_risk['injcv']=3
        elif getP_risk['inj'] <10000000:
            getP_risk['injcv']=4
        else:
            getP_risk['injcv']=5

        if getP_risk['business']==0 or getP_risk['business'] is None:
            getP_risk['businesscv']=0
        elif getP_risk['business'] <=10000:
            getP_risk['businesscv']=1
        elif getP_risk['business'] <=100000:
            getP_risk['businesscv']=2
        elif getP_risk['business'] <=1000000:
            getP_risk['businesscv']=3
        elif getP_risk['business'] <10000000:
            getP_risk['businesscv']=4
        else:
            getP_risk['businesscv']=5

        if getP_risk['env']==0 or getP_risk['env'] is None:
            getP_risk['envcv']=0
        elif getP_risk['env'] <=10000:
            getP_risk['envcv']=1
        elif getP_risk['env'] <=100000:
            getP_risk['envcv']=2
        elif getP_risk['env'] <=1000000:
            getP_risk['envcv']=3
        elif getP_risk['env'] <10000000:
            getP_risk['envcv']=4
        else:
            getP_risk['envcv']=5

        if getP_risk['consequence']==0 or getP_risk['consequence'] is None:
            getP_risk['consequencecv']=0
        elif getP_risk['consequence'] <=10000:
            getP_risk['consequencecv']=1
        elif getP_risk['consequence'] <=100000:
            getP_risk['consequencecv']=2
        elif getP_risk['consequence'] <=1000000:
            getP_risk['consequencecv']=3
        elif getP_risk['consequence'] <10000000:
            getP_risk['consequencecv']=4
        else:
            getP_risk['consequencecv']=5

        if getP_risk['consequence'] == 0 or getP_risk['pof_catalog'] == 'N/A':
            getP_risk['riskcv']= 'N/A'
        elif getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog'] in ('A', 'B', 'C'):
            getP_risk['riskcv'] = "Low"
        elif (getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog'] == 'D') or (getP_risk['consequence'] in (3, 4) and getP_risk['pof_catalog'] in ('A', 'B')) or (getP_risk['consequence'] == 3 and getP_risk['pof_catalog'] == 'C'):
            getP_risk['riskcv'] = "Medium"
        elif (getP_risk['consequence'] == 5 and getP_risk['pof_catalog'] in ('C', 'D', 'E')) or (getP_risk['consequence'] == 4 and getP_risk['pof_catalog'] == 'E'):
            getP_risk['riskcv'] = "High"
        else:
            getP_risk['riskcv'] = "Medium High"

        if getP_risk['consequence'] == 0 or getP_risk['pof_catalog2'] == 'N/A':
            getP_risk['risk_futurecv'] = 'N/A'
        elif getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog2'] in ('A', 'B', 'C'):
            getP_risk['risk_futurecv'] = "Low"
        elif (getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog2'] == 'D') or (getP_risk['consequence'] in (3, 4) and getP_risk['pof_catalog2'] in ('A', 'B')) or (getP_risk['consequence'] == 3 and getP_risk['pof_catalog2'] == 'C'):
            getP_risk['risk_futurecv'] = "Medium"
        elif (getP_risk['consequence'] == 5 and getP_risk['pof_catalog2'] in ('C', 'D', 'E')) or (getP_risk['consequence'] == 4 and getP_risk['pof_catalog2'] == 'E'):
            getP_risk['risk_futurecv'] = "High"
        else:
            getP_risk['risk_futurecv'] = "Medium High"
        return render(request, 'FacilityUI/proposal/proposal_excel.html' , {'page':'damageFactor', 'obj': getP_risk,'obj1':getP_insp,'obj2':getP_insp_work_plan ,'id':index, 'componentID':componentID} )
    except Exception as e:
        print(e)
        return render(request, 'FacilityUI/proposal/NoExcel.html')
def ExcelEmpty(request):
    try:
        count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                              Q(Is_see=0)).count()
    except:
        Http404
    return render(request, 'FacilityUI/proposal/NoExcel.html', {'count': count})
def DatabaseReport(request):
    return render(request,  'FacilityUI/showdatabase/database_report.html',{'page':'databasereport'})
def RBITracking(request):
    return render(request,  'FacilityUI/showdatabase/RBITracking.html',{'page':'rbitracking'})
def TestSample(request,siteID):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()

    try:
        siteTestSample = models.Facility.objects.filter(siteid=4)
        risk = []
        error = {}
        result = {}
        rwassessment = models.RwAssessment.objects.all()
        if '_detail' in request.POST:
            for a in rwassessment:
                if request.POST.get('%d' % a.id):
                    return redirect('inputdataTestSample',siteID=siteID, proposalID=a.id)
        elif '_risk' in request.POST:
            for a in rwassessment:
                if request.POST.get('%d' % a.id):
                    return redirect('riskTestSample',siteID=siteID, proposalID=a.id)
        else:
            for a in siteTestSample:
                equip = models.EquipmentMaster.objects.filter(facilityid_id=a.facilityid)
                for b in equip:
                    comp = models.ComponentMaster.objects.filter(equipmentid_id=b.equipmentid)
                    equipmentType = models.EquipmentType.objects.get(equipmenttypeid=b.equipmenttypeid_id).equipmenttypename
                    for c in comp:
                        proposal = models.RwAssessment.objects.filter(componentid_id=c.componentid)
                        componentType = models.ComponentType.objects.get(componenttypeid=c.componenttypeid_id).componenttypename
                        for d in proposal:
                            dataF = {}
                            dataF['ID'] = d.id
                            dataF['NameProposal'] = d.proposalname
                            dataF['EquipmentType'] = equipmentType
                            dataF['ComponentType'] = componentType
                            risk.append(dataF)
            pagiFaci = Paginator(risk, 25)
            pageFaci = request.GET.get('page', 1)
            try:
                users = pagiFaci.page(pageFaci)
            except PageNotAnInteger:
                users = pagiFaci.page(1)
            except EmptyPage:
                users = pageFaci.page(pagiFaci.num_pages)
    except Exception as e:
        print(e)
        print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
    siteID = encrypt(str(siteID))
    return render(request, 'FacilityUI/facility/testsample.html', {'page': 'testsample','siteID':siteID,'obj':users,'error':error,'result':result,'count': count, 'info': request.session,
                   'noti': noti, 'countnoti': countnoti,'notiVerification':notiVerification})
def InputdataFactory(request,siteID,proposalID):

    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    dataPresent = []
    Target = []
    isBottom = 0
    isShell = 0
    try:
        Fluid = ["Acid", "AlCl3", "C1-C2", "C13-C16", "C17-C25", "C25+", "C3-C4", "C5", "C6-C8", "C9-C12", "CO", "DEE",
                 "EE", "EEA", "EG", "EO", "H2", "H2S", "HCl", "HF", "Methanol", "Nitric Acid", "NO2", "Phosgene", "PO",
                 "Pyrophoric", "Steam", "Styrene", "TDI", "Water"]
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        componentTypeID = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id).componenttypeid_id
        tank=[12,13,14,15]
        # print(componentTypeID)
        if componentTypeID in tank:
            rwinputca= models.RwInputCaTank.objects.get(id=proposalID)
        else:
            rwinputca = models.RwInputCaLevel1.objects.get(id=proposalID)
        assDate = rwassessment.assessmentdate.strftime('%Y-%m-%d')
        try:
            extDate = rwcoat.externalcoatingdate.strftime('%Y-%m-%d')
        except:
            extDate = datetime.now().strftime('%Y-%m-%d')

        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        data = {}
        if '_back' in request.POST:
            return redirect('testsample',siteID=siteID)
        elif '_risk' in request.POST:
            return redirect('riskTestSample', siteID=siteID, proposalID=proposalID)
            # Customize code here
        elif '_reCal' in request.POST:
            # ReCalculate.ReCalculate(proposalID,request)
            isTank = 0
            data = {}
            dataCoF = {}
            try:
                if '_back' in request.POST:
                    return redirect('testsample', siteID=siteID)
                elif '_detail' in request.POST:
                    return redirect('inputdataTestSample', siteID=siteID, proposalID=proposalID)
                rwAss = models.RwAssessment.objects.get(id=proposalID)
                componentTypeID = models.ComponentMaster.objects.get(
                    componentid=rwAss.componentid_id).componenttypeid_id
                tank = [12, 13, 14, 15]
                if componentTypeID in tank:
                    isTank = 1
                else:
                    isTank = 0
                # -----------------riskmatrix----------------
                component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
                equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
                locatAPI1 = {}
                locatAPI2 = {}
                locatAPI3 = {}
                locatAPI1['x'] = 0
                locatAPI1['y'] = 500

                locatAPI2['x'] = 0
                locatAPI2['y'] = 500

                locatAPI3['x'] = 0
                locatAPI3['y'] = 500

                df = models.RwFullPof.objects.get(id=proposalID)
                ca = models.RwFullFcof.objects.get(id=proposalID)

                Ca = round(ca.fcofvalue, 2)
                DF1 = round(df.totaldfap1, 2)
                DF2 = round(df.totaldfap2, 2)
                DF3 = round(df.totaldfap3, 2)
                # ----------------riskchart-----------------
                rwFullpof = models.RwFullPof.objects.get(id=proposalID)
                rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
                risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
                chart = models.RwDataChart.objects.get(id=proposalID)
                assessmentDate = rwAss.assessmentdate

                dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                             chart.riskage6,
                             chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage9, chart.riskage10,
                             chart.riskage11,
                             chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15]
                dataLabel = [date2Str.date2strCC(assessmentDate),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 1)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 2)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 3)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 4)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 5)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 6)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 7)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 8)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 9)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 10)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 11)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 12)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 13)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 14)),
                             date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 14))]
                dataTarget = [chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                              chart.risktarget,
                              chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                              chart.risktarget,
                              chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget]
                endLabel = date2Str.date2str(date2Str.dateFuture(assessmentDate, 16))
                for a in range(0, 16):
                    obj = {}
                    obj['x'] = dataLabel[a]
                    obj['y'] = dataChart[a]
                    dataPresent.append(obj)
                # print(dataPresent)
                # print(dataPresent)
                for a in range(0, 16):
                    obj = {}
                    obj['x'] = dataLabel[a]
                    obj['y'] = dataTarget[a]
                    Target.append(obj)
                # print(Target)
                # -------------------PoF----------------------
                data['thinningType'] = df.thinningtype
                data['gfftotal'] = df.gfftotal
                data['fms'] = df.fms
                data['thinningap1'] = roundData.roundDF(df.thinningap1)
                data['thinningap2'] = roundData.roundDF(df.thinningap2)
                data['thinningap3'] = roundData.roundDF(df.thinningap3)
                data['sccap1'] = roundData.roundDF(df.sccap1)
                data['sccap2'] = roundData.roundDF(df.sccap2)
                data['sccap3'] = roundData.roundDF(df.sccap3)
                data['externalap1'] = roundData.roundDF(df.externalap1)
                data['externalap2'] = roundData.roundDF(df.externalap2)
                data['externalap3'] = roundData.roundDF(df.externalap3)
                data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
                data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
                data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
                data['brittleap1'] = roundData.roundDF(df.brittleap1)
                data['brittleap2'] = roundData.roundDF(df.brittleap2)
                data['brittleap3'] = roundData.roundDF(df.brittleap3)
                data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
                data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
                data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
                data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
                data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
                data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
                data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
                data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
                data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)
                data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
                data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
                data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
                data['pofap1'] = roundData.roundPoF(df.pofap1)
                data['pofap2'] = roundData.roundPoF(df.pofap2)
                data['pofap3'] = roundData.roundPoF(df.pofap3)
                data['pofap1category'] = df.pofap1category
                data['pofap2category'] = df.pofap2category
                data['pofap3category'] = df.pofap3category
                # -------------------CoF--------------------
                if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
                    isBottom = 1
                else:
                    isBottom = 0
                if component.componenttypeid_id == 13:
                    isShell = 1
                else:
                    isShell = 0
                if isBottom:
                    bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
                    dataCoF['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
                    dataCoF['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
                    dataCoF['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
                    dataCoF['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
                    dataCoF['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
                    dataCoF['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
                    dataCoF['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
                    dataCoF['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
                    dataCoF['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
                    dataCoF['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
                    dataCoF['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
                    dataCoF['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
                    dataCoF['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
                    dataCoF['volume_ground_water_leak_d1'] = roundData.roundFC(
                        bottomConsequences.volume_ground_water_leak_d1)
                    dataCoF['volume_ground_water_leak_d4'] = roundData.roundFC(
                        bottomConsequences.volume_ground_water_leak_d4)
                    dataCoF['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
                    dataCoF['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
                    dataCoF['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
                    dataCoF['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
                    dataCoF['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
                    dataCoF['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
                    dataCoF['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
                    dataCoF['material_factor'] = bottomConsequences.material_factor
                    dataCoF['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
                    dataCoF['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
                    dataCoF['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
                elif isShell:
                    shellConsequences = models.RwCaTank.objects.get(id=proposalID)
                    dataCoF['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
                    dataCoF['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
                    dataCoF['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
                    dataCoF['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
                    dataCoF['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
                    dataCoF['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
                    dataCoF['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
                    dataCoF['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
                    dataCoF['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
                    dataCoF['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
                    dataCoF['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
                    dataCoF['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
                    dataCoF['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
                    dataCoF['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
                    dataCoF['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
                    dataCoF['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
                    dataCoF['volume_ground_water_leak_d1'] = roundData.roundFC(
                        shellConsequences.volume_ground_water_leak_d1)
                    dataCoF['volume_ground_water_leak_d4'] = roundData.roundFC(
                        shellConsequences.volume_ground_water_leak_d4)
                    dataCoF['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
                    dataCoF['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
                    dataCoF['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
                    dataCoF['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
                    dataCoF['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
                    dataCoF['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
                    dataCoF['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
                    dataCoF['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
                    dataCoF['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
                    dataCoF['consequence'] = roundData.roundMoney(shellConsequences.consequence)
                    dataCoF['consequencecategory'] = shellConsequences.consequencecategory
                else:

                    ca = models.RwCaLevel1.objects.get(id=proposalID)
                    inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
                    dataCoF['production_cost'] = roundData.roundMoney(inputCa.production_cost)
                    dataCoF['equipment_cost'] = roundData.roundMoney(inputCa.equipment_cost)
                    dataCoF['personal_density'] = inputCa.personal_density
                    dataCoF['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
                    dataCoF['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
                    dataCoF['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
                    dataCoF['fc_cmd'] = roundData.roundMoney(ca.fc_cmd)
                    dataCoF['fc_affa'] = roundData.roundMoney(ca.fc_affa)
                    dataCoF['fc_prod'] = roundData.roundMoney(ca.fc_prod)
                    dataCoF['fc_inj'] = roundData.roundMoney(ca.fc_inj)
                    dataCoF['fc_envi'] = roundData.roundMoney(ca.fc_envi)
                    dataCoF['fc_total'] = roundData.roundMoney(ca.fc_total)
                    dataCoF['fcof_category'] = ca.fcof_category
            except Exception as e:
                print(e)
            return render(request, 'FacilityUI/facility/RiskCompareTestSample.html',
                          {'page': 'riskTestSample', 'siteID': siteID,
                           'API1': location.locat(df.totaldfap1, ca.fcofvalue),
                           'API2': location.locat(df.totaldfap2, ca.fcofvalue),
                           'API3': location.locat(df.totaldfap3, ca.fcofvalue),
                           'DF1': DF1, 'DF2': DF2, 'DF3': DF3, 'ca': Ca, 'ass': rwAss, 'df': df,
                           'proposalID': proposalID, 'isTank': isTank,
                           'label': dataLabel, 'data': dataPresent, 'target': Target,
                           'endLabel': endLabel, 'proposalname': rwAss.proposalname,
                           'componentID': rwAss.componentid_id,
                           'obj': data, 'dataCoF': dataCoF, 'isBottom': isBottom, 'isShell': isShell,
                           'count': count, 'info': request.session, 'noti': noti, 'countnoti': countnoti})
    except Exception as e:
        print(e)
    return render(request, 'FacilityUI/facility/InputDataTestSample.html',
                  {'page': 'inputdataTestSample', 'siteID': siteID,
                   'count': count, 'info': request.session,'noti': noti, 'countnoti': countnoti,'api': Fluid, 'rwAss': rwassessment, 'rwEq': rwequipment,
                   'rwComp': rwcomponent, 'rwStream': rwstream, 'rwExcot': rwexcor,'rwCoat': rwcoat, 'rwMaterial': rwmaterial, 'rwInputCa': rwinputca,
                   'assDate': assDate, 'extDate': extDate,'componentID': rwassessment.componentid_id,
                   'equipmentID': rwassessment.equipmentid_id})
def RiskAnalaysisTestSample(request,siteID,proposalID):
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    isTank=0
    data={}
    dataCoF={}
    try:
        if '_back' in request.POST:
            return redirect('testsample',siteID=siteID)
        elif '_detail' in request.POST:
            return redirect('inputdataTestSample',siteID=siteID, proposalID=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        componentTypeID = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id).componenttypeid_id
        tank = [12, 13, 14, 15]
        if componentTypeID in tank:
            isTank=1
        else:
            isTank=0
        # -----------------riskmatrix----------------
        component = models.ComponentMaster.objects.get(componentid=rwAss.componentid_id)
        equip = models.EquipmentMaster.objects.get(equipmentid=component.equipmentid_id)
        locatAPI1 = {}
        locatAPI2 = {}
        locatAPI3 = {}
        locatAPI1['x'] = 0
        locatAPI1['y'] = 500

        locatAPI2['x'] = 0
        locatAPI2['y'] = 500

        locatAPI3['x'] = 0
        locatAPI3['y'] = 500

        df = models.RwFullPof.objects.get(id=proposalID)
        ca = models.RwFullFcof.objects.get(id=proposalID)

        Ca = round(ca.fcofvalue, 2)
        DF1 = round(df.totaldfap1, 2)
        DF2 = round(df.totaldfap2, 2)
        DF3 = round(df.totaldfap3, 2)
    #----------------riskchart-----------------
        rwFullpof = models.RwFullPof.objects.get(id=proposalID)
        rwFullcof = models.RwFullFcof.objects.get(id=proposalID)
        risk = rwFullpof.pofap1 * rwFullcof.fcofvalue
        chart = models.RwDataChart.objects.get(id=proposalID)
        assessmentDate = rwAss.assessmentdate
        dataChart = [risk, chart.riskage1, chart.riskage2, chart.riskage3, chart.riskage4, chart.riskage5,
                     chart.riskage6,
                     chart.riskage7, chart.riskage8, chart.riskage9, chart.riskage9, chart.riskage10, chart.riskage11,
                     chart.riskage12, chart.riskage13, chart.riskage14, chart.riskage15]
        dataLabel = [date2Str.date2strCC(assessmentDate), date2Str.date2str(date2Str.dateFuture(assessmentDate, 1)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 2)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 3)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 4)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 5)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 6)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 7)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 8)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 9)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 10)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 11)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 12)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 13)),
                     date2Str.date2strCC(date2Str.dateFuture(assessmentDate, 14))]
        dataTarget = [chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget,
                      chart.risktarget,
                      chart.risktarget, chart.risktarget, chart.risktarget, chart.risktarget]
        endLabel = date2Str.date2str(date2Str.dateFuture(assessmentDate, 15))
        #-------------------PoF----------------------
        data['thinningType'] = df.thinningtype
        data['gfftotal'] = df.gfftotal
        data['fms'] = df.fms
        data['thinningap1'] = roundData.roundDF(df.thinningap1)
        data['thinningap2'] = roundData.roundDF(df.thinningap2)
        data['thinningap3'] = roundData.roundDF(df.thinningap3)
        data['sccap1'] = roundData.roundDF(df.sccap1)
        data['sccap2'] = roundData.roundDF(df.sccap2)
        data['sccap3'] = roundData.roundDF(df.sccap3)
        data['externalap1'] = roundData.roundDF(df.externalap1)
        data['externalap2'] = roundData.roundDF(df.externalap2)
        data['externalap3'] = roundData.roundDF(df.externalap3)
        data['htha_ap1'] = roundData.roundDF(df.htha_ap1)
        data['htha_ap2'] = roundData.roundDF(df.htha_ap2)
        data['htha_ap3'] = roundData.roundDF(df.htha_ap3)
        data['brittleap1'] = roundData.roundDF(df.brittleap1)
        data['brittleap2'] = roundData.roundDF(df.brittleap2)
        data['brittleap3'] = roundData.roundDF(df.brittleap3)
        data['fatigueap1'] = roundData.roundDF(df.fatigueap1)
        data['fatigueap2'] = roundData.roundDF(df.fatigueap2)
        data['fatigueap3'] = roundData.roundDF(df.fatigueap3)
        data['thinninggeneralap1'] = roundData.roundDF(df.thinninggeneralap1)
        data['thinninggeneralap2'] = roundData.roundDF(df.thinninggeneralap2)
        data['thinninggeneralap3'] = roundData.roundDF(df.thinninggeneralap3)
        data['thinninglocalap1'] = roundData.roundDF(df.thinninglocalap1)
        data['thinninglocalap2'] = roundData.roundDF(df.thinninglocalap2)
        data['thinninglocalap3'] = roundData.roundDF(df.thinninglocalap3)
        data['totaldfap1'] = roundData.roundDF(df.totaldfap1)
        data['totaldfap2'] = roundData.roundDF(df.totaldfap2)
        data['totaldfap3'] = roundData.roundDF(df.totaldfap3)
        data['pofap1'] = roundData.roundPoF(df.pofap1)
        data['pofap2'] = roundData.roundPoF(df.pofap2)
        data['pofap3'] = roundData.roundPoF(df.pofap3)
        data['pofap1category'] = df.pofap1category
        data['pofap2category'] = df.pofap2category
        data['pofap3category'] = df.pofap3category
        #-------------------CoF--------------------
        if component.componenttypeid_id == 12 or component.componenttypeid_id == 14 or component.componenttypeid_id == 15:
            isBottom = 1
        else:
            isBottom = 0
        if component.componenttypeid_id == 13:
            isShell = 1
        else:
            isShell = 0
        if isBottom:
            bottomConsequences = models.RwCaTank.objects.get(id=proposalID)
            dataCoF['hydraulic_water'] = roundData.roundFC(bottomConsequences.hydraulic_water)
            dataCoF['hydraulic_fluid'] = roundData.roundFC(bottomConsequences.hydraulic_fluid)
            dataCoF['seepage_velocity'] = roundData.roundFC(bottomConsequences.seepage_velocity)
            dataCoF['flow_rate_d1'] = roundData.roundFC(bottomConsequences.flow_rate_d1)
            dataCoF['flow_rate_d4'] = roundData.roundFC(bottomConsequences.flow_rate_d4)
            dataCoF['leak_duration_d1'] = roundData.roundFC(bottomConsequences.leak_duration_d1)
            dataCoF['leak_duration_d4'] = roundData.roundFC(bottomConsequences.leak_duration_d4)
            dataCoF['release_volume_leak_d1'] = roundData.roundFC(bottomConsequences.release_volume_leak_d1)
            dataCoF['release_volume_leak_d4'] = roundData.roundFC(bottomConsequences.release_volume_leak_d4)
            dataCoF['release_volume_rupture'] = roundData.roundFC(bottomConsequences.release_volume_rupture)
            dataCoF['time_leak_ground'] = roundData.roundFC(bottomConsequences.time_leak_ground)
            dataCoF['volume_subsoil_leak_d1'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d1)
            dataCoF['volume_subsoil_leak_d4'] = roundData.roundFC(bottomConsequences.volume_subsoil_leak_d4)
            dataCoF['volume_ground_water_leak_d1'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d1)
            dataCoF['volume_ground_water_leak_d4'] = roundData.roundFC(bottomConsequences.volume_ground_water_leak_d4)
            dataCoF['barrel_dike_rupture'] = roundData.roundFC(bottomConsequences.barrel_dike_rupture)
            dataCoF['barrel_onsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_onsite_rupture)
            dataCoF['barrel_offsite_rupture'] = roundData.roundFC(bottomConsequences.barrel_offsite_rupture)
            dataCoF['barrel_water_rupture'] = roundData.roundFC(bottomConsequences.barrel_water_rupture)
            dataCoF['fc_environ_leak'] = roundData.roundMoney(bottomConsequences.fc_environ_leak)
            dataCoF['fc_environ_rupture'] = roundData.roundMoney(bottomConsequences.fc_environ_rupture)
            dataCoF['fc_environ'] = roundData.roundMoney(bottomConsequences.fc_environ)
            dataCoF['material_factor'] = bottomConsequences.material_factor
            dataCoF['component_damage_cost'] = roundData.roundMoney(bottomConsequences.component_damage_cost)
            dataCoF['business_cost'] = roundData.roundMoney(bottomConsequences.business_cost)
            dataCoF['consequence'] = roundData.roundMoney(bottomConsequences.consequence)
        elif isShell:
            shellConsequences = models.RwCaTank.objects.get(id=proposalID)
            dataCoF['flow_rate_d1'] = roundData.roundFC(shellConsequences.flow_rate_d1)
            dataCoF['flow_rate_d2'] = roundData.roundFC(shellConsequences.flow_rate_d2)
            dataCoF['flow_rate_d3'] = roundData.roundFC(shellConsequences.flow_rate_d3)
            dataCoF['flow_rate_d4'] = roundData.roundFC(shellConsequences.flow_rate_d4)
            dataCoF['leak_duration_d1'] = roundData.roundFC(shellConsequences.leak_duration_d1)
            dataCoF['leak_duration_d2'] = roundData.roundFC(shellConsequences.leak_duration_d2)
            dataCoF['leak_duration_d3'] = roundData.roundFC(shellConsequences.leak_duration_d3)
            dataCoF['leak_duration_d4'] = roundData.roundFC(shellConsequences.leak_duration_d4)
            dataCoF['release_volume_leak_d1'] = roundData.roundFC(shellConsequences.release_volume_leak_d1)
            dataCoF['release_volume_leak_d2'] = roundData.roundFC(shellConsequences.release_volume_leak_d2)
            dataCoF['release_volume_leak_d3'] = roundData.roundFC(shellConsequences.release_volume_leak_d3)
            dataCoF['release_volume_leak_d4'] = roundData.roundFC(shellConsequences.release_volume_leak_d4)
            dataCoF['release_volume_rupture'] = roundData.roundFC(shellConsequences.release_volume_rupture)
            dataCoF['time_leak_ground'] = roundData.roundFC(shellConsequences.time_leak_ground)
            dataCoF['volume_subsoil_leak_d1'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d1)
            dataCoF['volume_subsoil_leak_d4'] = roundData.roundFC(shellConsequences.volume_subsoil_leak_d4)
            dataCoF['volume_ground_water_leak_d1'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d1)
            dataCoF['volume_ground_water_leak_d4'] = roundData.roundFC(shellConsequences.volume_ground_water_leak_d4)
            dataCoF['barrel_dike_rupture'] = roundData.roundFC(shellConsequences.barrel_dike_rupture)
            dataCoF['barrel_onsite_rupture'] = roundData.roundFC(shellConsequences.barrel_onsite_rupture)
            dataCoF['barrel_offsite_rupture'] = roundData.roundFC(shellConsequences.barrel_offsite_rupture)
            dataCoF['barrel_water_rupture'] = roundData.roundFC(shellConsequences.barrel_water_rupture)
            dataCoF['fc_environ_leak'] = roundData.roundMoney(shellConsequences.fc_environ_leak)
            dataCoF['fc_environ_rupture'] = roundData.roundMoney(shellConsequences.fc_environ_rupture)
            dataCoF['fc_environ'] = roundData.roundMoney(shellConsequences.fc_environ)
            dataCoF['component_damage_cost'] = roundData.roundMoney(shellConsequences.component_damage_cost)
            dataCoF['business_cost'] = roundData.roundMoney(shellConsequences.business_cost)
            dataCoF['consequence'] = roundData.roundMoney(shellConsequences.consequence)
            dataCoF['consequencecategory'] = shellConsequences.consequencecategory
        else:

            ca = models.RwCaLevel1.objects.get(id=proposalID)
            inputCa = models.RwInputCaLevel1.objects.get(id=proposalID)
            dataCoF['production_cost'] = roundData.roundMoney(inputCa.production_cost)
            dataCoF['equipment_cost'] = roundData.roundMoney(inputCa.equipment_cost)
            dataCoF['personal_density'] = inputCa.personal_density
            dataCoF['evironment_cost'] = roundData.roundMoney(inputCa.evironment_cost)
            dataCoF['ca_cmd'] = roundData.roundFC(ca.ca_cmd)
            dataCoF['ca_inj_flame'] = roundData.roundFC(ca.ca_inj_flame)
            dataCoF['fc_cmd'] = roundData.roundMoney(ca.fc_cmd)
            dataCoF['fc_affa'] = roundData.roundMoney(ca.fc_affa)
            dataCoF['fc_prod'] = roundData.roundMoney(ca.fc_prod)
            dataCoF['fc_inj'] = roundData.roundMoney(ca.fc_inj)
            dataCoF['fc_envi'] = roundData.roundMoney(ca.fc_envi)
            dataCoF['fc_total'] = roundData.roundMoney(ca.fc_total)
            dataCoF['fcof_category'] = ca.fcof_category

    except Exception as e:
        print(e)
    return render(request, 'FacilityUI/facility/RiskTestSample.html',
                  {'page': 'riskTestSample', 'siteID': siteID,'API1': location.locat(df.totaldfap1, ca.fcofvalue),
                   'API2': location.locat(df.totaldfap2, ca.fcofvalue),'API3': location.locat(df.totaldfap3, ca.fcofvalue),
                   'DF1': DF1, 'DF2': DF2, 'DF3': DF3, 'ca': Ca,'ass': rwAss,'df': df, 'proposalID': proposalID,'isTank':isTank,
                   'label': dataLabel, 'data': dataChart, 'target': dataTarget,
                   'endLabel': endLabel, 'proposalname': rwAss.proposalname, 'componentID': rwAss.componentid_id,
                   'obj': data,'dataCoF':dataCoF,'isBottom':isBottom,'isShell':isShell,
                   'count': count, 'info': request.session, 'noti': noti, 'countnoti': countnoti})
def FullyConsequencelv2(request, proposalID):
    if not request.session.session_key:
        return redirect('home')
    siteid = models.Sites.objects.filter(userID_id=request.session['id'])[0].siteid
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    notiVerification = ReCalculate.notiVerifications(siteid)
    countnoti = noti.filter(state=0).count()
    data = {}
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    try:
        # print("dat ngu")
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        comp = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id)
        eq = models.EquipmentMaster.objects.get(equipmentid=rwassessment.equipmentid_id)
        cainputlv2=models.RwInputCaLevel2.objects.get(id=proposalID)
        rwAss = models.RwAssessment.objects.get(id=proposalID)
        rwinputca = models.RwInputCaLevel1.objects.get(id=proposalID)
        cacallv2=CA_CAL_LV2.CA_CAL_LV2(cainputlv2.Psat, cainputlv2.Frac_l, cainputlv2.Frac_v, cainputlv2.Lower_flammable, cainputlv2.Upper_flammable,cainputlv2.Hcs, cainputlv2.temp_flash, cainputlv2.Fract_flash, cainputlv2.Heat_combustion_l, cainputlv2.Heat_combustion_v,
                                       cainputlv2.temp_bubble, cainputlv2.temp_dew, cainputlv2.delta, rwstream.maxoperatingpressure, 101.325, rwcomponent.nominaldiameter,rwstream.maxoperatingtemperature,rwinputca.mass_inventory, rwinputca.detection_type, rwinputca.isulation_type, cainputlv2.surface, cainputlv2.temp_ground,
                                       cainputlv2.pressure_bp, cainputlv2.wind_speed_measured, cainputlv2.mfrac_flam, cainputlv2.temp_fp, rwinputca.api_fluid, cainputlv2.atmospheric_temp,1.225, cainputlv2.atmospheric_rh, cainputlv2.atmospheric_wrp, cainputlv2.brust_pressure, cainputlv2.xs_fball, cainputlv2.yield_factor,
                                       models.ApiComponentType.objects.get(apicomponenttypeid=comp.apicomponenttypeid).apicomponenttypename, cainputlv2.tox_lim, cainputlv2.mol_frac_tox, cainputlv2.equipment_stored_vapor, cainputlv2.n_v)

        if cainputlv2.Psat:
            data['Psat'] = cainputlv2.Psat
        else:
            data['Psat'] = 5.5
        if cainputlv2.Frac_l:
            data['Frac_l'] = cainputlv2.Frac_l
        else:
            data['Frac_l'] = 5.5
        if cainputlv2.Frac_v:
            data['Frac_v'] = cainputlv2.Frac_v
        else:
            data['Frac_v'] = 2.5
        data['Lower_flammable'] = cainputlv2.Lower_flammable
        data['Upper_flammable'] = cainputlv2.Upper_flammable
        if cainputlv2.Hcs:
            data['HCs'] = cainputlv2.Hcs
        else:
            data['HCs'] = 2.5
        data['temp_flash'] = cainputlv2.temp_flash
        data['frac_flash'] = cainputlv2.Fract_flash
        data['HCl'] = cainputlv2.Heat_combustion_l
        data['HCv'] = cainputlv2.Heat_combustion_v
        if cainputlv2.temp_bubble:
            data['Tb'] = cainputlv2.temp_bubble
        else:
            data['Tb'] = 1.25
        data['Td'] = cainputlv2.temp_dew
        data['deltaHv'] = cainputlv2.delta
        data['Xsurf'] = cainputlv2.surface
        data['Tg'] = cainputlv2.temp_ground
        data['Pb_g'] = cainputlv2.pressure_bp
        data['Uw'] = cainputlv2.wind_speed_measured
        data['mfrac_flam'] = cainputlv2.mfrac_flam
        data['Tfp'] = cainputlv2.temp_fp
        data['Tatm'] = cainputlv2.atmospheric_temp
        data['patm'] = 1.225
        data['RH'] = cainputlv2.atmospheric_rh
        data['Tw'] = cainputlv2.atmospheric_wrp
        data['PB'] = cainputlv2.brust_pressure
        data['Xs_fball'] = cainputlv2.xs_fball
        data['n'] = cainputlv2.yield_factor
        data['tox_lim'] = cainputlv2.tox_lim
        data['mol_frac_tox'] = cainputlv2.mol_frac_tox
        data['Vs'] = cainputlv2.equipment_stored_vapor
        data['nv'] = cainputlv2.n_v

        data['a_n_1'] = roundData.roundFC(cacallv2.a_n(1))
        data['a_n_2'] = roundData.roundFC(cacallv2.a_n(2))
        data['a_n_3'] = roundData.roundFC(cacallv2.a_n(3))
        data['a_n_4'] = roundData.roundFC(cacallv2.a_n(4))

        data['W_n_1'] = roundData.roundFC(cacallv2.W_n(1))
        data['W_n_2'] = roundData.roundFC(cacallv2.W_n(2))
        data['W_n_3'] = roundData.roundFC(cacallv2.W_n(3))
        data['W_n_4'] = roundData.roundFC(cacallv2.W_n(4))

        data['ReleaseType_1'] = cacallv2.releaseType(1)
        data['ReleaseType_2'] = cacallv2.releaseType(2)
        data['ReleaseType_3'] = cacallv2.releaseType(3)
        data['ReleaseType_4'] = cacallv2.releaseType(4)

        data['jet_rate_1'] = roundData.roundFC(cacallv2.W_n_jet(1))
        data['jet_rate_2'] = roundData.roundFC(cacallv2.W_n_jet(2))
        data['jet_rate_3'] = roundData.roundFC(cacallv2.W_n_jet(3))
        data['jet_rate_4'] = roundData.roundFC(cacallv2.W_n_jet(4))

        data['pool_rate_1'] = roundData.roundFC(cacallv2.W_n_pool(1))
        data['pool_rate_2'] = roundData.roundFC(cacallv2.W_n_pool(2))
        data['pool_rate_3'] = roundData.roundFC(cacallv2.W_n_pool(3))
        data['pool_rate_4'] = roundData.roundFC(cacallv2.W_n_pool(4))
        # print('ok____1')
        data['erate_1'] = roundData.roundFC(cacallv2.erate_n(1))
        data['erate_2'] = roundData.roundFC(cacallv2.erate_n(2))
        data['erate_3'] = roundData.roundFC(cacallv2.erate_n(3))
        data['erate_4'] = roundData.roundFC(cacallv2.erate_n(4))
        # print('ok____2')
        data['rate_flam_1'] = roundData.roundFC(cacallv2.rate_flam_n(1))
        data['rate_flam_2'] = roundData.roundFC(cacallv2.rate_flam_n(2))
        data['rate_flam_3'] = roundData.roundFC(cacallv2.rate_flam_n(3))
        data['rate_flam_4'] = roundData.roundFC(cacallv2.rate_flam_n(4))
        # print('ok____3')
        # print('ok____4')

        # print('ok____4')
        data['poi_two_phase_1'] = roundData.roundFC(cacallv2.poi_two_phase(1))
        data['poi_two_phase_2'] = roundData.roundFC(cacallv2.poi_two_phase(2))
        data['poi_two_phase_3'] = roundData.roundFC(cacallv2.poi_two_phase(3))
        data['poi_two_phase_4'] = roundData.roundFC(cacallv2.poi_two_phase(4))
        # print('ok____5')
        data['poii_two_phase_1'] = roundData.roundFC(cacallv2.poii_two_phase(1))
        data['poii_two_phase_2'] = roundData.roundFC(cacallv2.poii_two_phase(2))
        data['poii_two_phase_3'] = roundData.roundFC(cacallv2.poii_two_phase(3))
        data['poii_two_phase_4'] = roundData.roundFC(cacallv2.poii_two_phase(4))
        # print('ok____6')
        data['pvcedi_two_phase_1'] = roundData.roundFC(cacallv2.pvcedi_two_phase(1))
        data['pvcedi_two_phase_2'] = roundData.roundFC(cacallv2.pvcedi_two_phase(2))
        data['pvcedi_two_phase_3'] = roundData.roundFC(cacallv2.pvcedi_two_phase(3))
        data['pvcedi_two_phase_4'] = roundData.roundFC(cacallv2.pvcedi_two_phase(4))
        # print('ok____7')
        data['pffdi_two_phase_1'] = roundData.roundFC(cacallv2.pffdi_two_phase(1))
        data['pffdi_two_phase_2'] = roundData.roundFC(cacallv2.pffdi_two_phase(2))
        data['pffdi_two_phase_3'] = roundData.roundFC(cacallv2.pffdi_two_phase(3))
        data['pffdi_two_phase_4'] = roundData.roundFC(cacallv2.pffdi_two_phase(4))
        # print('ok____8')
        data['psafe_two_1'] = roundData.roundFC(cacallv2.psafe_two(1))
        data['psafe_two_2'] = roundData.roundFC(cacallv2.psafe_two(2))
        data['psafe_two_3'] = roundData.roundFC(cacallv2.psafe_two(3))
        data['psafe_two_4'] = roundData.roundFC(cacallv2.psafe_two(4))
        # print('ok____9')
        data['amaxpf_1'] = roundData.roundFC(cacallv2.amaxpf_n(1))
        data['amaxpf_2'] = roundData.roundFC(cacallv2.amaxpf_n(2))
        data['amaxpf_3'] = roundData.roundFC(cacallv2.amaxpf_n(3))
        data['amaxpf_4'] = roundData.roundFC(cacallv2.amaxpf_n(4))
        # print('ok____10')
        data['apf_1'] = roundData.roundFC(cacallv2.apf_n(1))
        data['apf_2'] = roundData.roundFC(cacallv2.apf_n(2))
        data['apf_3'] = roundData.roundFC(cacallv2.apf_n(3))
        data['apf_4'] = roundData.roundFC(cacallv2.apf_n(4))
        # print('ok____11')
        data['lpf_1'] = roundData.roundFC(cacallv2.lpf_n(1))
        data['lpf_2'] = roundData.roundFC(cacallv2.lpf_n(2))
        data['lpf_3'] = roundData.roundFC(cacallv2.lpf_n(3))
        data['lpf_4'] = roundData.roundFC(cacallv2.lpf_n(4))
        # print('ok____12')
        data['qrad_pool_1'] = roundData.roundFC(cacallv2.qrad_pool_n(1))
        data['qrad_pool_2'] = roundData.roundFC(cacallv2.qrad_pool_n(2))
        data['qrad_pool_3'] = roundData.roundFC(cacallv2.qrad_pool_n(3))
        data['qrad_pool_4'] = roundData.roundFC(cacallv2.qrad_pool_n(4))
        # print('ok____13')
        data['ith_pool_1'] = roundData.roundFC(cacallv2.ith_pool_n(1))
        data['ith_pool_2'] = roundData.roundFC(cacallv2.ith_pool_n(2))
        data['ith_pool_3'] = roundData.roundFC(cacallv2.ith_pool_n(3))
        data['ith_pool_4'] = roundData.roundFC(cacallv2.ith_pool_n(4))
        # print('ok____14')
        data['fcyl_1'] = roundData.roundFC(cacallv2.fcyl_n(1))
        data['fcyl_2'] = roundData.roundFC(cacallv2.fcyl_n(2))
        data['fcyl_3'] = roundData.roundFC(cacallv2.fcyl_n(3))
        data['fcyl_4'] = roundData.roundFC(cacallv2.fcyl_n(4))
        # print('ok____15')
        data['ca_pool_cmd_1'] = roundData.roundFC(cacallv2.ca_pool_cmd_n(1))
        data['ca_pool_cmd_2'] = roundData.roundFC(cacallv2.ca_pool_cmd_n(2))
        data['ca_pool_cmd_3'] = roundData.roundFC(cacallv2.ca_pool_cmd_n(3))
        data['ca_pool_cmd_4'] = roundData.roundFC(cacallv2.ca_pool_cmd_n(4))

        data['ca_pool_inj_1'] = roundData.roundFC(cacallv2.ca_pool_inj_n(1))
        data['ca_pool_inj_2'] = roundData.roundFC(cacallv2.ca_pool_inj_n(2))
        data['ca_pool_inj_3'] = roundData.roundFC(cacallv2.ca_pool_inj_n(3))
        data['ca_pool_inj_4'] = roundData.roundFC(cacallv2.ca_pool_inj_n(4))

        data['qrad_jet_1'] = roundData.roundFC(cacallv2.qrad_jet_n(1))
        data['qrad_jet_2'] = roundData.roundFC(cacallv2.qrad_jet_n(2))
        data['qrad_jet_3'] = roundData.roundFC(cacallv2.qrad_jet_n(3))
        data['qrad_jet_4'] = roundData.roundFC(cacallv2.qrad_jet_n(4))

        data['ith_jet_1'] = roundData.roundFC(cacallv2.ith_jet_n(1))
        data['ith_jet_2'] = roundData.roundFC(cacallv2.ith_jet_n(2))
        data['ith_jet_3'] = roundData.roundFC(cacallv2.ith_jet_n(3))
        data['ith_jet_4'] = roundData.roundFC(cacallv2.ith_jet_n(4))

        data['ca_jet_cmd_1'] = roundData.roundFC(cacallv2.ca_jet_cmd_n(1))
        data['ca_jet_cmd_2'] = roundData.roundFC(cacallv2.ca_jet_cmd_n(2))
        data['ca_jet_cmd_3'] = roundData.roundFC(cacallv2.ca_jet_cmd_n(3))
        data['ca_jet_cmd_4'] = roundData.roundFC(cacallv2.ca_jet_cmd_n(4))
        # print('ok____16')
        data['ca_jet_inj_1'] = roundData.roundFC(cacallv2.ca_jet_inj_n(1))
        data['ca_jet_inj_2'] = roundData.roundFC(cacallv2.ca_jet_inj_n(2))
        data['ca_jet_inj_3'] = roundData.roundFC(cacallv2.ca_jet_inj_n(3))
        data['ca_jet_inj_4'] = roundData.roundFC(cacallv2.ca_jet_inj_n(4))

        data['ca_fball_cmd'] = roundData.roundFC(cacallv2.ca_fball_cmd())
        data['ca_fball_inj'] = roundData.roundFC(cacallv2.ca_fball_inj())
        # print('ok____17')
        data['pso_1'] = roundData.roundFC(cacallv2.pso_n(1))
        data['pso_2'] = roundData.roundFC(cacallv2.pso_n(2))
        data['pso_3'] = roundData.roundFC(cacallv2.pso_n(3))
        data['pso_4'] = roundData.roundFC(cacallv2.pso_n(4))

        data['r_hs_1'] = roundData.roundFC(cacallv2.r_hs_n(1))
        data['r_hs_2'] = roundData.roundFC(cacallv2.r_hs_n(2))
        data['r_hs_3'] = roundData.roundFC(cacallv2.r_hs_n(3))
        data['r_hs_4'] = roundData.roundFC(cacallv2.r_hs_n(4))

        data['ca_vce_cmd_1'] = roundData.roundFC(cacallv2.ca_vce_cmd_n(1))
        data['ca_vce_cmd_2'] = roundData.roundFC(cacallv2.ca_vce_cmd_n(2))
        data['ca_vce_cmd_3'] = roundData.roundFC(cacallv2.ca_vce_cmd_n(3))
        data['ca_vce_cmd_4'] = roundData.roundFC(cacallv2.ca_vce_cmd_n(4))
        # print('ok___18')
        data['ca_vce_inj_1'] = roundData.roundFC(cacallv2.ca_vce_inj_n(1))
        data['ca_vce_inj_2'] = roundData.roundFC(cacallv2.ca_vce_inj_n(2))
        data['ca_vce_inj_3'] = roundData.roundFC(cacallv2.ca_vce_inj_n(3))
        data['ca_vce_inj_4'] = roundData.roundFC(cacallv2.ca_vce_inj_n(4))

        data['ca_flam_cmd_1'] = roundData.roundFC(cacallv2.ca_flam_cmd_n(1))
        data['ca_flam_cmd_2'] = roundData.roundFC(cacallv2.ca_flam_cmd_n(2))
        data['ca_flam_cmd_3'] = roundData.roundFC(cacallv2.ca_flam_cmd_n(3))
        data['ca_flam_cmd_4'] = roundData.roundFC(cacallv2.ca_flam_cmd_n(4))

        data['ca_flam_inj_1'] = roundData.roundFC(cacallv2.ca_flam_inj_n(1))
        data['ca_flam_inj_2'] = roundData.roundFC(cacallv2.ca_flam_inj_n(2))
        data['ca_flam_inj_3'] = roundData.roundFC(cacallv2.ca_flam_inj_n(3))
        data['ca_flam_inj_4'] = roundData.roundFC(cacallv2.ca_flam_inj_n(4))
        # print('ok___19')
        data['ca_flam_cmd'] = roundData.roundFC(cacallv2.ca_flam_cmd())
        data['ca_flam_inj'] = roundData.roundFC(cacallv2.ca_flam_inj())
        # print('ok____0')
        data['ld_tox_1'] = roundData.roundFC(cacallv2.ld_tox_n(1))
        data['ld_tox_2'] = roundData.roundFC(cacallv2.ld_tox_n(2))
        data['ld_tox_3'] = roundData.roundFC(cacallv2.ld_tox_n(3))
        data['ld_tox_4'] = roundData.roundFC(cacallv2.ld_tox_n(4))
        # print('ok____20')
        data['ca_tox_inj_1'] = roundData.roundFC(cacallv2.ca_tox_inj_n(1))
        data['ca_tox_inj_2'] = roundData.roundFC(cacallv2.ca_tox_inj_n(2))
        data['ca_tox_inj_3'] = roundData.roundFC(cacallv2.ca_tox_inj_n(3))
        data['ca_tox_inj_4'] = roundData.roundFC(cacallv2.ca_tox_inj_n(4))
        # print('ok____21')
        data['ca_tox_inj'] = roundData.roundFC(cacallv2.ca_tox_inj())

        data['ca_pexp_cmd_1'] = roundData.roundFC(cacallv2.ca_pexp_cmd_n(1))
        data['ca_pexp_cmd_2'] = roundData.roundFC(cacallv2.ca_pexp_cmd_n(2))
        data['ca_pexp_cmd_3'] = roundData.roundFC(cacallv2.ca_pexp_cmd_n(3))
        data['ca_pexp_cmd_4'] = roundData.roundFC(cacallv2.ca_pexp_cmd_n(4))
        # print('ok___22')
        data['ca_pexp_inj_1'] = roundData.roundFC(cacallv2.ca_pexp_inj_n(1))
        data['ca_pexp_inj_2'] = roundData.roundFC(cacallv2.ca_pexp_inj_n(2))
        data['ca_pexp_inj_3'] = roundData.roundFC(cacallv2.ca_pexp_inj_n(3))
        data['ca_pexp_inj_4'] = roundData.roundFC(cacallv2.ca_pexp_inj_n(4))

        data['ca_bleve_cmd_1'] = roundData.roundFC(cacallv2.ca_bleve_cmd_n(1))
        data['ca_bleve_cmd_2'] = roundData.roundFC(cacallv2.ca_bleve_cmd_n(2))
        data['ca_bleve_cmd_3'] = roundData.roundFC(cacallv2.ca_bleve_cmd_n(3))
        data['ca_bleve_cmd_4'] = roundData.roundFC(cacallv2.ca_bleve_cmd_n(4))

        data['ca_bleve_inj_1'] = roundData.roundFC(cacallv2.ca_bleve_inj_n(1))
        data['ca_bleve_inj_2'] = roundData.roundFC(cacallv2.ca_bleve_inj_n(2))
        data['ca_bleve_inj_3'] = roundData.roundFC(cacallv2.ca_bleve_inj_n(3))
        data['ca_bleve_inj_4'] = roundData.roundFC(cacallv2.ca_bleve_inj_n(4))

        data['ca_nfnt_cmd_1'] = roundData.roundFC(cacallv2.ca_nfnt_cmd_n(1))
        data['ca_nfnt_cmd_2'] = roundData.roundFC(cacallv2.ca_nfnt_cmd_n(2))
        data['ca_nfnt_cmd_3'] = roundData.roundFC(cacallv2.ca_nfnt_cmd_n(3))
        data['ca_nfnt_cmd_4'] = roundData.roundFC(cacallv2.ca_nfnt_cmd_n(4))

        data['ca_nfnt_inj_1'] = roundData.roundFC(cacallv2.ca_nfnt_inj_n(1))
        data['ca_nfnt_inj_2'] = roundData.roundFC(cacallv2.ca_nfnt_inj_n(2))
        data['ca_nfnt_inj_3'] = roundData.roundFC(cacallv2.ca_nfnt_inj_n(3))
        data['ca_nfnt_inj_4'] = roundData.roundFC(cacallv2.ca_nfnt_inj_n(4))

        data['ca_nfnt_cmd'] = roundData.roundFC(cacallv2.ca_nfnt_cmd())
        data['ca_nfnt_inj'] = roundData.roundFC(cacallv2.ca_nfnt_inj())
        data['ca'] = roundData.roundFC(cacallv2.ca())

        if '_save' in request.POST:
            if request.method == 'POST':
                data['Psat'] = request.POST.get('Psat')
                data['Frac_l'] = request.POST.get('Frac_l')
                data['Frac_v'] = request.POST.get('Frac_v')
                data['Lower_flammable'] = request.POST.get('Lower_flammable')
                data['Upper_flammable'] = request.POST.get('Upper_flammable')
                data['HCs']=request.POST.get('HCs')
                data['temp_flash']=request.POST.get('Tf')
                data['frac_flash'] = request.POST.get('frac_flash')
                data['HCl'] = request.POST.get('HCl')
                data['HCv'] = request.POST.get('HCv')
                data['Tb'] = request.POST.get('Tb')
                data['Td'] = request.POST.get('Td')
                data['deltaHv'] = request.POST.get('deltaHv')
                data['Xsurf'] = request.POST.get('Xsurf')
                data['Tg'] = request.POST.get('Tg')
                data['Pb_g'] = request.POST.get('Pb_g')
                data['Uw'] = request.POST.get('Uw')
                data['mfrac_flam'] = request.POST.get('mfrac_flam')
                data['Tfp'] = request.POST.get('Tfp')
                data['Tatm'] = request.POST.get('Tatm')
                data['patm'] = request.POST.get('patm')
                data['RH'] = request.POST.get('RH')
                data['Tw'] = request.POST.get('Tw')
                data['PB'] = request.POST.get('PB')
                data['Xs_fball'] = request.POST.get('Xs_fball')
                data['n'] = request.POST.get('n')
                data['tox_lim'] = request.POST.get('tox_lim')
                data['mol_frac_tox'] = request.POST.get('mol_frac_tox')
                data['Vs'] = request.POST.get('Vs')
                data['nv'] = request.POST.get('nv')

                rwinputcalevel2 = models.RwInputCaLevel2(id=rwAss, Psat=data['Psat'],Frac_l=data['Frac_l'],Frac_v=data['Frac_v'],Lower_flammable=data['Lower_flammable'], Upper_flammable=data['Upper_flammable'],
                                                         Hcs=data['HCs'],temp_flash=data['temp_flash'], Fract_flash=data['frac_flash'],Heat_combustion_l=data['HCl'], Heat_combustion_v=data['HCv'],
                                                         temp_bubble=data['Tb'],temp_dew=data['Td'], delta=data['deltaHv'], surface=data['Xsurf'], temp_ground=data['Tg'], pressure_bp=data['Pb_g'],
                                                         wind_speed_measured=data['Uw'], mfrac_flam=data['mfrac_flam'], temp_fp=data['Tfp'], atmospheric_temp=data['Tatm'], atmospheric_air_density=data['patm'],
                                                         atmospheric_rh=data['RH'],atmospheric_wrp=data['Tw'], brust_pressure=data['PB'], xs_fball=data['Xs_fball'], yield_factor=data['n'], tox_lim=data['tox_lim'], mol_frac_tox=data['mol_frac_tox'],
                                                         equipment_stored_vapor=data['Vs'],n_v=data['nv'])
                rwinputcalevel2.save()
        return render(request, 'FacilityUI/risk_summary/fullyConsequencelv2.html',
                      {'page': 'fullyConselv2', 'data': data, 'proposalID': proposalID,'noti':noti,'notiVerification':notiVerification,'count':count,'countnoti':countnoti,'siteid':siteid})
    except Exception as e:
        print(e)
        raise Http404
def Admin(request,siteID):
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    notiVerificationmana = ReCalculate.notiVerificationmana(siteID)
    countnoti = noti.filter(state=0).count()

    infor = {}
    username = []
    phonenumber = []
    mail = []
    try :
        array =[]
        site = models.Sites.objects.all()
        user = models.ZUser.objects.all()
        for a in user:
            username.append(a.username)
            phonenumber.append(a.phone)
            mail.append(a.email)
        for b in site:
            data = models.ZUser.objects.filter(Q(id=b.userID_id),Q(active=1))
            for a in data :
                dataF = {}
                dataF['ID'] = a.id
                dataF['Name'] = a.name
                dataF['Email'] = a.email
                dataF['Phone'] = a.phone
                dataF['Address']= a.adress
                dataF['Username']= a.username
                dataF['Password']= a.password
                dataF['Kind'] = a.kind
                dataF['registerTime']=a.date_joined
                array.append(dataF)
        if "_add" in request.POST:
            print("test add")
            erroruser = ''
            errorphone = ''
            errormail = ''
            companyName = request.POST.get('companyname_business')
            user = request.POST.get('username')
            binuser = str(''.join(format(ord(i), '08b') for i in user))
            for x in username:
                if (binuser == str(''.join(format(ord(i), '08b') for i in user))):
                    erroruser = 'User is available'
            name = request.POST.get('name')
            password = request.POST.get('password')
            repassword = request.POST.get('repassword')
            phone = request.POST.get('phone')
            email = request.POST.get('txtmail')
            addr = request.POST.get('txtadd')
            kind = 'factory'
            desc = request.POST.get('CompanyInformation')
            binpassword = str(''.join(format(ord(i), '08b') for i in password))
            binrepassword = str(''.join(format(ord(i), '08b') for i in repassword))
            if binpassword == binrepassword:
                authUser = models.ZUser.objects.filter(Q(username=user) | Q(email=email))
                print("ok")
                if authUser.count() > 0:
                    infor['exist'] = "This User Name or E-mail was taken"
                    print(infor['exist'])
                else:
                    try:
                        authUser1 = models.ZUser(username=user, phone=phone, adress=addr, email=email, name=name,
                                                 kind=kind, password=password)
                        authUser1.save()
                        print("go herre",authUser1.username)
                        fa = models.Sites(sitename=companyName, userID_id=authUser1.id)
                        fa.save()
                        bu = models.Zbusiness(compainfor=desc, namecompany=companyName, userID_id=authUser1.id)
                        bu.save()
                    except Exception as e:
                        print(e)
        for a in array:
            print("_edit" + str(a['ID']))
            if "_edit"+str(a['ID']) in request.POST:
                print("khong vao duoc trong nay :((")
                return redirect('admin1',37)
        if "_delete" in request.POST:
            print("start")
            data1 = models.ZUser.objects.filter(active=1)
            for a in data1:
                if (request.POST.get('%d' % a.id)):
                    print('cc', a.id)
                    user = models.ZUser.objects.get(id=a.id)
                    user.delete()
                    user.save()
            return redirect('admin1', siteID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'ManagerUI/Admin.html',
                  {'page': 'admin1', 'siteID': siteID, 'noti': noti, 'infor':infor,
                   'countnoti': countnoti, 'count': count,'array':array,'info': request.session, 'notiVerificationmana':notiVerificationmana, 'username':username, 'phonenumber':phonenumber, 'mail':mail})
def RegisterAccount(request,siteID) :
    if not request.session.session_key:
        return redirect('home')
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    countnoti = noti.filter(state=0).count()
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    data = models.ZUser.objects.filter(active=0, reject=0)
    dataTC = models.ZUser.objects.filter(reject=1)
    try:
        array = []
        reject = []
        for a in data:
            dataF = {}
            dataF['ID'] = a.id
            dataF['Name'] = a.name
            dataF['Email'] = a.email
            dataF['Phone'] = a.phone
            dataF['Address'] = a.adress
            dataF['Username'] = a.username
            dataF['Password'] = a.password
            dataF['Kind'] = a.kind
            dataF['registerTime'] = a.date_joined
            array.append(dataF)
        if "_accept" in request.POST:
            # print("test")
            for a in data:
                if (request.POST.get('%d' % a.id)):
                    user = models.ZUser.objects.get(id=a.id)
                    user.active = 1
                    user.save()
            return redirect('registerAccount', siteID)
            #         noti = models.ZNotification(id_user=user, subject=request.session['name'],
            #                                     content=' đã xóa nhà máy ', object=facilityname,
            #                                     link=siteID,
            #                                     time=datetime.now(), state=0)
            #         noti.save()
            #         a.delete()
        if "_reject" in request.POST:
            for a in data:
                if (request.POST.get('%d' % a.id)):
                    user = models.ZUser.objects.get(id=a.id)
                    user.reject = 1
                    user.save()
            return redirect('registerAccount', siteID)

        for b in dataTC:
            dataT = {}
            dataT['ID'] = b.id
            dataT['Name'] = b.name
            dataT['Email'] = b.email
            dataT['Phone'] = b.phone
            dataT['Address'] = b.adress
            dataT['Username'] = b.username
            dataT['Password'] = b.password
            dataT['Kind'] = b.kind
            dataT['registerTime'] = b.date_joined
            reject.append(dataT)
        try:
            if "_restore" in request.POST:
                for b in dataTC:
                    if (request.POST.get('%d' % b.id)):
                        user = models.ZUser.objects.get(id=b.id)
                        user.reject = 0
                        user.save()
                return redirect('registerAccount', siteID)
        except Exception as e:
            print('Error on line {}'.format(sys.exc_info()[-1].tb_lineno), type(e).__name__, e)
            return redirect('registerAccount', siteID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'ManagerUI/RegisterAccount.html',
                  {'page': 'registerAccount', 'siteID': siteID, 'noti': noti, 'countnoti': countnoti, 
                   'count': count,'array':array, 'reject': reject,'info': request.session})
def ExportdataPDF(request, proposalID):
    try:
        Fluid = ["Acid", "AlCl3", "C1-C2", "C13-C16", "C17-C25", "C25+", "C3-C4", "C5", "C6-C8", "C9-C12", "CO", "DEE",
                 "EE", "EEA", "EG", "EO", "H2", "H2S", "HCl", "HF", "Methanol", "Nitric Acid", "NO2", "Phosgene", "PO",
                 "Pyrophoric", "Steam", "Styrene", "TDI", "Water"]
        rwassessment = models.RwAssessment.objects.get(id=proposalID)
        rwequipment = models.RwEquipment.objects.get(id=proposalID)
        rwcomponent = models.RwComponent.objects.get(id=proposalID)
        rwstream = models.RwStream.objects.get(id=proposalID)
        rwexcor = models.RwExtcorTemperature.objects.get(id=proposalID)
        rwcoat = models.RwCoating.objects.get(id=proposalID)
        rwmaterial = models.RwMaterial.objects.get(id=proposalID)
        componentTypeID = models.ComponentMaster.objects.get(componentid=rwassessment.componentid_id).componenttypeid_id
        componentID=rwassessment.componentid
        tank = [12, 13, 14, 15]
        # print('hihi',proposalID)
        PdfFileReader.data(proposalID)
        return redirect('proposalDisplay', componentID=componentID)
    except Exception as e:
        print(e)
        raise Http404
    return render(request, 'FacilityUI/proposal/proposalListDisplay.html')
def AutoReVerificationSite(request, siteID):
    # siteID = decrypt(siteID)
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    # countnoti = noti.filter(state=0).count()
    notiVerification = ReCalculate.notiVerifications(siteID)
    # countnoti = noti.filter(state=0).count() + len(notiVerification)
    # siteID1 = encrypt(siteID)
    countnoti = noti.filter(state=0).count()
    return render(request, 'FacilityUI/facility/verificationSetupSite.html',
                  {'page': 'Re-verificationSite', 'siteID': siteID, 'noti': noti, 'count': count,
                   'info': request.session})

def Viewhistoryrequest(request, siteID):
    veri = []
    vericontent = []
    verification = models.Verification.objects.all()
    verificontent = models.VeriContent.objects.all()
    for a in verification:
        obj = {}
        obj['id'] = a.id
        obj['proposal'] = a.proposal
        obj['date'] = a.date
        obj['is_active'] = a.Is_active
        obj['manager'] = a.manager
        obj['facility'] = a.facility
        obj['component'] = a.com
        obj['equipment'] = a.eq
        obj['link'] = a.link
        print('faciid= ', a.facility)
        facility = models.Facility.objects.get(facilityid=a.facility)
        site=facility.siteid_id
        namefacility=facility.facilityname
        obj['namefacility']=namefacility
        print('siteid=', site)
        idname = models.Sites.objects.get(siteid=site).userID_id
        user = models.ZUser.objects.get(id=idname)
        name = user.name
        mail = user.email
        phone = user.phone
        obj['sitename'] = name
        obj['mail'] = mail
        obj['phone'] = phone
        veri.append(obj)
    for a in verificontent:
        obj = {}
        obj['id'] = a.id
        obj['veriID'] = a.Verification_id
        obj['content'] = a.content
        vericontent.append(obj)
    return render(request, 'ManagerUI/History_request.html',
                  {'page': 'historyrequest', 'veri': veri, 'vericontent': vericontent, 'info': request.session})
def Viewhistoryrequest(request, siteID):
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    for notifi in noti:
        if request.session['id'] == notifi.id_user:
            notifi.state = 1
            notifi.save()
    veri = []
    verification = models.Verification.objects.all()
    for a in verification:
        obj = {}
        obj['id'] = a.id
        obj['proposal'] = a.proposal
        obj['date'] = a.date
        obj['is_active'] = a.Is_active
        obj['manager'] = a.manager
        obj['facility'] = a.facility
        obj['component'] = a.com
        obj['equipment'] = a.eq
        obj['link'] = a.link
        try:
            obj['datesendreport']=models.Report_verification.objects.get(idreportsent=a.id).date
            obj['damage']=models.Report_verification.objects.get(idreportsent=a.id).damage_factor
            obj['pof']=models.Report_verification.objects.get(idreportsent=a.id).pof
            obj['cof'] = models.Report_verification.objects.get(idreportsent=a.id).cof
            obj['risk'] = models.Report_verification.objects.get(idreportsent=a.id).risk
            obj['inspdudate'] = models.Report_verification.objects.get(idreportsent=a.id).inspdudate
            obj['lastdudate'] = models.Report_verification.objects.get(idreportsent=a.id).lastdudate
        except:
            obj['datesendreport'] =0
            obj['damade']=0
            obj['pof']=0
            obj['cof'] = 0
            obj['risk'] = 0
            obj['inspdudate'] = 0
            obj['lastdudate'] =0
        print('faciid= ', a.facility)
        facility = models.Facility.objects.get(facilityid=a.facility)
        site=facility.siteid_id
        namefacility=facility.facilityname
        obj['namefacility']=namefacility
        print('siteid=', site)
        idname = models.Sites.objects.get(siteid=site).userID_id
        user = models.ZUser.objects.get(id=idname)
        name = user.name
        mail = user.email
        phone = user.phone
        obj['sitename'] = name
        obj['mail'] = mail
        obj['phone'] = phone
        veri.append(obj)
    return render(request, 'ManagerUI/History_request.html',
                  {'page': 'historyrequest', 'veri': veri, 'info': request.session})
def proposal_detail(request, faciid, reportid):
    data = []
    siteID = models.Facility.objects.get(facilityid=faciid).siteid_id
    # print(siteID)
    faci = models.Facility.objects.filter(facilityid=faciid)
    # faciid = models.Facility.objects.get(facilityid=faciid)
    # idequip = models.EquipmentMaster.objects.filter(facilityid_id=faciid)
    # idcom = models.ComponentMaster.objects.get()
    print('nguyenvudat', faciid)
    rwass = models.RwAssessment.objects.all()
    faciname = models.Facility.objects.get(facilityid = faciid)
    data = []
    array = []
    datahis = {}

    # proposal = models.RwAssessment.objects.filter(componentid_id=)
    for a in faci:
        veri = models.Verification.objects.filter(facility=a.facilityid)
        ct = models.VeriContent.objects.all()
        for verifi in veri:
            cont = models.VeriContent.objects.filter(Verification=verifi.id)
            array.append(cont)
            # for con in cont:
                # print(con.Verification.id)
    idequip = models.EquipmentMaster.objects.filter(facilityid_id=faciid)
    for a in idequip:
        idcom = models.ComponentMaster.objects.filter(equipmentid=a.equipmentid)
        for b in idcom:
            idproposal = models.RwAssessment.objects.filter(componentid=b.componentid)
            # rwass = models.RwAssessment.objects.filter(id=idproposal)
            for e in idproposal:
                obj = {}
                obj['ID'] = e.id
                obj['Name'] = e.proposalname
                obj['pof1'] = models.RwFullPof.objects.get(id=e.id).pofap1category
                obj['pof2'] = models.RwFullPof.objects.get(id=e.id).pofap2category
                obj['pof3'] = models.RwFullPof.objects.get(id=e.id).pofap3category
                obj['cof'] = models.RwFullFcof.objects.get(id=e.id).fcofcategory
                data.append(obj)
    if "_select" in request.POST:
        idveri = request.POST.get('_select')
        # for a in rwass:
        # if (request.POST.get('%d' % a.id)):
        #     print("cmm", a.id)
        user = models.ZUser.objects.get(kind='manager').id
        send = models.Verificationsend(id_user=user, subject='response', link=idveri, state=0, id_rep = reportid, facility =faciid)
        send.save()
        verification = models.Verification.objects.get(id=reportid)
        verification.Is_active = 1
        verification.save()
        obj = SendEmail()
        obj.email_for_response(request, faciid,reportid,verification.idcom,verification.idequip)
        # for b in veri:
        # b.Is_active = 1
        # b.save()
        print("hi",a)
        return redirect('VerificationHome', faciid=faciid)
    return render(request, 'ManagerUI/verification_requirments/verifiaction_report.html', {'page':'proposaldetail', 'data':data, 'faciname':faciname})
def proposal_detail(request, faciid, reportid):
    data = []
    print(reportid)
    print("hro")
    siteID = models.Facility.objects.get(facilityid=faciid).siteid_id
    # print(siteID)
    faci = models.Facility.objects.filter(facilityid=faciid)
    # faciid = models.Facility.objects.get(facilityid=faciid)
    # idequip = models.EquipmentMaster.objects.filter(facilityid_id=faciid)
    # idcom = models.ComponentMaster.objects.get()
    print('nguyenvudat', faciid)
    rwass = models.RwAssessment.objects.all()
    faciname = models.Facility.objects.get(facilityid = faciid)
    thereport=models.Verification.objects.get(id=reportid)
    print(thereport.manager)

    #luu cac yeu to gay thiet hai vao mang content

    # if dict['thinningap1']:
    #     content.append('Governing Thinning Damage Factor')
    # if dict['sccap1']:
    #     content.append('Governing Stress Corrosion Cracking Damage Factor')
    # if dict['externalap1']:
    #     content.append('Governing External Damage Factor')
    # if dict['htha_ap1']:
    #     content.append('High Temperature Hydrogen Attack Damage Factor')
    # if dict['brittleap1']:
    #     content.append('Governing Brittle Fracture Damage Factor')
    # if dict['fatigueap1']:
    #     content.append('Piping Mechanical Fatigue Damage Factor')
    # if dict['thinninggeneralap1']:
    #     content.append('Total Damage Factor with General Thinning')
    # if dict['thinninglocalap1']:
    #     content.append('Total Damage Factor with Local Thinning')
    # if dict['totaldfap1']:
    #     content.append('Final Total Damage Factor')
    # for a in content:
    #     print(a)

    # proposal = models.RwAssessment.objects.filter(componentid_id=)
    for a in faci:
        veri = models.Verification.objects.filter(facility=a.facilityid)
    idequip = models.EquipmentMaster.objects.filter(facilityid_id=faciid)
    for a in idequip:
        idcom = models.ComponentMaster.objects.filter(equipmentid=a.equipmentid)
        for b in idcom:
            idproposal = models.RwAssessment.objects.filter(componentid=b.componentid)
            # rwass = models.RwAssessment.objects.filter(id=idproposal)
            for e in idproposal:
                obj = {}
                obj['content']=''
                obj['ID'] = e.id
                print('mai ben nhau ban nhe', e.id)
                obj['Name'] = e.proposalname
                obj['datecreate']=datetime.now()
                obj['thinningap1'] = roundData.roundDF( models.RwFullPof.objects.get(id=e.id).thinningap1)
                if obj['thinningap1']:
                    obj['content']=obj['content']+'Governing Thinning Damage Factor'+', '
                obj['sccap1'] = roundData.roundDF( models.RwFullPof.objects.get(id=e.id).sccap1)
                if obj['sccap1']:
                    obj['content'] = obj['content']+'Governing Stress Corrosion Cracking Damage Factor'+', '
                obj['externalap1'] = roundData.roundDF( models.RwFullPof.objects.get(id=e.id).externalap1)
                if obj['externalap1']:
                    obj['content'] = obj['content']+'Governing External Damage Factor'+', '
                obj['htha_ap1'] = roundData.roundDF( models.RwFullPof.objects.get(id=e.id).htha_ap1)
                if  obj['htha_ap1']:
                    obj['content'] = obj['content']+ 'High Temperature Hydrogen Attack Damage Factor'+','
                obj['brittleap1'] = roundData.roundDF( models.RwFullPof.objects.get(id=e.id).brittleap1)
                if obj['brittleap1']:
                    obj['content'] = obj['content']+ 'Governing Brittle Fracture Damage Factor' + ', '
                obj['fatigueap1'] = roundData.roundDF( models.RwFullPof.objects.get(id=e.id).fatigueap1)
                if obj['fatigueap1']:
                    obj['content'] = obj['content']+ 'Piping Mechanical Fatigue Damage Factor'
                obj['pof1value'] = roundData.roundPoF( models.RwFullPof.objects.get(id=e.id).pofap1)
                obj['pof1'] = models.RwFullPof.objects.get(id=e.id).pofap1category
                # obj['pof2'] = models.RwFullPof.objects.get(id=e.id).pofap2category
                # obj['pof3'] = models.RwFullPof.objects.get(id=e.id).pofap3category
                obj['cofvalue']= models.RwFullFcof.objects.get(id=e.id).fcofvalue
                obj['cof'] = models.RwFullFcof.objects.get(id=e.id).fcofcategory
                #tinh toan risk
                obj['df']=models.RwFullPof.objects.get(id=e.id).totaldfap1
                obj['gff']=models.RwFullPof.objects.get(id=e.id).gfftotal
                obj['fms']=models.RwFullPof.objects.get(id=e.id).fms
                obj['fc']=models.RwFullFcof.objects.get(id=e.id).fcofvalue
                obj['riskvalue']=round(obj['df'] * obj['gff'] * obj['fms'] * obj['fc'], 2)
                getP_risk = export_data.getP_risk(e.id)
                if getP_risk['consequence'] == 0 or getP_risk['pof_catalog'] == 'N/A':
                    getP_risk['riskcv'] = 'N/A'
                elif getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog'] in ('A', 'B', 'C'):
                    getP_risk['riskcv'] = "L"
                elif (getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog'] == 'D') or (
                        getP_risk['consequence'] in (3, 4) and getP_risk['pof_catalog'] in ('A', 'B')) or (
                        getP_risk['consequence'] == 3 and getP_risk['pof_catalog'] == 'C'):
                    getP_risk['riskcv'] = "M"
                elif (getP_risk['consequence'] == 5 and getP_risk['pof_catalog'] in ('C', 'D', 'E')) or (
                        getP_risk['consequence'] == 4 and getP_risk['pof_catalog'] == 'E'):
                    getP_risk['riskcv'] = "H"
                else:
                    getP_risk['riskcv'] = "M H"
                obj['risk']=getP_risk['riskcv']
                #lay inspadue va lastdude
                obj['duedate'] = models.RwDamageMechanism.objects.filter(id_dm=e.id)[0].inspduedate
                obj['lastinsp'] = models.RwAssessment.objects.get(id=e.id).assessmentdate
                data.append(obj)
                if "_send" in request.POST:
                    idveri = request.POST.get("_send")
                    print('id cua cai nay la ', idveri)
                    # for a in rwass:
                    # if (request.POST.get('%d' % a.id)):
                    #     print("cmm", a.id)
                    user = models.ZUser.objects.get(kind='manager').id
                    send = models.Verificationsend(id_user=user, subject='response', link=idveri, state=0,
                                                   id_rep=reportid, facility=faciid)
                    send.save()
                    obj['pof1value'] = roundData.roundPoF(models.RwFullPof.objects.get(id=idveri).pofap1)
                    obj['pof1'] = models.RwFullPof.objects.get(id=idveri).pofap1category
                    # obj['pof2'] = models.RwFullPof.objects.get(id=e.id).pofap2category
                    # obj['pof3'] = models.RwFullPof.objects.get(id=e.id).pofap3category
                    obj['cofvalue'] = models.RwFullFcof.objects.get(id=idveri).fcofvalue
                    obj['cof'] = models.RwFullFcof.objects.get(id=idveri).fcofcategory
                    # tinh toan risk
                    obj['df'] = models.RwFullPof.objects.get(id=idveri).totaldfap1
                    obj['gff'] = models.RwFullPof.objects.get(id=idveri).gfftotal
                    obj['fms'] = models.RwFullPof.objects.get(id=idveri).fms
                    obj['fc'] = models.RwFullFcof.objects.get(id=idveri).fcofvalue
                    obj['riskvalue'] = round(obj['df'] * obj['gff'] * obj['fms'] * obj['fc'], 2)
                    getP_risk = export_data.getP_risk(idveri)
                    if getP_risk['consequence'] == 0 or getP_risk['pof_catalog'] == 'N/A':
                        getP_risk['riskcv'] = 'N/A'
                    elif getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog'] in ('A', 'B', 'C'):
                        getP_risk['riskcv'] = "L"
                    elif (getP_risk['consequence'] in (1, 2) and getP_risk['pof_catalog'] == 'D') or (
                                    getP_risk['consequence'] in (3, 4) and getP_risk['pof_catalog'] in ('A', 'B')) or (
                                    getP_risk['consequence'] == 3 and getP_risk['pof_catalog'] == 'C'):
                        getP_risk['riskcv'] = "M"
                    elif (getP_risk['consequence'] == 5 and getP_risk['pof_catalog'] in ('C', 'D', 'E')) or (
                                    getP_risk['consequence'] == 4 and getP_risk['pof_catalog'] == 'E'):
                        getP_risk['riskcv'] = "H"
                    else:
                        getP_risk['riskcv'] = "M H"
                    obj['risk'] = getP_risk['riskcv']
                    # lay inspadue va lastdude
                    obj['duedate'] = models.RwDamageMechanism.objects.filter(id_dm=idveri)[0].inspduedate
                    obj['lastinsp'] = models.RwAssessment.objects.get(id=idveri).assessmentdate
                    report=models.Report_verification(date=obj['datecreate'],damage_factor=obj['content'], pof=str(obj['pof1'])+' ('+str(obj['pof1value'])+')', cof=str(obj['cof'])+' ('+str(obj['cofvalue'])+')'
                                                       , risk=str(obj['risk'])+' ('+str(obj['riskvalue'])+')', inspdudate=obj['duedate'], lastdudate=obj['lastinsp'], idreportsent=reportid)
                    report.save()
                    verification = models.Verification.objects.get(id=reportid)
                    verification.Is_active = 1
                    verification.save()
                    noti=models.ZNotification(id_user=models.ZUser.objects.get(kind='manager').id,subject='You',content="have a respone verification from", object=faciname,link=siteID,time=obj['datecreate'],state=0,id_link_to_part=reportid, active_eng=1, active_vie=0)
                    noti.save()

                    obj = SendEmail()
                    obj.email_for_response(request, faciid, reportid, verification.idcom, verification.idequip)
                    # for b in veri:
                    #     b.Is_active = 1
                    #     b.save()
                    print("hi")
                    return redirect('VerificationHome', faciid=faciid)


    return render(request, 'ManagerUI/verification_requirments/verifiaction_report.html', {'page':'proposaldetail','data':data, 'faciname':faciname,'thereport':thereport})
def testva(request):
    return render(request, 'test.html')
def settingNotification(request,siteID):
    if len(siteID) > 10:
        siteID = int(decrypt(siteID))
    else:
        siteID = int(siteID)
    if not request.session.session_key:
        return redirect('home')
    count = models.Emailto.objects.filter(Q(Emailt=models.ZUser.objects.filter(id=request.session['id'])[0].email),
                                          Q(Is_see=0)).count()
    noti = models.ZNotification.objects.all().filter(id_user=request.session['id'],active_eng=1)
    # countnoti = noti.filter(state=0).count()
    notiVerification = ReCalculate.notiVerifications(siteID)
    countnoti = noti.filter(state=0).count()
    UserID = models.Sites.objects.filter(userID_id=request.session['id'])[0].userID_id
    if '_save' in request.POST:
        print('cuong')
        if request.session['kind'] == 'factory':
            user = models.ZUser.objects.get(id=UserID)
            mode = 0
            if request.POST.get('mode') == 'on':
                mode = 1
            else:
                mode = 0
            user.active_notification = mode
            user.save()
    oldMode = models.ZUser.objects.get(id=UserID).active_notification
    siteID = encrypt(str(siteID))
    return render(request, 'FacilityUI/facility/settingNotification.html',
                  {'siteID': siteID, 'info': request.session,  'noti': noti,
                   'countnoti': countnoti, 'oldMode':oldMode,'count': count, 'notiVerification': notiVerification})
def RsPassword(request, userid):
    userid = userid
    error = ''
    try:
        if request.method == "POST":
            newpass = request.POST.get('password')
            if newpass != '':
                reset = models.ZUser.objects.get(id=userid)
                reset.password = newpass
                reset.save()
                return redirect('home')
            else:
                error = 'Password have not NULL'
    except Exception as e:
        print(e)
    return render (request, 'Home/Reset_Password.html', {'error':error})